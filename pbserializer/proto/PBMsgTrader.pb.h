// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgTrader.proto

#ifndef PROTOBUF_PBMsgTrader_2eproto__INCLUDED
#define PROTOBUF_PBMsgTrader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PBMsgTrader {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PBMsgTrader_2eproto();
void protobuf_AssignDesc_PBMsgTrader_2eproto();
void protobuf_ShutdownFile_PBMsgTrader_2eproto();

class PBMsgError;
class PBMsgLoginReq;
class PBMsgLoginRsp;
class PBMsgLogout;
class PBMsgOrderAction;
class PBMsgOrderInsert;
class PBMsgOrderRtn;
class PBMsgQueryReqFund;
class PBMsgQueryReqInstrumentInfo;
class PBMsgQueryReqMarketInfo;
class PBMsgQueryReqOrder;
class PBMsgQueryReqPosition;
class PBMsgQueryReqTrade;
class PBMsgQueryRspFund;
class PBMsgQueryRspInstrumentInfo;
class PBMsgQueryRspMarketInfo;
class PBMsgQueryRspPosition;
class PBMsgReqConnect;
class PBMsgRspConnect;
class PBMsgSettlementInfoConfirm;
class PBMsgTradeRtn;

enum PBOrderStatus {
  PBOrderStatus_0 = 0,
  TTIS_ORDER_INSERT_SUCCESS = 1,
  TTIS_ORDER_INSERT_FAILED = 2,
  TTIS_ORDER_CANCEL_SUCCESS = 3,
  TTIS_ORDER_CANCEL_FAILED = 4,
  TTIS_ORDER_OTHER = 5,
  ALL_FINISHED = 10,
  PARTLY_FINISHED = 11,
  PBOrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PBOrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PBOrderStatus_IsValid(int value);
const PBOrderStatus PBOrderStatus_MIN = PBOrderStatus_0;
const PBOrderStatus PBOrderStatus_MAX = PARTLY_FINISHED;
const int PBOrderStatus_ARRAYSIZE = PBOrderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBOrderStatus_descriptor();
inline const ::std::string& PBOrderStatus_Name(PBOrderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBOrderStatus_descriptor(), value);
}
inline bool PBOrderStatus_Parse(
    const ::std::string& name, PBOrderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBOrderStatus>(
    PBOrderStatus_descriptor(), name, value);
}
// ===================================================================

class PBMsgError : public ::google::protobuf::Message {
 public:
  PBMsgError();
  virtual ~PBMsgError();

  PBMsgError(const PBMsgError& from);

  inline PBMsgError& operator=(const PBMsgError& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgError& default_instance();

  void Swap(PBMsgError* other);

  // implements Message ----------------------------------------------

  inline PBMsgError* New() const { return New(NULL); }

  PBMsgError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgError& from);
  void MergeFrom(const PBMsgError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ErrorID = 2;
  void clear_errorid();
  static const int kErrorIDFieldNumber = 2;
  ::google::protobuf::int32 errorid() const;
  void set_errorid(::google::protobuf::int32 value);

  // optional bytes ErrorMsg = 3;
  void clear_errormsg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  void set_errormsg(const char* value);
  void set_errormsg(const void* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  ::google::protobuf::int32 errorid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgError* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgLoginReq : public ::google::protobuf::Message {
 public:
  PBMsgLoginReq();
  virtual ~PBMsgLoginReq();

  PBMsgLoginReq(const PBMsgLoginReq& from);

  inline PBMsgLoginReq& operator=(const PBMsgLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgLoginReq& default_instance();

  void Swap(PBMsgLoginReq* other);

  // implements Message ----------------------------------------------

  inline PBMsgLoginReq* New() const { return New(NULL); }

  PBMsgLoginReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgLoginReq& from);
  void MergeFrom(const PBMsgLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TradingDay = 2;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 2;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional string BrokerID = 3;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 3;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string UserID = 4;
  void clear_userid();
  static const int kUserIDFieldNumber = 4;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string Password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string UserProductInfo = 6;
  void clear_userproductinfo();
  static const int kUserProductInfoFieldNumber = 6;
  const ::std::string& userproductinfo() const;
  void set_userproductinfo(const ::std::string& value);
  void set_userproductinfo(const char* value);
  void set_userproductinfo(const char* value, size_t size);
  ::std::string* mutable_userproductinfo();
  ::std::string* release_userproductinfo();
  void set_allocated_userproductinfo(::std::string* userproductinfo);

  // optional string InterfaceProductInfo = 7;
  void clear_interfaceproductinfo();
  static const int kInterfaceProductInfoFieldNumber = 7;
  const ::std::string& interfaceproductinfo() const;
  void set_interfaceproductinfo(const ::std::string& value);
  void set_interfaceproductinfo(const char* value);
  void set_interfaceproductinfo(const char* value, size_t size);
  ::std::string* mutable_interfaceproductinfo();
  ::std::string* release_interfaceproductinfo();
  void set_allocated_interfaceproductinfo(::std::string* interfaceproductinfo);

  // optional string ProtocolInfo = 8;
  void clear_protocolinfo();
  static const int kProtocolInfoFieldNumber = 8;
  const ::std::string& protocolinfo() const;
  void set_protocolinfo(const ::std::string& value);
  void set_protocolinfo(const char* value);
  void set_protocolinfo(const char* value, size_t size);
  ::std::string* mutable_protocolinfo();
  ::std::string* release_protocolinfo();
  void set_allocated_protocolinfo(::std::string* protocolinfo);

  // optional string MacAddress = 9;
  void clear_macaddress();
  static const int kMacAddressFieldNumber = 9;
  const ::std::string& macaddress() const;
  void set_macaddress(const ::std::string& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  ::std::string* mutable_macaddress();
  ::std::string* release_macaddress();
  void set_allocated_macaddress(::std::string* macaddress);

  // optional string OneTimePassword = 10;
  void clear_onetimepassword();
  static const int kOneTimePasswordFieldNumber = 10;
  const ::std::string& onetimepassword() const;
  void set_onetimepassword(const ::std::string& value);
  void set_onetimepassword(const char* value);
  void set_onetimepassword(const char* value, size_t size);
  ::std::string* mutable_onetimepassword();
  ::std::string* release_onetimepassword();
  void set_allocated_onetimepassword(::std::string* onetimepassword);

  // optional string ClientIPAddress = 11;
  void clear_clientipaddress();
  static const int kClientIPAddressFieldNumber = 11;
  const ::std::string& clientipaddress() const;
  void set_clientipaddress(const ::std::string& value);
  void set_clientipaddress(const char* value);
  void set_clientipaddress(const char* value, size_t size);
  ::std::string* mutable_clientipaddress();
  ::std::string* release_clientipaddress();
  void set_allocated_clientipaddress(::std::string* clientipaddress);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr userproductinfo_;
  ::google::protobuf::internal::ArenaStringPtr interfaceproductinfo_;
  ::google::protobuf::internal::ArenaStringPtr protocolinfo_;
  ::google::protobuf::internal::ArenaStringPtr macaddress_;
  ::google::protobuf::internal::ArenaStringPtr onetimepassword_;
  ::google::protobuf::internal::ArenaStringPtr clientipaddress_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgLoginRsp : public ::google::protobuf::Message {
 public:
  PBMsgLoginRsp();
  virtual ~PBMsgLoginRsp();

  PBMsgLoginRsp(const PBMsgLoginRsp& from);

  inline PBMsgLoginRsp& operator=(const PBMsgLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgLoginRsp& default_instance();

  void Swap(PBMsgLoginRsp* other);

  // implements Message ----------------------------------------------

  inline PBMsgLoginRsp* New() const { return New(NULL); }

  PBMsgLoginRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgLoginRsp& from);
  void MergeFrom(const PBMsgLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TradingDay = 2;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 2;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional string LoginTime = 3;
  void clear_logintime();
  static const int kLoginTimeFieldNumber = 3;
  const ::std::string& logintime() const;
  void set_logintime(const ::std::string& value);
  void set_logintime(const char* value);
  void set_logintime(const char* value, size_t size);
  ::std::string* mutable_logintime();
  ::std::string* release_logintime();
  void set_allocated_logintime(::std::string* logintime);

  // optional string BrokerID = 4;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 4;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string UserID = 5;
  void clear_userid();
  static const int kUserIDFieldNumber = 5;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string SystemName = 6;
  void clear_systemname();
  static const int kSystemNameFieldNumber = 6;
  const ::std::string& systemname() const;
  void set_systemname(const ::std::string& value);
  void set_systemname(const char* value);
  void set_systemname(const char* value, size_t size);
  ::std::string* mutable_systemname();
  ::std::string* release_systemname();
  void set_allocated_systemname(::std::string* systemname);

  // optional int32 FrontID = 7;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 7;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // optional int32 SessionID = 8;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 8;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // optional string MaxOrderRef = 9;
  void clear_maxorderref();
  static const int kMaxOrderRefFieldNumber = 9;
  const ::std::string& maxorderref() const;
  void set_maxorderref(const ::std::string& value);
  void set_maxorderref(const char* value);
  void set_maxorderref(const char* value, size_t size);
  ::std::string* mutable_maxorderref();
  ::std::string* release_maxorderref();
  void set_allocated_maxorderref(::std::string* maxorderref);

  // optional string SHFETime = 10;
  void clear_shfetime();
  static const int kSHFETimeFieldNumber = 10;
  const ::std::string& shfetime() const;
  void set_shfetime(const ::std::string& value);
  void set_shfetime(const char* value);
  void set_shfetime(const char* value, size_t size);
  ::std::string* mutable_shfetime();
  ::std::string* release_shfetime();
  void set_allocated_shfetime(::std::string* shfetime);

  // optional string DCETime = 11;
  void clear_dcetime();
  static const int kDCETimeFieldNumber = 11;
  const ::std::string& dcetime() const;
  void set_dcetime(const ::std::string& value);
  void set_dcetime(const char* value);
  void set_dcetime(const char* value, size_t size);
  ::std::string* mutable_dcetime();
  ::std::string* release_dcetime();
  void set_allocated_dcetime(::std::string* dcetime);

  // optional string CZCETime = 12;
  void clear_czcetime();
  static const int kCZCETimeFieldNumber = 12;
  const ::std::string& czcetime() const;
  void set_czcetime(const ::std::string& value);
  void set_czcetime(const char* value);
  void set_czcetime(const char* value, size_t size);
  ::std::string* mutable_czcetime();
  ::std::string* release_czcetime();
  void set_allocated_czcetime(::std::string* czcetime);

  // optional string FFEXTime = 13;
  void clear_ffextime();
  static const int kFFEXTimeFieldNumber = 13;
  const ::std::string& ffextime() const;
  void set_ffextime(const ::std::string& value);
  void set_ffextime(const char* value);
  void set_ffextime(const char* value, size_t size);
  ::std::string* mutable_ffextime();
  ::std::string* release_ffextime();
  void set_allocated_ffextime(::std::string* ffextime);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::internal::ArenaStringPtr logintime_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr systemname_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 sessionid_;
  ::google::protobuf::internal::ArenaStringPtr maxorderref_;
  ::google::protobuf::internal::ArenaStringPtr shfetime_;
  ::google::protobuf::internal::ArenaStringPtr dcetime_;
  ::google::protobuf::internal::ArenaStringPtr czcetime_;
  ::google::protobuf::internal::ArenaStringPtr ffextime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgLogout : public ::google::protobuf::Message {
 public:
  PBMsgLogout();
  virtual ~PBMsgLogout();

  PBMsgLogout(const PBMsgLogout& from);

  inline PBMsgLogout& operator=(const PBMsgLogout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgLogout& default_instance();

  void Swap(PBMsgLogout* other);

  // implements Message ----------------------------------------------

  inline PBMsgLogout* New() const { return New(NULL); }

  PBMsgLogout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgLogout& from);
  void MergeFrom(const PBMsgLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string UserID = 3;
  void clear_userid();
  static const int kUserIDFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgLogout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgLogout* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryReqMarketInfo : public ::google::protobuf::Message {
 public:
  PBMsgQueryReqMarketInfo();
  virtual ~PBMsgQueryReqMarketInfo();

  PBMsgQueryReqMarketInfo(const PBMsgQueryReqMarketInfo& from);

  inline PBMsgQueryReqMarketInfo& operator=(const PBMsgQueryReqMarketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryReqMarketInfo& default_instance();

  void Swap(PBMsgQueryReqMarketInfo* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryReqMarketInfo* New() const { return New(NULL); }

  PBMsgQueryReqMarketInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryReqMarketInfo& from);
  void MergeFrom(const PBMsgQueryReqMarketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryReqMarketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ExchangeID = 2;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 2;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryReqMarketInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryReqMarketInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryRspMarketInfo : public ::google::protobuf::Message {
 public:
  PBMsgQueryRspMarketInfo();
  virtual ~PBMsgQueryRspMarketInfo();

  PBMsgQueryRspMarketInfo(const PBMsgQueryRspMarketInfo& from);

  inline PBMsgQueryRspMarketInfo& operator=(const PBMsgQueryRspMarketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryRspMarketInfo& default_instance();

  void Swap(PBMsgQueryRspMarketInfo* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryRspMarketInfo* New() const { return New(NULL); }

  PBMsgQueryRspMarketInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryRspMarketInfo& from);
  void MergeFrom(const PBMsgQueryRspMarketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryRspMarketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EOF = 1;
  void clear_eof();
  static const int kEOFFieldNumber = 1;
  ::google::protobuf::int32 eof() const;
  void set_eof(::google::protobuf::int32 value);

  // optional string ExchangeID = 2;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 2;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional bytes ExchangeName = 3;
  void clear_exchangename();
  static const int kExchangeNameFieldNumber = 3;
  const ::std::string& exchangename() const;
  void set_exchangename(const ::std::string& value);
  void set_exchangename(const char* value);
  void set_exchangename(const void* value, size_t size);
  ::std::string* mutable_exchangename();
  ::std::string* release_exchangename();
  void set_allocated_exchangename(::std::string* exchangename);

  // optional string ExchangeProperty = 4;
  void clear_exchangeproperty();
  static const int kExchangePropertyFieldNumber = 4;
  const ::std::string& exchangeproperty() const;
  void set_exchangeproperty(const ::std::string& value);
  void set_exchangeproperty(const char* value);
  void set_exchangeproperty(const char* value, size_t size);
  ::std::string* mutable_exchangeproperty();
  ::std::string* release_exchangeproperty();
  void set_allocated_exchangeproperty(::std::string* exchangeproperty);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryRspMarketInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr exchangename_;
  ::google::protobuf::internal::ArenaStringPtr exchangeproperty_;
  ::google::protobuf::int32 eof_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryRspMarketInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryReqInstrumentInfo : public ::google::protobuf::Message {
 public:
  PBMsgQueryReqInstrumentInfo();
  virtual ~PBMsgQueryReqInstrumentInfo();

  PBMsgQueryReqInstrumentInfo(const PBMsgQueryReqInstrumentInfo& from);

  inline PBMsgQueryReqInstrumentInfo& operator=(const PBMsgQueryReqInstrumentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryReqInstrumentInfo& default_instance();

  void Swap(PBMsgQueryReqInstrumentInfo* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryReqInstrumentInfo* New() const { return New(NULL); }

  PBMsgQueryReqInstrumentInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryReqInstrumentInfo& from);
  void MergeFrom(const PBMsgQueryReqInstrumentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryReqInstrumentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string InstrumentID = 2;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 2;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string ExchangeID = 3;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 3;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string ExchangeInstID = 4;
  void clear_exchangeinstid();
  static const int kExchangeInstIDFieldNumber = 4;
  const ::std::string& exchangeinstid() const;
  void set_exchangeinstid(const ::std::string& value);
  void set_exchangeinstid(const char* value);
  void set_exchangeinstid(const char* value, size_t size);
  ::std::string* mutable_exchangeinstid();
  ::std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // optional string ProductID = 5;
  void clear_productid();
  static const int kProductIDFieldNumber = 5;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeinstid_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryReqInstrumentInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryRspInstrumentInfo : public ::google::protobuf::Message {
 public:
  PBMsgQueryRspInstrumentInfo();
  virtual ~PBMsgQueryRspInstrumentInfo();

  PBMsgQueryRspInstrumentInfo(const PBMsgQueryRspInstrumentInfo& from);

  inline PBMsgQueryRspInstrumentInfo& operator=(const PBMsgQueryRspInstrumentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryRspInstrumentInfo& default_instance();

  void Swap(PBMsgQueryRspInstrumentInfo* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryRspInstrumentInfo* New() const { return New(NULL); }

  PBMsgQueryRspInstrumentInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryRspInstrumentInfo& from);
  void MergeFrom(const PBMsgQueryRspInstrumentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryRspInstrumentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EOF = 1;
  void clear_eof();
  static const int kEOFFieldNumber = 1;
  ::google::protobuf::int32 eof() const;
  void set_eof(::google::protobuf::int32 value);

  // optional string InstrumentID = 2;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 2;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string ExchangeID = 3;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 3;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional bytes InstrumentName = 4;
  void clear_instrumentname();
  static const int kInstrumentNameFieldNumber = 4;
  const ::std::string& instrumentname() const;
  void set_instrumentname(const ::std::string& value);
  void set_instrumentname(const char* value);
  void set_instrumentname(const void* value, size_t size);
  ::std::string* mutable_instrumentname();
  ::std::string* release_instrumentname();
  void set_allocated_instrumentname(::std::string* instrumentname);

  // optional string ExchangeInstID = 5;
  void clear_exchangeinstid();
  static const int kExchangeInstIDFieldNumber = 5;
  const ::std::string& exchangeinstid() const;
  void set_exchangeinstid(const ::std::string& value);
  void set_exchangeinstid(const char* value);
  void set_exchangeinstid(const char* value, size_t size);
  ::std::string* mutable_exchangeinstid();
  ::std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // optional string ProductID = 6;
  void clear_productid();
  static const int kProductIDFieldNumber = 6;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // optional bytes ProductClass = 7;
  void clear_productclass();
  static const int kProductClassFieldNumber = 7;
  const ::std::string& productclass() const;
  void set_productclass(const ::std::string& value);
  void set_productclass(const char* value);
  void set_productclass(const void* value, size_t size);
  ::std::string* mutable_productclass();
  ::std::string* release_productclass();
  void set_allocated_productclass(::std::string* productclass);

  // optional int32 DeliveryYear = 8;
  void clear_deliveryyear();
  static const int kDeliveryYearFieldNumber = 8;
  ::google::protobuf::int32 deliveryyear() const;
  void set_deliveryyear(::google::protobuf::int32 value);

  // optional int32 DeliveryMonth = 9;
  void clear_deliverymonth();
  static const int kDeliveryMonthFieldNumber = 9;
  ::google::protobuf::int32 deliverymonth() const;
  void set_deliverymonth(::google::protobuf::int32 value);

  // optional int32 MaxMarketOrderVolume = 10;
  void clear_maxmarketordervolume();
  static const int kMaxMarketOrderVolumeFieldNumber = 10;
  ::google::protobuf::int32 maxmarketordervolume() const;
  void set_maxmarketordervolume(::google::protobuf::int32 value);

  // optional int32 MinMarketOrderVolume = 11;
  void clear_minmarketordervolume();
  static const int kMinMarketOrderVolumeFieldNumber = 11;
  ::google::protobuf::int32 minmarketordervolume() const;
  void set_minmarketordervolume(::google::protobuf::int32 value);

  // optional int32 MaxLimitOrderVolume = 12;
  void clear_maxlimitordervolume();
  static const int kMaxLimitOrderVolumeFieldNumber = 12;
  ::google::protobuf::int32 maxlimitordervolume() const;
  void set_maxlimitordervolume(::google::protobuf::int32 value);

  // optional int32 MinLimitOrderVolume = 13;
  void clear_minlimitordervolume();
  static const int kMinLimitOrderVolumeFieldNumber = 13;
  ::google::protobuf::int32 minlimitordervolume() const;
  void set_minlimitordervolume(::google::protobuf::int32 value);

  // optional int32 VolumeMultiple = 14;
  void clear_volumemultiple();
  static const int kVolumeMultipleFieldNumber = 14;
  ::google::protobuf::int32 volumemultiple() const;
  void set_volumemultiple(::google::protobuf::int32 value);

  // optional int32 PriceTick = 15;
  void clear_pricetick();
  static const int kPriceTickFieldNumber = 15;
  ::google::protobuf::int32 pricetick() const;
  void set_pricetick(::google::protobuf::int32 value);

  // optional string CreateDate = 16;
  void clear_createdate();
  static const int kCreateDateFieldNumber = 16;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // optional string OpenDate = 17;
  void clear_opendate();
  static const int kOpenDateFieldNumber = 17;
  const ::std::string& opendate() const;
  void set_opendate(const ::std::string& value);
  void set_opendate(const char* value);
  void set_opendate(const char* value, size_t size);
  ::std::string* mutable_opendate();
  ::std::string* release_opendate();
  void set_allocated_opendate(::std::string* opendate);

  // optional string ExpireDate = 18;
  void clear_expiredate();
  static const int kExpireDateFieldNumber = 18;
  const ::std::string& expiredate() const;
  void set_expiredate(const ::std::string& value);
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  ::std::string* mutable_expiredate();
  ::std::string* release_expiredate();
  void set_allocated_expiredate(::std::string* expiredate);

  // optional string StartDelivDate = 19;
  void clear_startdelivdate();
  static const int kStartDelivDateFieldNumber = 19;
  const ::std::string& startdelivdate() const;
  void set_startdelivdate(const ::std::string& value);
  void set_startdelivdate(const char* value);
  void set_startdelivdate(const char* value, size_t size);
  ::std::string* mutable_startdelivdate();
  ::std::string* release_startdelivdate();
  void set_allocated_startdelivdate(::std::string* startdelivdate);

  // optional string EndDelivDate = 20;
  void clear_enddelivdate();
  static const int kEndDelivDateFieldNumber = 20;
  const ::std::string& enddelivdate() const;
  void set_enddelivdate(const ::std::string& value);
  void set_enddelivdate(const char* value);
  void set_enddelivdate(const char* value, size_t size);
  ::std::string* mutable_enddelivdate();
  ::std::string* release_enddelivdate();
  void set_allocated_enddelivdate(::std::string* enddelivdate);

  // optional string InstLifePhase = 21;
  void clear_instlifephase();
  static const int kInstLifePhaseFieldNumber = 21;
  const ::std::string& instlifephase() const;
  void set_instlifephase(const ::std::string& value);
  void set_instlifephase(const char* value);
  void set_instlifephase(const char* value, size_t size);
  ::std::string* mutable_instlifephase();
  ::std::string* release_instlifephase();
  void set_allocated_instlifephase(::std::string* instlifephase);

  // optional int32 IsTrading = 22;
  void clear_istrading();
  static const int kIsTradingFieldNumber = 22;
  ::google::protobuf::int32 istrading() const;
  void set_istrading(::google::protobuf::int32 value);

  // optional string PositionType = 23;
  void clear_positiontype();
  static const int kPositionTypeFieldNumber = 23;
  const ::std::string& positiontype() const;
  void set_positiontype(const ::std::string& value);
  void set_positiontype(const char* value);
  void set_positiontype(const char* value, size_t size);
  ::std::string* mutable_positiontype();
  ::std::string* release_positiontype();
  void set_allocated_positiontype(::std::string* positiontype);

  // optional string PositionDateType = 24;
  void clear_positiondatetype();
  static const int kPositionDateTypeFieldNumber = 24;
  const ::std::string& positiondatetype() const;
  void set_positiondatetype(const ::std::string& value);
  void set_positiondatetype(const char* value);
  void set_positiondatetype(const char* value, size_t size);
  ::std::string* mutable_positiondatetype();
  ::std::string* release_positiondatetype();
  void set_allocated_positiondatetype(::std::string* positiondatetype);

  // optional double LongMarginRatio = 25;
  void clear_longmarginratio();
  static const int kLongMarginRatioFieldNumber = 25;
  double longmarginratio() const;
  void set_longmarginratio(double value);

  // optional double ShortMarginRatio = 26;
  void clear_shortmarginratio();
  static const int kShortMarginRatioFieldNumber = 26;
  double shortmarginratio() const;
  void set_shortmarginratio(double value);

  // optional string MaxMarginSideAlgorithm = 27;
  void clear_maxmarginsidealgorithm();
  static const int kMaxMarginSideAlgorithmFieldNumber = 27;
  const ::std::string& maxmarginsidealgorithm() const;
  void set_maxmarginsidealgorithm(const ::std::string& value);
  void set_maxmarginsidealgorithm(const char* value);
  void set_maxmarginsidealgorithm(const char* value, size_t size);
  ::std::string* mutable_maxmarginsidealgorithm();
  ::std::string* release_maxmarginsidealgorithm();
  void set_allocated_maxmarginsidealgorithm(::std::string* maxmarginsidealgorithm);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentname_;
  ::google::protobuf::int32 eof_;
  ::google::protobuf::int32 deliveryyear_;
  ::google::protobuf::internal::ArenaStringPtr exchangeinstid_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::internal::ArenaStringPtr productclass_;
  ::google::protobuf::int32 deliverymonth_;
  ::google::protobuf::int32 maxmarketordervolume_;
  ::google::protobuf::int32 minmarketordervolume_;
  ::google::protobuf::int32 maxlimitordervolume_;
  ::google::protobuf::int32 minlimitordervolume_;
  ::google::protobuf::int32 volumemultiple_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr opendate_;
  ::google::protobuf::internal::ArenaStringPtr expiredate_;
  ::google::protobuf::int32 pricetick_;
  ::google::protobuf::int32 istrading_;
  ::google::protobuf::internal::ArenaStringPtr startdelivdate_;
  ::google::protobuf::internal::ArenaStringPtr enddelivdate_;
  ::google::protobuf::internal::ArenaStringPtr instlifephase_;
  ::google::protobuf::internal::ArenaStringPtr positiontype_;
  ::google::protobuf::internal::ArenaStringPtr positiondatetype_;
  double longmarginratio_;
  double shortmarginratio_;
  ::google::protobuf::internal::ArenaStringPtr maxmarginsidealgorithm_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryRspInstrumentInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryReqOrder : public ::google::protobuf::Message {
 public:
  PBMsgQueryReqOrder();
  virtual ~PBMsgQueryReqOrder();

  PBMsgQueryReqOrder(const PBMsgQueryReqOrder& from);

  inline PBMsgQueryReqOrder& operator=(const PBMsgQueryReqOrder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryReqOrder& default_instance();

  void Swap(PBMsgQueryReqOrder* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryReqOrder* New() const { return New(NULL); }

  PBMsgQueryReqOrder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryReqOrder& from);
  void MergeFrom(const PBMsgQueryReqOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryReqOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string InstrumentID = 4;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 4;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string ExchangeID = 5;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 5;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string OrderSysID = 6;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 6;
  const ::std::string& ordersysid() const;
  void set_ordersysid(const ::std::string& value);
  void set_ordersysid(const char* value);
  void set_ordersysid(const char* value, size_t size);
  ::std::string* mutable_ordersysid();
  ::std::string* release_ordersysid();
  void set_allocated_ordersysid(::std::string* ordersysid);

  // optional string InsertTimeStart = 7;
  void clear_inserttimestart();
  static const int kInsertTimeStartFieldNumber = 7;
  const ::std::string& inserttimestart() const;
  void set_inserttimestart(const ::std::string& value);
  void set_inserttimestart(const char* value);
  void set_inserttimestart(const char* value, size_t size);
  ::std::string* mutable_inserttimestart();
  ::std::string* release_inserttimestart();
  void set_allocated_inserttimestart(::std::string* inserttimestart);

  // optional string InsertTimeEnd = 8;
  void clear_inserttimeend();
  static const int kInsertTimeEndFieldNumber = 8;
  const ::std::string& inserttimeend() const;
  void set_inserttimeend(const ::std::string& value);
  void set_inserttimeend(const char* value);
  void set_inserttimeend(const char* value, size_t size);
  ::std::string* mutable_inserttimeend();
  ::std::string* release_inserttimeend();
  void set_allocated_inserttimeend(::std::string* inserttimeend);

  // optional string TradingDay = 9;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 9;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional int32 SettlementID = 10;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 10;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryReqOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr inserttimestart_;
  ::google::protobuf::internal::ArenaStringPtr inserttimeend_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::int32 settlementid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryReqOrder* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryReqTrade : public ::google::protobuf::Message {
 public:
  PBMsgQueryReqTrade();
  virtual ~PBMsgQueryReqTrade();

  PBMsgQueryReqTrade(const PBMsgQueryReqTrade& from);

  inline PBMsgQueryReqTrade& operator=(const PBMsgQueryReqTrade& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryReqTrade& default_instance();

  void Swap(PBMsgQueryReqTrade* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryReqTrade* New() const { return New(NULL); }

  PBMsgQueryReqTrade* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryReqTrade& from);
  void MergeFrom(const PBMsgQueryReqTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryReqTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string InstrumentID = 4;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 4;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string ExchangeID = 5;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 5;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string TradeID = 6;
  void clear_tradeid();
  static const int kTradeIDFieldNumber = 6;
  const ::std::string& tradeid() const;
  void set_tradeid(const ::std::string& value);
  void set_tradeid(const char* value);
  void set_tradeid(const char* value, size_t size);
  ::std::string* mutable_tradeid();
  ::std::string* release_tradeid();
  void set_allocated_tradeid(::std::string* tradeid);

  // optional string TradeTimeStart = 7;
  void clear_tradetimestart();
  static const int kTradeTimeStartFieldNumber = 7;
  const ::std::string& tradetimestart() const;
  void set_tradetimestart(const ::std::string& value);
  void set_tradetimestart(const char* value);
  void set_tradetimestart(const char* value, size_t size);
  ::std::string* mutable_tradetimestart();
  ::std::string* release_tradetimestart();
  void set_allocated_tradetimestart(::std::string* tradetimestart);

  // optional string TradeTimeEnd = 8;
  void clear_tradetimeend();
  static const int kTradeTimeEndFieldNumber = 8;
  const ::std::string& tradetimeend() const;
  void set_tradetimeend(const ::std::string& value);
  void set_tradetimeend(const char* value);
  void set_tradetimeend(const char* value, size_t size);
  ::std::string* mutable_tradetimeend();
  ::std::string* release_tradetimeend();
  void set_allocated_tradetimeend(::std::string* tradetimeend);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryReqTrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr tradeid_;
  ::google::protobuf::internal::ArenaStringPtr tradetimestart_;
  ::google::protobuf::internal::ArenaStringPtr tradetimeend_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryReqTrade* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryReqPosition : public ::google::protobuf::Message {
 public:
  PBMsgQueryReqPosition();
  virtual ~PBMsgQueryReqPosition();

  PBMsgQueryReqPosition(const PBMsgQueryReqPosition& from);

  inline PBMsgQueryReqPosition& operator=(const PBMsgQueryReqPosition& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryReqPosition& default_instance();

  void Swap(PBMsgQueryReqPosition* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryReqPosition* New() const { return New(NULL); }

  PBMsgQueryReqPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryReqPosition& from);
  void MergeFrom(const PBMsgQueryReqPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryReqPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string InstrumentID = 4;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 4;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryReqPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryReqPosition* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryRspPosition : public ::google::protobuf::Message {
 public:
  PBMsgQueryRspPosition();
  virtual ~PBMsgQueryRspPosition();

  PBMsgQueryRspPosition(const PBMsgQueryRspPosition& from);

  inline PBMsgQueryRspPosition& operator=(const PBMsgQueryRspPosition& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryRspPosition& default_instance();

  void Swap(PBMsgQueryRspPosition* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryRspPosition* New() const { return New(NULL); }

  PBMsgQueryRspPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryRspPosition& from);
  void MergeFrom(const PBMsgQueryRspPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryRspPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EOF = 1;
  void clear_eof();
  static const int kEOFFieldNumber = 1;
  ::google::protobuf::int32 eof() const;
  void set_eof(::google::protobuf::int32 value);

  // optional string InstrumentID = 2;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 2;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string BrokerID = 3;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 3;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 4;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 4;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string PosiDirection = 5;
  void clear_posidirection();
  static const int kPosiDirectionFieldNumber = 5;
  const ::std::string& posidirection() const;
  void set_posidirection(const ::std::string& value);
  void set_posidirection(const char* value);
  void set_posidirection(const char* value, size_t size);
  ::std::string* mutable_posidirection();
  ::std::string* release_posidirection();
  void set_allocated_posidirection(::std::string* posidirection);

  // optional string HedgeFlag = 6;
  void clear_hedgeflag();
  static const int kHedgeFlagFieldNumber = 6;
  const ::std::string& hedgeflag() const;
  void set_hedgeflag(const ::std::string& value);
  void set_hedgeflag(const char* value);
  void set_hedgeflag(const char* value, size_t size);
  ::std::string* mutable_hedgeflag();
  ::std::string* release_hedgeflag();
  void set_allocated_hedgeflag(::std::string* hedgeflag);

  // optional string PositionDate = 7;
  void clear_positiondate();
  static const int kPositionDateFieldNumber = 7;
  const ::std::string& positiondate() const;
  void set_positiondate(const ::std::string& value);
  void set_positiondate(const char* value);
  void set_positiondate(const char* value, size_t size);
  ::std::string* mutable_positiondate();
  ::std::string* release_positiondate();
  void set_allocated_positiondate(::std::string* positiondate);

  // optional int32 YdPosition = 8;
  void clear_ydposition();
  static const int kYdPositionFieldNumber = 8;
  ::google::protobuf::int32 ydposition() const;
  void set_ydposition(::google::protobuf::int32 value);

  // optional int32 Position = 9;
  void clear_position();
  static const int kPositionFieldNumber = 9;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // optional int32 LongFrozen = 10;
  void clear_longfrozen();
  static const int kLongFrozenFieldNumber = 10;
  ::google::protobuf::int32 longfrozen() const;
  void set_longfrozen(::google::protobuf::int32 value);

  // optional int32 ShortFrozen = 11;
  void clear_shortfrozen();
  static const int kShortFrozenFieldNumber = 11;
  ::google::protobuf::int32 shortfrozen() const;
  void set_shortfrozen(::google::protobuf::int32 value);

  // optional double LongFrozenAmount = 12;
  void clear_longfrozenamount();
  static const int kLongFrozenAmountFieldNumber = 12;
  double longfrozenamount() const;
  void set_longfrozenamount(double value);

  // optional double ShortFrozenAmount = 13;
  void clear_shortfrozenamount();
  static const int kShortFrozenAmountFieldNumber = 13;
  double shortfrozenamount() const;
  void set_shortfrozenamount(double value);

  // optional int32 OpenVolume = 14;
  void clear_openvolume();
  static const int kOpenVolumeFieldNumber = 14;
  ::google::protobuf::int32 openvolume() const;
  void set_openvolume(::google::protobuf::int32 value);

  // optional int32 CloseVolume = 15;
  void clear_closevolume();
  static const int kCloseVolumeFieldNumber = 15;
  ::google::protobuf::int32 closevolume() const;
  void set_closevolume(::google::protobuf::int32 value);

  // optional double OpenAmount = 16;
  void clear_openamount();
  static const int kOpenAmountFieldNumber = 16;
  double openamount() const;
  void set_openamount(double value);

  // optional double CloseAmount = 17;
  void clear_closeamount();
  static const int kCloseAmountFieldNumber = 17;
  double closeamount() const;
  void set_closeamount(double value);

  // optional double PositionCost = 18;
  void clear_positioncost();
  static const int kPositionCostFieldNumber = 18;
  double positioncost() const;
  void set_positioncost(double value);

  // optional double PreMargin = 19;
  void clear_premargin();
  static const int kPreMarginFieldNumber = 19;
  double premargin() const;
  void set_premargin(double value);

  // optional double UseMargin = 20;
  void clear_usemargin();
  static const int kUseMarginFieldNumber = 20;
  double usemargin() const;
  void set_usemargin(double value);

  // optional double FrozenMargin = 21;
  void clear_frozenmargin();
  static const int kFrozenMarginFieldNumber = 21;
  double frozenmargin() const;
  void set_frozenmargin(double value);

  // optional double FrozenCash = 22;
  void clear_frozencash();
  static const int kFrozenCashFieldNumber = 22;
  double frozencash() const;
  void set_frozencash(double value);

  // optional double FrozenCommission = 23;
  void clear_frozencommission();
  static const int kFrozenCommissionFieldNumber = 23;
  double frozencommission() const;
  void set_frozencommission(double value);

  // optional double CashIn = 24;
  void clear_cashin();
  static const int kCashInFieldNumber = 24;
  double cashin() const;
  void set_cashin(double value);

  // optional double Commission = 25;
  void clear_commission();
  static const int kCommissionFieldNumber = 25;
  double commission() const;
  void set_commission(double value);

  // optional double CloseProfit = 26;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 26;
  double closeprofit() const;
  void set_closeprofit(double value);

  // optional double PositionProfit = 27;
  void clear_positionprofit();
  static const int kPositionProfitFieldNumber = 27;
  double positionprofit() const;
  void set_positionprofit(double value);

  // optional double PreSettlementPrice = 28;
  void clear_presettlementprice();
  static const int kPreSettlementPriceFieldNumber = 28;
  double presettlementprice() const;
  void set_presettlementprice(double value);

  // optional double SettlementPrice = 29;
  void clear_settlementprice();
  static const int kSettlementPriceFieldNumber = 29;
  double settlementprice() const;
  void set_settlementprice(double value);

  // optional string TradingDay = 30;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 30;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional int32 SettlementID = 31;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 31;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // optional double OpenCost = 32;
  void clear_opencost();
  static const int kOpenCostFieldNumber = 32;
  double opencost() const;
  void set_opencost(double value);

  // optional double ExchangeMargin = 33;
  void clear_exchangemargin();
  static const int kExchangeMarginFieldNumber = 33;
  double exchangemargin() const;
  void set_exchangemargin(double value);

  // optional int32 CombPosition = 34;
  void clear_combposition();
  static const int kCombPositionFieldNumber = 34;
  ::google::protobuf::int32 combposition() const;
  void set_combposition(::google::protobuf::int32 value);

  // optional int32 CombLongFrozen = 35;
  void clear_comblongfrozen();
  static const int kCombLongFrozenFieldNumber = 35;
  ::google::protobuf::int32 comblongfrozen() const;
  void set_comblongfrozen(::google::protobuf::int32 value);

  // optional int32 CombShortFrozen = 36;
  void clear_combshortfrozen();
  static const int kCombShortFrozenFieldNumber = 36;
  ::google::protobuf::int32 combshortfrozen() const;
  void set_combshortfrozen(::google::protobuf::int32 value);

  // optional double CloseProfitByDate = 37;
  void clear_closeprofitbydate();
  static const int kCloseProfitByDateFieldNumber = 37;
  double closeprofitbydate() const;
  void set_closeprofitbydate(double value);

  // optional double CloseProfitByTrade = 38;
  void clear_closeprofitbytrade();
  static const int kCloseProfitByTradeFieldNumber = 38;
  double closeprofitbytrade() const;
  void set_closeprofitbytrade(double value);

  // optional int32 TodayPosition = 39;
  void clear_todayposition();
  static const int kTodayPositionFieldNumber = 39;
  ::google::protobuf::int32 todayposition() const;
  void set_todayposition(::google::protobuf::int32 value);

  // optional double MarginRateByMoney = 40;
  void clear_marginratebymoney();
  static const int kMarginRateByMoneyFieldNumber = 40;
  double marginratebymoney() const;
  void set_marginratebymoney(double value);

  // optional double MarginRateByVolume = 41;
  void clear_marginratebyvolume();
  static const int kMarginRateByVolumeFieldNumber = 41;
  double marginratebyvolume() const;
  void set_marginratebyvolume(double value);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryRspPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::int32 eof_;
  ::google::protobuf::int32 ydposition_;
  ::google::protobuf::internal::ArenaStringPtr posidirection_;
  ::google::protobuf::internal::ArenaStringPtr hedgeflag_;
  ::google::protobuf::internal::ArenaStringPtr positiondate_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 longfrozen_;
  double longfrozenamount_;
  ::google::protobuf::int32 shortfrozen_;
  ::google::protobuf::int32 openvolume_;
  double shortfrozenamount_;
  double openamount_;
  double closeamount_;
  double positioncost_;
  double premargin_;
  double usemargin_;
  double frozenmargin_;
  double frozencash_;
  double frozencommission_;
  ::google::protobuf::int32 closevolume_;
  ::google::protobuf::int32 settlementid_;
  double cashin_;
  double commission_;
  double closeprofit_;
  double positionprofit_;
  double presettlementprice_;
  double settlementprice_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  double opencost_;
  double exchangemargin_;
  ::google::protobuf::int32 combposition_;
  ::google::protobuf::int32 comblongfrozen_;
  double closeprofitbydate_;
  ::google::protobuf::int32 combshortfrozen_;
  ::google::protobuf::int32 todayposition_;
  double closeprofitbytrade_;
  double marginratebymoney_;
  double marginratebyvolume_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryRspPosition* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryReqFund : public ::google::protobuf::Message {
 public:
  PBMsgQueryReqFund();
  virtual ~PBMsgQueryReqFund();

  PBMsgQueryReqFund(const PBMsgQueryReqFund& from);

  inline PBMsgQueryReqFund& operator=(const PBMsgQueryReqFund& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryReqFund& default_instance();

  void Swap(PBMsgQueryReqFund* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryReqFund* New() const { return New(NULL); }

  PBMsgQueryReqFund* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryReqFund& from);
  void MergeFrom(const PBMsgQueryReqFund& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryReqFund* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryReqFund)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryReqFund* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgQueryRspFund : public ::google::protobuf::Message {
 public:
  PBMsgQueryRspFund();
  virtual ~PBMsgQueryRspFund();

  PBMsgQueryRspFund(const PBMsgQueryRspFund& from);

  inline PBMsgQueryRspFund& operator=(const PBMsgQueryRspFund& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgQueryRspFund& default_instance();

  void Swap(PBMsgQueryRspFund* other);

  // implements Message ----------------------------------------------

  inline PBMsgQueryRspFund* New() const { return New(NULL); }

  PBMsgQueryRspFund* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgQueryRspFund& from);
  void MergeFrom(const PBMsgQueryRspFund& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgQueryRspFund* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EOF = 1;
  void clear_eof();
  static const int kEOFFieldNumber = 1;
  ::google::protobuf::int32 eof() const;
  void set_eof(::google::protobuf::int32 value);

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string AccountID = 3;
  void clear_accountid();
  static const int kAccountIDFieldNumber = 3;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // optional double PreMortgage = 4;
  void clear_premortgage();
  static const int kPreMortgageFieldNumber = 4;
  double premortgage() const;
  void set_premortgage(double value);

  // optional double PreCredit = 5;
  void clear_precredit();
  static const int kPreCreditFieldNumber = 5;
  double precredit() const;
  void set_precredit(double value);

  // optional double PreDeposit = 6;
  void clear_predeposit();
  static const int kPreDepositFieldNumber = 6;
  double predeposit() const;
  void set_predeposit(double value);

  // optional double PreBalance = 7;
  void clear_prebalance();
  static const int kPreBalanceFieldNumber = 7;
  double prebalance() const;
  void set_prebalance(double value);

  // optional double PreMargin = 8;
  void clear_premargin();
  static const int kPreMarginFieldNumber = 8;
  double premargin() const;
  void set_premargin(double value);

  // optional double InterestBase = 9;
  void clear_interestbase();
  static const int kInterestBaseFieldNumber = 9;
  double interestbase() const;
  void set_interestbase(double value);

  // optional double Interest = 10;
  void clear_interest();
  static const int kInterestFieldNumber = 10;
  double interest() const;
  void set_interest(double value);

  // optional double Deposit = 11;
  void clear_deposit();
  static const int kDepositFieldNumber = 11;
  double deposit() const;
  void set_deposit(double value);

  // optional double Withdraw = 12;
  void clear_withdraw();
  static const int kWithdrawFieldNumber = 12;
  double withdraw() const;
  void set_withdraw(double value);

  // optional double FrozenMargin = 13;
  void clear_frozenmargin();
  static const int kFrozenMarginFieldNumber = 13;
  double frozenmargin() const;
  void set_frozenmargin(double value);

  // optional double FrozenCash = 14;
  void clear_frozencash();
  static const int kFrozenCashFieldNumber = 14;
  double frozencash() const;
  void set_frozencash(double value);

  // optional double FrozenCommission = 15;
  void clear_frozencommission();
  static const int kFrozenCommissionFieldNumber = 15;
  double frozencommission() const;
  void set_frozencommission(double value);

  // optional double CurrMargin = 16;
  void clear_currmargin();
  static const int kCurrMarginFieldNumber = 16;
  double currmargin() const;
  void set_currmargin(double value);

  // optional double CashIn = 17;
  void clear_cashin();
  static const int kCashInFieldNumber = 17;
  double cashin() const;
  void set_cashin(double value);

  // optional double Commission = 18;
  void clear_commission();
  static const int kCommissionFieldNumber = 18;
  double commission() const;
  void set_commission(double value);

  // optional double CloseProfit = 19;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 19;
  double closeprofit() const;
  void set_closeprofit(double value);

  // optional double PositionProfit = 20;
  void clear_positionprofit();
  static const int kPositionProfitFieldNumber = 20;
  double positionprofit() const;
  void set_positionprofit(double value);

  // optional double Balance = 21;
  void clear_balance();
  static const int kBalanceFieldNumber = 21;
  double balance() const;
  void set_balance(double value);

  // optional double Available = 22;
  void clear_available();
  static const int kAvailableFieldNumber = 22;
  double available() const;
  void set_available(double value);

  // optional double WithdrawQuota = 23;
  void clear_withdrawquota();
  static const int kWithdrawQuotaFieldNumber = 23;
  double withdrawquota() const;
  void set_withdrawquota(double value);

  // optional double Reserve = 24;
  void clear_reserve();
  static const int kReserveFieldNumber = 24;
  double reserve() const;
  void set_reserve(double value);

  // optional string TradingDay = 25;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 25;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional int32 SettlementID = 26;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 26;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // optional double Credit = 27;
  void clear_credit();
  static const int kCreditFieldNumber = 27;
  double credit() const;
  void set_credit(double value);

  // optional double Mortgage = 28;
  void clear_mortgage();
  static const int kMortgageFieldNumber = 28;
  double mortgage() const;
  void set_mortgage(double value);

  // optional double ExchangeMargin = 29;
  void clear_exchangemargin();
  static const int kExchangeMarginFieldNumber = 29;
  double exchangemargin() const;
  void set_exchangemargin(double value);

  // optional double DeliveryMargin = 30;
  void clear_deliverymargin();
  static const int kDeliveryMarginFieldNumber = 30;
  double deliverymargin() const;
  void set_deliverymargin(double value);

  // optional double ExchangeDeliveryMargin = 31;
  void clear_exchangedeliverymargin();
  static const int kExchangeDeliveryMarginFieldNumber = 31;
  double exchangedeliverymargin() const;
  void set_exchangedeliverymargin(double value);

  // optional double ReserveBalance = 32;
  void clear_reservebalance();
  static const int kReserveBalanceFieldNumber = 32;
  double reservebalance() const;
  void set_reservebalance(double value);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgQueryRspFund)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  double premortgage_;
  double precredit_;
  double predeposit_;
  double prebalance_;
  double premargin_;
  double interestbase_;
  double interest_;
  double deposit_;
  double withdraw_;
  double frozenmargin_;
  ::google::protobuf::int32 eof_;
  ::google::protobuf::int32 settlementid_;
  double frozencash_;
  double frozencommission_;
  double currmargin_;
  double cashin_;
  double commission_;
  double closeprofit_;
  double positionprofit_;
  double balance_;
  double available_;
  double withdrawquota_;
  double reserve_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  double credit_;
  double mortgage_;
  double exchangemargin_;
  double deliverymargin_;
  double exchangedeliverymargin_;
  double reservebalance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgQueryRspFund* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgOrderInsert : public ::google::protobuf::Message {
 public:
  PBMsgOrderInsert();
  virtual ~PBMsgOrderInsert();

  PBMsgOrderInsert(const PBMsgOrderInsert& from);

  inline PBMsgOrderInsert& operator=(const PBMsgOrderInsert& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgOrderInsert& default_instance();

  void Swap(PBMsgOrderInsert* other);

  // implements Message ----------------------------------------------

  inline PBMsgOrderInsert* New() const { return New(NULL); }

  PBMsgOrderInsert* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgOrderInsert& from);
  void MergeFrom(const PBMsgOrderInsert& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgOrderInsert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string InstrumentID = 4;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 4;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string OrderRef = 5;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 5;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // optional string UserID = 6;
  void clear_userid();
  static const int kUserIDFieldNumber = 6;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string OrderPriceType = 7;
  void clear_orderpricetype();
  static const int kOrderPriceTypeFieldNumber = 7;
  const ::std::string& orderpricetype() const;
  void set_orderpricetype(const ::std::string& value);
  void set_orderpricetype(const char* value);
  void set_orderpricetype(const char* value, size_t size);
  ::std::string* mutable_orderpricetype();
  ::std::string* release_orderpricetype();
  void set_allocated_orderpricetype(::std::string* orderpricetype);

  // optional string Direction = 8;
  void clear_direction();
  static const int kDirectionFieldNumber = 8;
  const ::std::string& direction() const;
  void set_direction(const ::std::string& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  ::std::string* mutable_direction();
  ::std::string* release_direction();
  void set_allocated_direction(::std::string* direction);

  // optional string CombOffsetFlag = 9;
  void clear_comboffsetflag();
  static const int kCombOffsetFlagFieldNumber = 9;
  const ::std::string& comboffsetflag() const;
  void set_comboffsetflag(const ::std::string& value);
  void set_comboffsetflag(const char* value);
  void set_comboffsetflag(const char* value, size_t size);
  ::std::string* mutable_comboffsetflag();
  ::std::string* release_comboffsetflag();
  void set_allocated_comboffsetflag(::std::string* comboffsetflag);

  // optional string CombHedgeFlag = 10;
  void clear_combhedgeflag();
  static const int kCombHedgeFlagFieldNumber = 10;
  const ::std::string& combhedgeflag() const;
  void set_combhedgeflag(const ::std::string& value);
  void set_combhedgeflag(const char* value);
  void set_combhedgeflag(const char* value, size_t size);
  ::std::string* mutable_combhedgeflag();
  ::std::string* release_combhedgeflag();
  void set_allocated_combhedgeflag(::std::string* combhedgeflag);

  // optional double LimitPrice = 11;
  void clear_limitprice();
  static const int kLimitPriceFieldNumber = 11;
  double limitprice() const;
  void set_limitprice(double value);

  // optional int32 VolumeTotalOriginal = 12;
  void clear_volumetotaloriginal();
  static const int kVolumeTotalOriginalFieldNumber = 12;
  ::google::protobuf::int32 volumetotaloriginal() const;
  void set_volumetotaloriginal(::google::protobuf::int32 value);

  // optional string TimeCondition = 13;
  void clear_timecondition();
  static const int kTimeConditionFieldNumber = 13;
  const ::std::string& timecondition() const;
  void set_timecondition(const ::std::string& value);
  void set_timecondition(const char* value);
  void set_timecondition(const char* value, size_t size);
  ::std::string* mutable_timecondition();
  ::std::string* release_timecondition();
  void set_allocated_timecondition(::std::string* timecondition);

  // optional string GTDDate = 14;
  void clear_gtddate();
  static const int kGTDDateFieldNumber = 14;
  const ::std::string& gtddate() const;
  void set_gtddate(const ::std::string& value);
  void set_gtddate(const char* value);
  void set_gtddate(const char* value, size_t size);
  ::std::string* mutable_gtddate();
  ::std::string* release_gtddate();
  void set_allocated_gtddate(::std::string* gtddate);

  // optional string VolumeCondition = 15;
  void clear_volumecondition();
  static const int kVolumeConditionFieldNumber = 15;
  const ::std::string& volumecondition() const;
  void set_volumecondition(const ::std::string& value);
  void set_volumecondition(const char* value);
  void set_volumecondition(const char* value, size_t size);
  ::std::string* mutable_volumecondition();
  ::std::string* release_volumecondition();
  void set_allocated_volumecondition(::std::string* volumecondition);

  // optional int32 MinVolume = 16;
  void clear_minvolume();
  static const int kMinVolumeFieldNumber = 16;
  ::google::protobuf::int32 minvolume() const;
  void set_minvolume(::google::protobuf::int32 value);

  // optional string ContingentCondition = 17;
  void clear_contingentcondition();
  static const int kContingentConditionFieldNumber = 17;
  const ::std::string& contingentcondition() const;
  void set_contingentcondition(const ::std::string& value);
  void set_contingentcondition(const char* value);
  void set_contingentcondition(const char* value, size_t size);
  ::std::string* mutable_contingentcondition();
  ::std::string* release_contingentcondition();
  void set_allocated_contingentcondition(::std::string* contingentcondition);

  // optional double StopPrice = 18;
  void clear_stopprice();
  static const int kStopPriceFieldNumber = 18;
  double stopprice() const;
  void set_stopprice(double value);

  // optional string ForceCloseReason = 19;
  void clear_forceclosereason();
  static const int kForceCloseReasonFieldNumber = 19;
  const ::std::string& forceclosereason() const;
  void set_forceclosereason(const ::std::string& value);
  void set_forceclosereason(const char* value);
  void set_forceclosereason(const char* value, size_t size);
  ::std::string* mutable_forceclosereason();
  ::std::string* release_forceclosereason();
  void set_allocated_forceclosereason(::std::string* forceclosereason);

  // optional int32 IsAutoSuspend = 20;
  void clear_isautosuspend();
  static const int kIsAutoSuspendFieldNumber = 20;
  ::google::protobuf::int32 isautosuspend() const;
  void set_isautosuspend(::google::protobuf::int32 value);

  // optional string BusinessUnit = 21;
  void clear_businessunit();
  static const int kBusinessUnitFieldNumber = 21;
  const ::std::string& businessunit() const;
  void set_businessunit(const ::std::string& value);
  void set_businessunit(const char* value);
  void set_businessunit(const char* value, size_t size);
  ::std::string* mutable_businessunit();
  ::std::string* release_businessunit();
  void set_allocated_businessunit(::std::string* businessunit);

  // optional int32 RequestID = 22;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 22;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // optional int32 UserForceClose = 23;
  void clear_userforceclose();
  static const int kUserForceCloseFieldNumber = 23;
  ::google::protobuf::int32 userforceclose() const;
  void set_userforceclose(::google::protobuf::int32 value);

  // optional int32 IsSwapOrder = 24;
  void clear_isswaporder();
  static const int kIsSwapOrderFieldNumber = 24;
  ::google::protobuf::int32 isswaporder() const;
  void set_isswaporder(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgOrderInsert)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr orderpricetype_;
  ::google::protobuf::internal::ArenaStringPtr direction_;
  ::google::protobuf::internal::ArenaStringPtr comboffsetflag_;
  ::google::protobuf::internal::ArenaStringPtr combhedgeflag_;
  double limitprice_;
  ::google::protobuf::internal::ArenaStringPtr timecondition_;
  ::google::protobuf::internal::ArenaStringPtr gtddate_;
  ::google::protobuf::int32 volumetotaloriginal_;
  ::google::protobuf::int32 minvolume_;
  ::google::protobuf::internal::ArenaStringPtr volumecondition_;
  ::google::protobuf::internal::ArenaStringPtr contingentcondition_;
  double stopprice_;
  ::google::protobuf::internal::ArenaStringPtr forceclosereason_;
  ::google::protobuf::internal::ArenaStringPtr businessunit_;
  ::google::protobuf::int32 isautosuspend_;
  ::google::protobuf::int32 requestid_;
  ::google::protobuf::int32 userforceclose_;
  ::google::protobuf::int32 isswaporder_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgOrderInsert* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgOrderAction : public ::google::protobuf::Message {
 public:
  PBMsgOrderAction();
  virtual ~PBMsgOrderAction();

  PBMsgOrderAction(const PBMsgOrderAction& from);

  inline PBMsgOrderAction& operator=(const PBMsgOrderAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgOrderAction& default_instance();

  void Swap(PBMsgOrderAction* other);

  // implements Message ----------------------------------------------

  inline PBMsgOrderAction* New() const { return New(NULL); }

  PBMsgOrderAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgOrderAction& from);
  void MergeFrom(const PBMsgOrderAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgOrderAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional int32 OrderActionRef = 4;
  void clear_orderactionref();
  static const int kOrderActionRefFieldNumber = 4;
  ::google::protobuf::int32 orderactionref() const;
  void set_orderactionref(::google::protobuf::int32 value);

  // optional string OrderRef = 5;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 5;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // optional int32 RequestID = 6;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 6;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // optional int32 FrontID = 7;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 7;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // optional int32 SessionID = 8;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 8;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // optional string ExchangeID = 9;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 9;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string OrderSysID = 10;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 10;
  const ::std::string& ordersysid() const;
  void set_ordersysid(const ::std::string& value);
  void set_ordersysid(const char* value);
  void set_ordersysid(const char* value, size_t size);
  ::std::string* mutable_ordersysid();
  ::std::string* release_ordersysid();
  void set_allocated_ordersysid(::std::string* ordersysid);

  // optional string ActionFlag = 11;
  void clear_actionflag();
  static const int kActionFlagFieldNumber = 11;
  const ::std::string& actionflag() const;
  void set_actionflag(const ::std::string& value);
  void set_actionflag(const char* value);
  void set_actionflag(const char* value, size_t size);
  ::std::string* mutable_actionflag();
  ::std::string* release_actionflag();
  void set_allocated_actionflag(::std::string* actionflag);

  // optional double LimitPrice = 12;
  void clear_limitprice();
  static const int kLimitPriceFieldNumber = 12;
  double limitprice() const;
  void set_limitprice(double value);

  // optional int32 VolumeChange = 13;
  void clear_volumechange();
  static const int kVolumeChangeFieldNumber = 13;
  ::google::protobuf::int32 volumechange() const;
  void set_volumechange(::google::protobuf::int32 value);

  // optional string ActionDate = 14;
  void clear_actiondate();
  static const int kActionDateFieldNumber = 14;
  const ::std::string& actiondate() const;
  void set_actiondate(const ::std::string& value);
  void set_actiondate(const char* value);
  void set_actiondate(const char* value, size_t size);
  ::std::string* mutable_actiondate();
  ::std::string* release_actiondate();
  void set_allocated_actiondate(::std::string* actiondate);

  // optional string ActionTime = 15;
  void clear_actiontime();
  static const int kActionTimeFieldNumber = 15;
  const ::std::string& actiontime() const;
  void set_actiontime(const ::std::string& value);
  void set_actiontime(const char* value);
  void set_actiontime(const char* value, size_t size);
  ::std::string* mutable_actiontime();
  ::std::string* release_actiontime();
  void set_allocated_actiontime(::std::string* actiontime);

  // optional string TraderID = 16;
  void clear_traderid();
  static const int kTraderIDFieldNumber = 16;
  const ::std::string& traderid() const;
  void set_traderid(const ::std::string& value);
  void set_traderid(const char* value);
  void set_traderid(const char* value, size_t size);
  ::std::string* mutable_traderid();
  ::std::string* release_traderid();
  void set_allocated_traderid(::std::string* traderid);

  // optional int32 InstallID = 17;
  void clear_installid();
  static const int kInstallIDFieldNumber = 17;
  ::google::protobuf::int32 installid() const;
  void set_installid(::google::protobuf::int32 value);

  // optional string OrderLocalID = 18;
  void clear_orderlocalid();
  static const int kOrderLocalIDFieldNumber = 18;
  const ::std::string& orderlocalid() const;
  void set_orderlocalid(const ::std::string& value);
  void set_orderlocalid(const char* value);
  void set_orderlocalid(const char* value, size_t size);
  ::std::string* mutable_orderlocalid();
  ::std::string* release_orderlocalid();
  void set_allocated_orderlocalid(::std::string* orderlocalid);

  // optional string ActionLocalID = 19;
  void clear_actionlocalid();
  static const int kActionLocalIDFieldNumber = 19;
  const ::std::string& actionlocalid() const;
  void set_actionlocalid(const ::std::string& value);
  void set_actionlocalid(const char* value);
  void set_actionlocalid(const char* value, size_t size);
  ::std::string* mutable_actionlocalid();
  ::std::string* release_actionlocalid();
  void set_allocated_actionlocalid(::std::string* actionlocalid);

  // optional string ParticipantID = 20;
  void clear_participantid();
  static const int kParticipantIDFieldNumber = 20;
  const ::std::string& participantid() const;
  void set_participantid(const ::std::string& value);
  void set_participantid(const char* value);
  void set_participantid(const char* value, size_t size);
  ::std::string* mutable_participantid();
  ::std::string* release_participantid();
  void set_allocated_participantid(::std::string* participantid);

  // optional string ClientID = 21;
  void clear_clientid();
  static const int kClientIDFieldNumber = 21;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string BusinessUnit = 22;
  void clear_businessunit();
  static const int kBusinessUnitFieldNumber = 22;
  const ::std::string& businessunit() const;
  void set_businessunit(const ::std::string& value);
  void set_businessunit(const char* value);
  void set_businessunit(const char* value, size_t size);
  ::std::string* mutable_businessunit();
  ::std::string* release_businessunit();
  void set_allocated_businessunit(::std::string* businessunit);

  // optional string OrderActionStatus = 23;
  void clear_orderactionstatus();
  static const int kOrderActionStatusFieldNumber = 23;
  const ::std::string& orderactionstatus() const;
  void set_orderactionstatus(const ::std::string& value);
  void set_orderactionstatus(const char* value);
  void set_orderactionstatus(const char* value, size_t size);
  ::std::string* mutable_orderactionstatus();
  ::std::string* release_orderactionstatus();
  void set_allocated_orderactionstatus(::std::string* orderactionstatus);

  // optional string UserID = 24;
  void clear_userid();
  static const int kUserIDFieldNumber = 24;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional bytes StatusMsg = 25;
  void clear_statusmsg();
  static const int kStatusMsgFieldNumber = 25;
  const ::std::string& statusmsg() const;
  void set_statusmsg(const ::std::string& value);
  void set_statusmsg(const char* value);
  void set_statusmsg(const void* value, size_t size);
  ::std::string* mutable_statusmsg();
  ::std::string* release_statusmsg();
  void set_allocated_statusmsg(::std::string* statusmsg);

  // optional string InstrumentID = 26;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 26;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgOrderAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::int32 orderactionref_;
  ::google::protobuf::int32 requestid_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 sessionid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr actionflag_;
  double limitprice_;
  ::google::protobuf::internal::ArenaStringPtr actiondate_;
  ::google::protobuf::internal::ArenaStringPtr actiontime_;
  ::google::protobuf::int32 volumechange_;
  ::google::protobuf::int32 installid_;
  ::google::protobuf::internal::ArenaStringPtr traderid_;
  ::google::protobuf::internal::ArenaStringPtr orderlocalid_;
  ::google::protobuf::internal::ArenaStringPtr actionlocalid_;
  ::google::protobuf::internal::ArenaStringPtr participantid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr businessunit_;
  ::google::protobuf::internal::ArenaStringPtr orderactionstatus_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr statusmsg_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgOrderAction* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgOrderRtn : public ::google::protobuf::Message {
 public:
  PBMsgOrderRtn();
  virtual ~PBMsgOrderRtn();

  PBMsgOrderRtn(const PBMsgOrderRtn& from);

  inline PBMsgOrderRtn& operator=(const PBMsgOrderRtn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgOrderRtn& default_instance();

  void Swap(PBMsgOrderRtn* other);

  // implements Message ----------------------------------------------

  inline PBMsgOrderRtn* New() const { return New(NULL); }

  PBMsgOrderRtn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgOrderRtn& from);
  void MergeFrom(const PBMsgOrderRtn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgOrderRtn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EOF = 1;
  void clear_eof();
  static const int kEOFFieldNumber = 1;
  ::google::protobuf::int32 eof() const;
  void set_eof(::google::protobuf::int32 value);

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string InstrumentID = 4;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 4;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string OrderRef = 5;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 5;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // optional string UserID = 6;
  void clear_userid();
  static const int kUserIDFieldNumber = 6;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string OrderPriceType = 7;
  void clear_orderpricetype();
  static const int kOrderPriceTypeFieldNumber = 7;
  const ::std::string& orderpricetype() const;
  void set_orderpricetype(const ::std::string& value);
  void set_orderpricetype(const char* value);
  void set_orderpricetype(const char* value, size_t size);
  ::std::string* mutable_orderpricetype();
  ::std::string* release_orderpricetype();
  void set_allocated_orderpricetype(::std::string* orderpricetype);

  // optional string Direction = 8;
  void clear_direction();
  static const int kDirectionFieldNumber = 8;
  const ::std::string& direction() const;
  void set_direction(const ::std::string& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  ::std::string* mutable_direction();
  ::std::string* release_direction();
  void set_allocated_direction(::std::string* direction);

  // optional string CombOffsetFlag = 9;
  void clear_comboffsetflag();
  static const int kCombOffsetFlagFieldNumber = 9;
  const ::std::string& comboffsetflag() const;
  void set_comboffsetflag(const ::std::string& value);
  void set_comboffsetflag(const char* value);
  void set_comboffsetflag(const char* value, size_t size);
  ::std::string* mutable_comboffsetflag();
  ::std::string* release_comboffsetflag();
  void set_allocated_comboffsetflag(::std::string* comboffsetflag);

  // optional string CombHedgeFlag = 10;
  void clear_combhedgeflag();
  static const int kCombHedgeFlagFieldNumber = 10;
  const ::std::string& combhedgeflag() const;
  void set_combhedgeflag(const ::std::string& value);
  void set_combhedgeflag(const char* value);
  void set_combhedgeflag(const char* value, size_t size);
  ::std::string* mutable_combhedgeflag();
  ::std::string* release_combhedgeflag();
  void set_allocated_combhedgeflag(::std::string* combhedgeflag);

  // optional double LimitPrice = 11;
  void clear_limitprice();
  static const int kLimitPriceFieldNumber = 11;
  double limitprice() const;
  void set_limitprice(double value);

  // optional int32 VolumeTotalOriginal = 12;
  void clear_volumetotaloriginal();
  static const int kVolumeTotalOriginalFieldNumber = 12;
  ::google::protobuf::int32 volumetotaloriginal() const;
  void set_volumetotaloriginal(::google::protobuf::int32 value);

  // optional string TimeCondition = 13;
  void clear_timecondition();
  static const int kTimeConditionFieldNumber = 13;
  const ::std::string& timecondition() const;
  void set_timecondition(const ::std::string& value);
  void set_timecondition(const char* value);
  void set_timecondition(const char* value, size_t size);
  ::std::string* mutable_timecondition();
  ::std::string* release_timecondition();
  void set_allocated_timecondition(::std::string* timecondition);

  // optional string GTDDate = 14;
  void clear_gtddate();
  static const int kGTDDateFieldNumber = 14;
  const ::std::string& gtddate() const;
  void set_gtddate(const ::std::string& value);
  void set_gtddate(const char* value);
  void set_gtddate(const char* value, size_t size);
  ::std::string* mutable_gtddate();
  ::std::string* release_gtddate();
  void set_allocated_gtddate(::std::string* gtddate);

  // optional string VolumeCondition = 15;
  void clear_volumecondition();
  static const int kVolumeConditionFieldNumber = 15;
  const ::std::string& volumecondition() const;
  void set_volumecondition(const ::std::string& value);
  void set_volumecondition(const char* value);
  void set_volumecondition(const char* value, size_t size);
  ::std::string* mutable_volumecondition();
  ::std::string* release_volumecondition();
  void set_allocated_volumecondition(::std::string* volumecondition);

  // optional int32 MinVolume = 16;
  void clear_minvolume();
  static const int kMinVolumeFieldNumber = 16;
  ::google::protobuf::int32 minvolume() const;
  void set_minvolume(::google::protobuf::int32 value);

  // optional string ContingentCondition = 17;
  void clear_contingentcondition();
  static const int kContingentConditionFieldNumber = 17;
  const ::std::string& contingentcondition() const;
  void set_contingentcondition(const ::std::string& value);
  void set_contingentcondition(const char* value);
  void set_contingentcondition(const char* value, size_t size);
  ::std::string* mutable_contingentcondition();
  ::std::string* release_contingentcondition();
  void set_allocated_contingentcondition(::std::string* contingentcondition);

  // optional double StopPrice = 18;
  void clear_stopprice();
  static const int kStopPriceFieldNumber = 18;
  double stopprice() const;
  void set_stopprice(double value);

  // optional string ForceCloseReason = 19;
  void clear_forceclosereason();
  static const int kForceCloseReasonFieldNumber = 19;
  const ::std::string& forceclosereason() const;
  void set_forceclosereason(const ::std::string& value);
  void set_forceclosereason(const char* value);
  void set_forceclosereason(const char* value, size_t size);
  ::std::string* mutable_forceclosereason();
  ::std::string* release_forceclosereason();
  void set_allocated_forceclosereason(::std::string* forceclosereason);

  // optional int32 IsAutoSuspend = 20;
  void clear_isautosuspend();
  static const int kIsAutoSuspendFieldNumber = 20;
  ::google::protobuf::int32 isautosuspend() const;
  void set_isautosuspend(::google::protobuf::int32 value);

  // optional string BusinessUnit = 21;
  void clear_businessunit();
  static const int kBusinessUnitFieldNumber = 21;
  const ::std::string& businessunit() const;
  void set_businessunit(const ::std::string& value);
  void set_businessunit(const char* value);
  void set_businessunit(const char* value, size_t size);
  ::std::string* mutable_businessunit();
  ::std::string* release_businessunit();
  void set_allocated_businessunit(::std::string* businessunit);

  // optional int32 RequestID = 22;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 22;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // optional string OrderLocalID = 23;
  void clear_orderlocalid();
  static const int kOrderLocalIDFieldNumber = 23;
  const ::std::string& orderlocalid() const;
  void set_orderlocalid(const ::std::string& value);
  void set_orderlocalid(const char* value);
  void set_orderlocalid(const char* value, size_t size);
  ::std::string* mutable_orderlocalid();
  ::std::string* release_orderlocalid();
  void set_allocated_orderlocalid(::std::string* orderlocalid);

  // optional string ExchangeID = 24;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 24;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string ParticipantID = 25;
  void clear_participantid();
  static const int kParticipantIDFieldNumber = 25;
  const ::std::string& participantid() const;
  void set_participantid(const ::std::string& value);
  void set_participantid(const char* value);
  void set_participantid(const char* value, size_t size);
  ::std::string* mutable_participantid();
  ::std::string* release_participantid();
  void set_allocated_participantid(::std::string* participantid);

  // optional string ClientID = 26;
  void clear_clientid();
  static const int kClientIDFieldNumber = 26;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string ExchangeInstID = 27;
  void clear_exchangeinstid();
  static const int kExchangeInstIDFieldNumber = 27;
  const ::std::string& exchangeinstid() const;
  void set_exchangeinstid(const ::std::string& value);
  void set_exchangeinstid(const char* value);
  void set_exchangeinstid(const char* value, size_t size);
  ::std::string* mutable_exchangeinstid();
  ::std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // optional string TraderID = 28;
  void clear_traderid();
  static const int kTraderIDFieldNumber = 28;
  const ::std::string& traderid() const;
  void set_traderid(const ::std::string& value);
  void set_traderid(const char* value);
  void set_traderid(const char* value, size_t size);
  ::std::string* mutable_traderid();
  ::std::string* release_traderid();
  void set_allocated_traderid(::std::string* traderid);

  // optional int32 InstallID = 29;
  void clear_installid();
  static const int kInstallIDFieldNumber = 29;
  ::google::protobuf::int32 installid() const;
  void set_installid(::google::protobuf::int32 value);

  // optional string OrderSubmitStatus = 30;
  void clear_ordersubmitstatus();
  static const int kOrderSubmitStatusFieldNumber = 30;
  const ::std::string& ordersubmitstatus() const;
  void set_ordersubmitstatus(const ::std::string& value);
  void set_ordersubmitstatus(const char* value);
  void set_ordersubmitstatus(const char* value, size_t size);
  ::std::string* mutable_ordersubmitstatus();
  ::std::string* release_ordersubmitstatus();
  void set_allocated_ordersubmitstatus(::std::string* ordersubmitstatus);

  // optional int32 NotifySequence = 31;
  void clear_notifysequence();
  static const int kNotifySequenceFieldNumber = 31;
  ::google::protobuf::int32 notifysequence() const;
  void set_notifysequence(::google::protobuf::int32 value);

  // optional string TradingDay = 32;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 32;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional int32 SettlementID = 33;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 33;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // optional string OrderSysID = 34;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 34;
  const ::std::string& ordersysid() const;
  void set_ordersysid(const ::std::string& value);
  void set_ordersysid(const char* value);
  void set_ordersysid(const char* value, size_t size);
  ::std::string* mutable_ordersysid();
  ::std::string* release_ordersysid();
  void set_allocated_ordersysid(::std::string* ordersysid);

  // optional string OrderSource = 35;
  void clear_ordersource();
  static const int kOrderSourceFieldNumber = 35;
  const ::std::string& ordersource() const;
  void set_ordersource(const ::std::string& value);
  void set_ordersource(const char* value);
  void set_ordersource(const char* value, size_t size);
  ::std::string* mutable_ordersource();
  ::std::string* release_ordersource();
  void set_allocated_ordersource(::std::string* ordersource);

  // optional string OrderStatus = 36;
  void clear_orderstatus();
  static const int kOrderStatusFieldNumber = 36;
  const ::std::string& orderstatus() const;
  void set_orderstatus(const ::std::string& value);
  void set_orderstatus(const char* value);
  void set_orderstatus(const char* value, size_t size);
  ::std::string* mutable_orderstatus();
  ::std::string* release_orderstatus();
  void set_allocated_orderstatus(::std::string* orderstatus);

  // optional string OrderType = 37;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 37;
  const ::std::string& ordertype() const;
  void set_ordertype(const ::std::string& value);
  void set_ordertype(const char* value);
  void set_ordertype(const char* value, size_t size);
  ::std::string* mutable_ordertype();
  ::std::string* release_ordertype();
  void set_allocated_ordertype(::std::string* ordertype);

  // optional int32 VolumeTraded = 38;
  void clear_volumetraded();
  static const int kVolumeTradedFieldNumber = 38;
  ::google::protobuf::int32 volumetraded() const;
  void set_volumetraded(::google::protobuf::int32 value);

  // optional int32 VolumeTotal = 39;
  void clear_volumetotal();
  static const int kVolumeTotalFieldNumber = 39;
  ::google::protobuf::int32 volumetotal() const;
  void set_volumetotal(::google::protobuf::int32 value);

  // optional string InsertDate = 40;
  void clear_insertdate();
  static const int kInsertDateFieldNumber = 40;
  const ::std::string& insertdate() const;
  void set_insertdate(const ::std::string& value);
  void set_insertdate(const char* value);
  void set_insertdate(const char* value, size_t size);
  ::std::string* mutable_insertdate();
  ::std::string* release_insertdate();
  void set_allocated_insertdate(::std::string* insertdate);

  // optional string InsertTime = 41;
  void clear_inserttime();
  static const int kInsertTimeFieldNumber = 41;
  const ::std::string& inserttime() const;
  void set_inserttime(const ::std::string& value);
  void set_inserttime(const char* value);
  void set_inserttime(const char* value, size_t size);
  ::std::string* mutable_inserttime();
  ::std::string* release_inserttime();
  void set_allocated_inserttime(::std::string* inserttime);

  // optional string ActiveTime = 42;
  void clear_activetime();
  static const int kActiveTimeFieldNumber = 42;
  const ::std::string& activetime() const;
  void set_activetime(const ::std::string& value);
  void set_activetime(const char* value);
  void set_activetime(const char* value, size_t size);
  ::std::string* mutable_activetime();
  ::std::string* release_activetime();
  void set_allocated_activetime(::std::string* activetime);

  // optional string SuspendTime = 43;
  void clear_suspendtime();
  static const int kSuspendTimeFieldNumber = 43;
  const ::std::string& suspendtime() const;
  void set_suspendtime(const ::std::string& value);
  void set_suspendtime(const char* value);
  void set_suspendtime(const char* value, size_t size);
  ::std::string* mutable_suspendtime();
  ::std::string* release_suspendtime();
  void set_allocated_suspendtime(::std::string* suspendtime);

  // optional string UpdateTime = 44;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 44;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // optional string CancelTime = 45;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 45;
  const ::std::string& canceltime() const;
  void set_canceltime(const ::std::string& value);
  void set_canceltime(const char* value);
  void set_canceltime(const char* value, size_t size);
  ::std::string* mutable_canceltime();
  ::std::string* release_canceltime();
  void set_allocated_canceltime(::std::string* canceltime);

  // optional string ActiveTraderID = 46;
  void clear_activetraderid();
  static const int kActiveTraderIDFieldNumber = 46;
  const ::std::string& activetraderid() const;
  void set_activetraderid(const ::std::string& value);
  void set_activetraderid(const char* value);
  void set_activetraderid(const char* value, size_t size);
  ::std::string* mutable_activetraderid();
  ::std::string* release_activetraderid();
  void set_allocated_activetraderid(::std::string* activetraderid);

  // optional string ClearingPartID = 47;
  void clear_clearingpartid();
  static const int kClearingPartIDFieldNumber = 47;
  const ::std::string& clearingpartid() const;
  void set_clearingpartid(const ::std::string& value);
  void set_clearingpartid(const char* value);
  void set_clearingpartid(const char* value, size_t size);
  ::std::string* mutable_clearingpartid();
  ::std::string* release_clearingpartid();
  void set_allocated_clearingpartid(::std::string* clearingpartid);

  // optional int32 SequenceNo = 48;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 48;
  ::google::protobuf::int32 sequenceno() const;
  void set_sequenceno(::google::protobuf::int32 value);

  // optional int32 FrontID = 49;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 49;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // optional int32 SessionID = 50;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 50;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // optional string UserProductInfo = 51;
  void clear_userproductinfo();
  static const int kUserProductInfoFieldNumber = 51;
  const ::std::string& userproductinfo() const;
  void set_userproductinfo(const ::std::string& value);
  void set_userproductinfo(const char* value);
  void set_userproductinfo(const char* value, size_t size);
  ::std::string* mutable_userproductinfo();
  ::std::string* release_userproductinfo();
  void set_allocated_userproductinfo(::std::string* userproductinfo);

  // optional bytes StatusMsg = 52;
  void clear_statusmsg();
  static const int kStatusMsgFieldNumber = 52;
  const ::std::string& statusmsg() const;
  void set_statusmsg(const ::std::string& value);
  void set_statusmsg(const char* value);
  void set_statusmsg(const void* value, size_t size);
  ::std::string* mutable_statusmsg();
  ::std::string* release_statusmsg();
  void set_allocated_statusmsg(::std::string* statusmsg);

  // optional int32 UserForceClose = 53;
  void clear_userforceclose();
  static const int kUserForceCloseFieldNumber = 53;
  ::google::protobuf::int32 userforceclose() const;
  void set_userforceclose(::google::protobuf::int32 value);

  // optional string ActiveUserID = 54;
  void clear_activeuserid();
  static const int kActiveUserIDFieldNumber = 54;
  const ::std::string& activeuserid() const;
  void set_activeuserid(const ::std::string& value);
  void set_activeuserid(const char* value);
  void set_activeuserid(const char* value, size_t size);
  ::std::string* mutable_activeuserid();
  ::std::string* release_activeuserid();
  void set_allocated_activeuserid(::std::string* activeuserid);

  // optional int32 BrokerOrderSeq = 55;
  void clear_brokerorderseq();
  static const int kBrokerOrderSeqFieldNumber = 55;
  ::google::protobuf::int32 brokerorderseq() const;
  void set_brokerorderseq(::google::protobuf::int32 value);

  // optional string RelativeOrderSysID = 56;
  void clear_relativeordersysid();
  static const int kRelativeOrderSysIDFieldNumber = 56;
  const ::std::string& relativeordersysid() const;
  void set_relativeordersysid(const ::std::string& value);
  void set_relativeordersysid(const char* value);
  void set_relativeordersysid(const char* value, size_t size);
  ::std::string* mutable_relativeordersysid();
  ::std::string* release_relativeordersysid();
  void set_allocated_relativeordersysid(::std::string* relativeordersysid);

  // optional int32 ZCETotalTradedVolume = 57;
  void clear_zcetotaltradedvolume();
  static const int kZCETotalTradedVolumeFieldNumber = 57;
  ::google::protobuf::int32 zcetotaltradedvolume() const;
  void set_zcetotaltradedvolume(::google::protobuf::int32 value);

  // optional int32 IsSwapOrder = 58;
  void clear_isswaporder();
  static const int kIsSwapOrderFieldNumber = 58;
  ::google::protobuf::int32 isswaporder() const;
  void set_isswaporder(::google::protobuf::int32 value);

  // optional int32 IOrderStatus = 59;
  void clear_iorderstatus();
  static const int kIOrderStatusFieldNumber = 59;
  ::google::protobuf::int32 iorderstatus() const;
  void set_iorderstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgOrderRtn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 eof_;
  ::google::protobuf::int32 volumetotaloriginal_;
  ::google::protobuf::internal::ArenaStringPtr orderpricetype_;
  ::google::protobuf::internal::ArenaStringPtr direction_;
  ::google::protobuf::internal::ArenaStringPtr comboffsetflag_;
  ::google::protobuf::internal::ArenaStringPtr combhedgeflag_;
  double limitprice_;
  ::google::protobuf::internal::ArenaStringPtr timecondition_;
  ::google::protobuf::internal::ArenaStringPtr gtddate_;
  ::google::protobuf::internal::ArenaStringPtr volumecondition_;
  ::google::protobuf::internal::ArenaStringPtr contingentcondition_;
  double stopprice_;
  ::google::protobuf::int32 minvolume_;
  ::google::protobuf::int32 isautosuspend_;
  ::google::protobuf::internal::ArenaStringPtr forceclosereason_;
  ::google::protobuf::internal::ArenaStringPtr businessunit_;
  ::google::protobuf::internal::ArenaStringPtr orderlocalid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr participantid_;
  ::google::protobuf::int32 requestid_;
  ::google::protobuf::int32 installid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeinstid_;
  ::google::protobuf::internal::ArenaStringPtr traderid_;
  ::google::protobuf::internal::ArenaStringPtr ordersubmitstatus_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::int32 notifysequence_;
  ::google::protobuf::int32 settlementid_;
  ::google::protobuf::internal::ArenaStringPtr ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr ordersource_;
  ::google::protobuf::internal::ArenaStringPtr orderstatus_;
  ::google::protobuf::internal::ArenaStringPtr ordertype_;
  ::google::protobuf::int32 volumetraded_;
  ::google::protobuf::int32 volumetotal_;
  ::google::protobuf::internal::ArenaStringPtr insertdate_;
  ::google::protobuf::internal::ArenaStringPtr inserttime_;
  ::google::protobuf::internal::ArenaStringPtr activetime_;
  ::google::protobuf::internal::ArenaStringPtr suspendtime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::internal::ArenaStringPtr canceltime_;
  ::google::protobuf::internal::ArenaStringPtr activetraderid_;
  ::google::protobuf::internal::ArenaStringPtr clearingpartid_;
  ::google::protobuf::int32 sequenceno_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::internal::ArenaStringPtr userproductinfo_;
  ::google::protobuf::int32 sessionid_;
  ::google::protobuf::int32 userforceclose_;
  ::google::protobuf::internal::ArenaStringPtr statusmsg_;
  ::google::protobuf::internal::ArenaStringPtr activeuserid_;
  ::google::protobuf::internal::ArenaStringPtr relativeordersysid_;
  ::google::protobuf::int32 brokerorderseq_;
  ::google::protobuf::int32 zcetotaltradedvolume_;
  ::google::protobuf::int32 isswaporder_;
  ::google::protobuf::int32 iorderstatus_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgOrderRtn* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgTradeRtn : public ::google::protobuf::Message {
 public:
  PBMsgTradeRtn();
  virtual ~PBMsgTradeRtn();

  PBMsgTradeRtn(const PBMsgTradeRtn& from);

  inline PBMsgTradeRtn& operator=(const PBMsgTradeRtn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgTradeRtn& default_instance();

  void Swap(PBMsgTradeRtn* other);

  // implements Message ----------------------------------------------

  inline PBMsgTradeRtn* New() const { return New(NULL); }

  PBMsgTradeRtn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgTradeRtn& from);
  void MergeFrom(const PBMsgTradeRtn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgTradeRtn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EOF = 1;
  void clear_eof();
  static const int kEOFFieldNumber = 1;
  ::google::protobuf::int32 eof() const;
  void set_eof(::google::protobuf::int32 value);

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string InstrumentID = 4;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 4;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string OrderRef = 5;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 5;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // optional string UserID = 6;
  void clear_userid();
  static const int kUserIDFieldNumber = 6;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string ExchangeID = 7;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 7;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string TradeID = 8;
  void clear_tradeid();
  static const int kTradeIDFieldNumber = 8;
  const ::std::string& tradeid() const;
  void set_tradeid(const ::std::string& value);
  void set_tradeid(const char* value);
  void set_tradeid(const char* value, size_t size);
  ::std::string* mutable_tradeid();
  ::std::string* release_tradeid();
  void set_allocated_tradeid(::std::string* tradeid);

  // optional string Direction = 9;
  void clear_direction();
  static const int kDirectionFieldNumber = 9;
  const ::std::string& direction() const;
  void set_direction(const ::std::string& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  ::std::string* mutable_direction();
  ::std::string* release_direction();
  void set_allocated_direction(::std::string* direction);

  // optional string OrderSysID = 10;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 10;
  const ::std::string& ordersysid() const;
  void set_ordersysid(const ::std::string& value);
  void set_ordersysid(const char* value);
  void set_ordersysid(const char* value, size_t size);
  ::std::string* mutable_ordersysid();
  ::std::string* release_ordersysid();
  void set_allocated_ordersysid(::std::string* ordersysid);

  // optional string ParticipantID = 11;
  void clear_participantid();
  static const int kParticipantIDFieldNumber = 11;
  const ::std::string& participantid() const;
  void set_participantid(const ::std::string& value);
  void set_participantid(const char* value);
  void set_participantid(const char* value, size_t size);
  ::std::string* mutable_participantid();
  ::std::string* release_participantid();
  void set_allocated_participantid(::std::string* participantid);

  // optional string ClientID = 12;
  void clear_clientid();
  static const int kClientIDFieldNumber = 12;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string TradingRole = 13;
  void clear_tradingrole();
  static const int kTradingRoleFieldNumber = 13;
  const ::std::string& tradingrole() const;
  void set_tradingrole(const ::std::string& value);
  void set_tradingrole(const char* value);
  void set_tradingrole(const char* value, size_t size);
  ::std::string* mutable_tradingrole();
  ::std::string* release_tradingrole();
  void set_allocated_tradingrole(::std::string* tradingrole);

  // optional string ExchangeInstID = 14;
  void clear_exchangeinstid();
  static const int kExchangeInstIDFieldNumber = 14;
  const ::std::string& exchangeinstid() const;
  void set_exchangeinstid(const ::std::string& value);
  void set_exchangeinstid(const char* value);
  void set_exchangeinstid(const char* value, size_t size);
  ::std::string* mutable_exchangeinstid();
  ::std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // optional string OffsetFlag = 15;
  void clear_offsetflag();
  static const int kOffsetFlagFieldNumber = 15;
  const ::std::string& offsetflag() const;
  void set_offsetflag(const ::std::string& value);
  void set_offsetflag(const char* value);
  void set_offsetflag(const char* value, size_t size);
  ::std::string* mutable_offsetflag();
  ::std::string* release_offsetflag();
  void set_allocated_offsetflag(::std::string* offsetflag);

  // optional string HedgeFlag = 16;
  void clear_hedgeflag();
  static const int kHedgeFlagFieldNumber = 16;
  const ::std::string& hedgeflag() const;
  void set_hedgeflag(const ::std::string& value);
  void set_hedgeflag(const char* value);
  void set_hedgeflag(const char* value, size_t size);
  ::std::string* mutable_hedgeflag();
  ::std::string* release_hedgeflag();
  void set_allocated_hedgeflag(::std::string* hedgeflag);

  // optional double Price = 17;
  void clear_price();
  static const int kPriceFieldNumber = 17;
  double price() const;
  void set_price(double value);

  // optional int32 Volume = 18;
  void clear_volume();
  static const int kVolumeFieldNumber = 18;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional string TradeDate = 19;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 19;
  const ::std::string& tradedate() const;
  void set_tradedate(const ::std::string& value);
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  ::std::string* mutable_tradedate();
  ::std::string* release_tradedate();
  void set_allocated_tradedate(::std::string* tradedate);

  // optional string TradeTime = 20;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 20;
  const ::std::string& tradetime() const;
  void set_tradetime(const ::std::string& value);
  void set_tradetime(const char* value);
  void set_tradetime(const char* value, size_t size);
  ::std::string* mutable_tradetime();
  ::std::string* release_tradetime();
  void set_allocated_tradetime(::std::string* tradetime);

  // optional string TradeType = 21;
  void clear_tradetype();
  static const int kTradeTypeFieldNumber = 21;
  const ::std::string& tradetype() const;
  void set_tradetype(const ::std::string& value);
  void set_tradetype(const char* value);
  void set_tradetype(const char* value, size_t size);
  ::std::string* mutable_tradetype();
  ::std::string* release_tradetype();
  void set_allocated_tradetype(::std::string* tradetype);

  // optional string PriceSource = 22;
  void clear_pricesource();
  static const int kPriceSourceFieldNumber = 22;
  const ::std::string& pricesource() const;
  void set_pricesource(const ::std::string& value);
  void set_pricesource(const char* value);
  void set_pricesource(const char* value, size_t size);
  ::std::string* mutable_pricesource();
  ::std::string* release_pricesource();
  void set_allocated_pricesource(::std::string* pricesource);

  // optional string TraderID = 23;
  void clear_traderid();
  static const int kTraderIDFieldNumber = 23;
  const ::std::string& traderid() const;
  void set_traderid(const ::std::string& value);
  void set_traderid(const char* value);
  void set_traderid(const char* value, size_t size);
  ::std::string* mutable_traderid();
  ::std::string* release_traderid();
  void set_allocated_traderid(::std::string* traderid);

  // optional string OrderLocalID = 24;
  void clear_orderlocalid();
  static const int kOrderLocalIDFieldNumber = 24;
  const ::std::string& orderlocalid() const;
  void set_orderlocalid(const ::std::string& value);
  void set_orderlocalid(const char* value);
  void set_orderlocalid(const char* value, size_t size);
  ::std::string* mutable_orderlocalid();
  ::std::string* release_orderlocalid();
  void set_allocated_orderlocalid(::std::string* orderlocalid);

  // optional string ClearingPartID = 25;
  void clear_clearingpartid();
  static const int kClearingPartIDFieldNumber = 25;
  const ::std::string& clearingpartid() const;
  void set_clearingpartid(const ::std::string& value);
  void set_clearingpartid(const char* value);
  void set_clearingpartid(const char* value, size_t size);
  ::std::string* mutable_clearingpartid();
  ::std::string* release_clearingpartid();
  void set_allocated_clearingpartid(::std::string* clearingpartid);

  // optional string BusinessUnit = 26;
  void clear_businessunit();
  static const int kBusinessUnitFieldNumber = 26;
  const ::std::string& businessunit() const;
  void set_businessunit(const ::std::string& value);
  void set_businessunit(const char* value);
  void set_businessunit(const char* value, size_t size);
  ::std::string* mutable_businessunit();
  ::std::string* release_businessunit();
  void set_allocated_businessunit(::std::string* businessunit);

  // optional int32 SequenceNo = 27;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 27;
  ::google::protobuf::int32 sequenceno() const;
  void set_sequenceno(::google::protobuf::int32 value);

  // optional string TradingDay = 28;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 28;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // optional int32 SettlementID = 29;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 29;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // optional int32 BrokerOrderSeq = 30;
  void clear_brokerorderseq();
  static const int kBrokerOrderSeqFieldNumber = 30;
  ::google::protobuf::int32 brokerorderseq() const;
  void set_brokerorderseq(::google::protobuf::int32 value);

  // optional string TradeSource = 31;
  void clear_tradesource();
  static const int kTradeSourceFieldNumber = 31;
  const ::std::string& tradesource() const;
  void set_tradesource(const ::std::string& value);
  void set_tradesource(const char* value);
  void set_tradesource(const char* value, size_t size);
  ::std::string* mutable_tradesource();
  ::std::string* release_tradesource();
  void set_allocated_tradesource(::std::string* tradesource);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgTradeRtn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr tradeid_;
  ::google::protobuf::internal::ArenaStringPtr direction_;
  ::google::protobuf::int32 eof_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::internal::ArenaStringPtr ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr participantid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr tradingrole_;
  ::google::protobuf::internal::ArenaStringPtr exchangeinstid_;
  ::google::protobuf::internal::ArenaStringPtr offsetflag_;
  ::google::protobuf::internal::ArenaStringPtr hedgeflag_;
  double price_;
  ::google::protobuf::internal::ArenaStringPtr tradedate_;
  ::google::protobuf::internal::ArenaStringPtr tradetime_;
  ::google::protobuf::internal::ArenaStringPtr tradetype_;
  ::google::protobuf::internal::ArenaStringPtr pricesource_;
  ::google::protobuf::internal::ArenaStringPtr traderid_;
  ::google::protobuf::internal::ArenaStringPtr orderlocalid_;
  ::google::protobuf::internal::ArenaStringPtr clearingpartid_;
  ::google::protobuf::internal::ArenaStringPtr businessunit_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::int32 sequenceno_;
  ::google::protobuf::int32 settlementid_;
  ::google::protobuf::internal::ArenaStringPtr tradesource_;
  ::google::protobuf::int32 brokerorderseq_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgTradeRtn* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgSettlementInfoConfirm : public ::google::protobuf::Message {
 public:
  PBMsgSettlementInfoConfirm();
  virtual ~PBMsgSettlementInfoConfirm();

  PBMsgSettlementInfoConfirm(const PBMsgSettlementInfoConfirm& from);

  inline PBMsgSettlementInfoConfirm& operator=(const PBMsgSettlementInfoConfirm& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgSettlementInfoConfirm& default_instance();

  void Swap(PBMsgSettlementInfoConfirm* other);

  // implements Message ----------------------------------------------

  inline PBMsgSettlementInfoConfirm* New() const { return New(NULL); }

  PBMsgSettlementInfoConfirm* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgSettlementInfoConfirm& from);
  void MergeFrom(const PBMsgSettlementInfoConfirm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgSettlementInfoConfirm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string ConfirmDate = 4;
  void clear_confirmdate();
  static const int kConfirmDateFieldNumber = 4;
  const ::std::string& confirmdate() const;
  void set_confirmdate(const ::std::string& value);
  void set_confirmdate(const char* value);
  void set_confirmdate(const char* value, size_t size);
  ::std::string* mutable_confirmdate();
  ::std::string* release_confirmdate();
  void set_allocated_confirmdate(::std::string* confirmdate);

  // optional string ConfirmTime = 5;
  void clear_confirmtime();
  static const int kConfirmTimeFieldNumber = 5;
  const ::std::string& confirmtime() const;
  void set_confirmtime(const ::std::string& value);
  void set_confirmtime(const char* value);
  void set_confirmtime(const char* value, size_t size);
  ::std::string* mutable_confirmtime();
  ::std::string* release_confirmtime();
  void set_allocated_confirmtime(::std::string* confirmtime);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgSettlementInfoConfirm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr confirmdate_;
  ::google::protobuf::internal::ArenaStringPtr confirmtime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgSettlementInfoConfirm* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgReqConnect : public ::google::protobuf::Message {
 public:
  PBMsgReqConnect();
  virtual ~PBMsgReqConnect();

  PBMsgReqConnect(const PBMsgReqConnect& from);

  inline PBMsgReqConnect& operator=(const PBMsgReqConnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgReqConnect& default_instance();

  void Swap(PBMsgReqConnect* other);

  // implements Message ----------------------------------------------

  inline PBMsgReqConnect* New() const { return New(NULL); }

  PBMsgReqConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgReqConnect& from);
  void MergeFrom(const PBMsgReqConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgReqConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string TradeFront = 4;
  void clear_tradefront();
  static const int kTradeFrontFieldNumber = 4;
  const ::std::string& tradefront() const;
  void set_tradefront(const ::std::string& value);
  void set_tradefront(const char* value);
  void set_tradefront(const char* value, size_t size);
  ::std::string* mutable_tradefront();
  ::std::string* release_tradefront();
  void set_allocated_tradefront(::std::string* tradefront);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgReqConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr tradefront_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgReqConnect* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgRspConnect : public ::google::protobuf::Message {
 public:
  PBMsgRspConnect();
  virtual ~PBMsgRspConnect();

  PBMsgRspConnect(const PBMsgRspConnect& from);

  inline PBMsgRspConnect& operator=(const PBMsgRspConnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgRspConnect& default_instance();

  void Swap(PBMsgRspConnect* other);

  // implements Message ----------------------------------------------

  inline PBMsgRspConnect* New() const { return New(NULL); }

  PBMsgRspConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgRspConnect& from);
  void MergeFrom(const PBMsgRspConnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMsgRspConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string InvestorID = 3;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string TradeFront = 4;
  void clear_tradefront();
  static const int kTradeFrontFieldNumber = 4;
  const ::std::string& tradefront() const;
  void set_tradefront(const ::std::string& value);
  void set_tradefront(const char* value);
  void set_tradefront(const char* value, size_t size);
  ::std::string* mutable_tradefront();
  ::std::string* release_tradefront();
  void set_allocated_tradefront(::std::string* tradefront);

  // optional string ReqURI = 5;
  void clear_requri();
  static const int kReqURIFieldNumber = 5;
  const ::std::string& requri() const;
  void set_requri(const ::std::string& value);
  void set_requri(const char* value);
  void set_requri(const char* value, size_t size);
  ::std::string* mutable_requri();
  ::std::string* release_requri();
  void set_allocated_requri(::std::string* requri);

  // optional string RspURI = 6;
  void clear_rspuri();
  static const int kRspURIFieldNumber = 6;
  const ::std::string& rspuri() const;
  void set_rspuri(const ::std::string& value);
  void set_rspuri(const char* value);
  void set_rspuri(const char* value, size_t size);
  ::std::string* mutable_rspuri();
  ::std::string* release_rspuri();
  void set_allocated_rspuri(::std::string* rspuri);

  // @@protoc_insertion_point(class_scope:PBMsgTrader.PBMsgRspConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr tradefront_;
  ::google::protobuf::internal::ArenaStringPtr requri_;
  ::google::protobuf::internal::ArenaStringPtr rspuri_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PBMsgTrader_2eproto();
  friend void protobuf_AssignDesc_PBMsgTrader_2eproto();
  friend void protobuf_ShutdownFile_PBMsgTrader_2eproto();

  void InitAsDefaultInstance();
  static PBMsgRspConnect* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgError

// optional int32 ErrorID = 2;
inline void PBMsgError::clear_errorid() {
  errorid_ = 0;
}
inline ::google::protobuf::int32 PBMsgError::errorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgError.ErrorID)
  return errorid_;
}
inline void PBMsgError::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgError.ErrorID)
}

// optional bytes ErrorMsg = 3;
inline void PBMsgError::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgError::errormsg() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgError.ErrorMsg)
  return errormsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgError::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgError.ErrorMsg)
}
inline void PBMsgError::set_errormsg(const char* value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgError.ErrorMsg)
}
inline void PBMsgError::set_errormsg(const void* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgError.ErrorMsg)
}
inline ::std::string* PBMsgError::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgError.ErrorMsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgError::release_errormsg() {
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgError::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgError.ErrorMsg)
}

// -------------------------------------------------------------------

// PBMsgLoginReq

// optional string TradingDay = 2;
inline void PBMsgLoginReq::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.TradingDay)
}
inline void PBMsgLoginReq::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.TradingDay)
}
inline void PBMsgLoginReq::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.TradingDay)
}
inline ::std::string* PBMsgLoginReq::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.TradingDay)
}

// optional string BrokerID = 3;
inline void PBMsgLoginReq::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.BrokerID)
}
inline void PBMsgLoginReq::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.BrokerID)
}
inline void PBMsgLoginReq::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.BrokerID)
}
inline ::std::string* PBMsgLoginReq::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.BrokerID)
}

// optional string UserID = 4;
inline void PBMsgLoginReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.UserID)
}
inline void PBMsgLoginReq::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.UserID)
}
inline void PBMsgLoginReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.UserID)
}
inline ::std::string* PBMsgLoginReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.UserID)
}

// optional string Password = 5;
inline void PBMsgLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::password() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.Password)
}
inline void PBMsgLoginReq::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.Password)
}
inline void PBMsgLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.Password)
}
inline ::std::string* PBMsgLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.Password)
}

// optional string UserProductInfo = 6;
inline void PBMsgLoginReq::clear_userproductinfo() {
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::userproductinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
  return userproductinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_userproductinfo(const ::std::string& value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}
inline void PBMsgLoginReq::set_userproductinfo(const char* value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}
inline void PBMsgLoginReq::set_userproductinfo(const char* value, size_t size) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}
inline ::std::string* PBMsgLoginReq::mutable_userproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
  return userproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_userproductinfo() {
  
  return userproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_userproductinfo(::std::string* userproductinfo) {
  if (userproductinfo != NULL) {
    
  } else {
    
  }
  userproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userproductinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}

// optional string InterfaceProductInfo = 7;
inline void PBMsgLoginReq::clear_interfaceproductinfo() {
  interfaceproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::interfaceproductinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
  return interfaceproductinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_interfaceproductinfo(const ::std::string& value) {
  
  interfaceproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}
inline void PBMsgLoginReq::set_interfaceproductinfo(const char* value) {
  
  interfaceproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}
inline void PBMsgLoginReq::set_interfaceproductinfo(const char* value, size_t size) {
  
  interfaceproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}
inline ::std::string* PBMsgLoginReq::mutable_interfaceproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
  return interfaceproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_interfaceproductinfo() {
  
  return interfaceproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_interfaceproductinfo(::std::string* interfaceproductinfo) {
  if (interfaceproductinfo != NULL) {
    
  } else {
    
  }
  interfaceproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfaceproductinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}

// optional string ProtocolInfo = 8;
inline void PBMsgLoginReq::clear_protocolinfo() {
  protocolinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::protocolinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
  return protocolinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_protocolinfo(const ::std::string& value) {
  
  protocolinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}
inline void PBMsgLoginReq::set_protocolinfo(const char* value) {
  
  protocolinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}
inline void PBMsgLoginReq::set_protocolinfo(const char* value, size_t size) {
  
  protocolinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}
inline ::std::string* PBMsgLoginReq::mutable_protocolinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
  return protocolinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_protocolinfo() {
  
  return protocolinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_protocolinfo(::std::string* protocolinfo) {
  if (protocolinfo != NULL) {
    
  } else {
    
  }
  protocolinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocolinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}

// optional string MacAddress = 9;
inline void PBMsgLoginReq::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::macaddress() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.MacAddress)
  return macaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.MacAddress)
}
inline void PBMsgLoginReq::set_macaddress(const char* value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.MacAddress)
}
inline void PBMsgLoginReq::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.MacAddress)
}
inline ::std::string* PBMsgLoginReq::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.MacAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_macaddress() {
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.MacAddress)
}

// optional string OneTimePassword = 10;
inline void PBMsgLoginReq::clear_onetimepassword() {
  onetimepassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::onetimepassword() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
  return onetimepassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_onetimepassword(const ::std::string& value) {
  
  onetimepassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}
inline void PBMsgLoginReq::set_onetimepassword(const char* value) {
  
  onetimepassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}
inline void PBMsgLoginReq::set_onetimepassword(const char* value, size_t size) {
  
  onetimepassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}
inline ::std::string* PBMsgLoginReq::mutable_onetimepassword() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
  return onetimepassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_onetimepassword() {
  
  return onetimepassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_onetimepassword(::std::string* onetimepassword) {
  if (onetimepassword != NULL) {
    
  } else {
    
  }
  onetimepassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onetimepassword);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}

// optional string ClientIPAddress = 11;
inline void PBMsgLoginReq::clear_clientipaddress() {
  clientipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginReq::clientipaddress() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
  return clientipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_clientipaddress(const ::std::string& value) {
  
  clientipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}
inline void PBMsgLoginReq::set_clientipaddress(const char* value) {
  
  clientipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}
inline void PBMsgLoginReq::set_clientipaddress(const char* value, size_t size) {
  
  clientipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}
inline ::std::string* PBMsgLoginReq::mutable_clientipaddress() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
  return clientipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginReq::release_clientipaddress() {
  
  return clientipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginReq::set_allocated_clientipaddress(::std::string* clientipaddress) {
  if (clientipaddress != NULL) {
    
  } else {
    
  }
  clientipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientipaddress);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}

// -------------------------------------------------------------------

// PBMsgLoginRsp

// optional string TradingDay = 2;
inline void PBMsgLoginRsp::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}
inline void PBMsgLoginRsp::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}
inline void PBMsgLoginRsp::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}
inline ::std::string* PBMsgLoginRsp::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}

// optional string LoginTime = 3;
inline void PBMsgLoginRsp::clear_logintime() {
  logintime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::logintime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.LoginTime)
  return logintime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_logintime(const ::std::string& value) {
  
  logintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}
inline void PBMsgLoginRsp::set_logintime(const char* value) {
  
  logintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}
inline void PBMsgLoginRsp::set_logintime(const char* value, size_t size) {
  
  logintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}
inline ::std::string* PBMsgLoginRsp::mutable_logintime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.LoginTime)
  return logintime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_logintime() {
  
  return logintime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_logintime(::std::string* logintime) {
  if (logintime != NULL) {
    
  } else {
    
  }
  logintime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logintime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}

// optional string BrokerID = 4;
inline void PBMsgLoginRsp::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}
inline void PBMsgLoginRsp::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}
inline void PBMsgLoginRsp::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}
inline ::std::string* PBMsgLoginRsp::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}

// optional string UserID = 5;
inline void PBMsgLoginRsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.UserID)
}
inline void PBMsgLoginRsp::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.UserID)
}
inline void PBMsgLoginRsp::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.UserID)
}
inline ::std::string* PBMsgLoginRsp::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.UserID)
}

// optional string SystemName = 6;
inline void PBMsgLoginRsp::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::systemname() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.SystemName)
  return systemname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_systemname(const ::std::string& value) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.SystemName)
}
inline void PBMsgLoginRsp::set_systemname(const char* value) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.SystemName)
}
inline void PBMsgLoginRsp::set_systemname(const char* value, size_t size) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.SystemName)
}
inline ::std::string* PBMsgLoginRsp::mutable_systemname() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.SystemName)
  return systemname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_systemname() {
  
  return systemname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_systemname(::std::string* systemname) {
  if (systemname != NULL) {
    
  } else {
    
  }
  systemname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.SystemName)
}

// optional int32 FrontID = 7;
inline void PBMsgLoginRsp::clear_frontid() {
  frontid_ = 0;
}
inline ::google::protobuf::int32 PBMsgLoginRsp::frontid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.FrontID)
  return frontid_;
}
inline void PBMsgLoginRsp::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.FrontID)
}

// optional int32 SessionID = 8;
inline void PBMsgLoginRsp::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 PBMsgLoginRsp::sessionid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.SessionID)
  return sessionid_;
}
inline void PBMsgLoginRsp::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.SessionID)
}

// optional string MaxOrderRef = 9;
inline void PBMsgLoginRsp::clear_maxorderref() {
  maxorderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::maxorderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
  return maxorderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_maxorderref(const ::std::string& value) {
  
  maxorderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}
inline void PBMsgLoginRsp::set_maxorderref(const char* value) {
  
  maxorderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}
inline void PBMsgLoginRsp::set_maxorderref(const char* value, size_t size) {
  
  maxorderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}
inline ::std::string* PBMsgLoginRsp::mutable_maxorderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
  return maxorderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_maxorderref() {
  
  return maxorderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_maxorderref(::std::string* maxorderref) {
  if (maxorderref != NULL) {
    
  } else {
    
  }
  maxorderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxorderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}

// optional string SHFETime = 10;
inline void PBMsgLoginRsp::clear_shfetime() {
  shfetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::shfetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.SHFETime)
  return shfetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_shfetime(const ::std::string& value) {
  
  shfetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}
inline void PBMsgLoginRsp::set_shfetime(const char* value) {
  
  shfetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}
inline void PBMsgLoginRsp::set_shfetime(const char* value, size_t size) {
  
  shfetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}
inline ::std::string* PBMsgLoginRsp::mutable_shfetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.SHFETime)
  return shfetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_shfetime() {
  
  return shfetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_shfetime(::std::string* shfetime) {
  if (shfetime != NULL) {
    
  } else {
    
  }
  shfetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shfetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}

// optional string DCETime = 11;
inline void PBMsgLoginRsp::clear_dcetime() {
  dcetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::dcetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.DCETime)
  return dcetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_dcetime(const ::std::string& value) {
  
  dcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.DCETime)
}
inline void PBMsgLoginRsp::set_dcetime(const char* value) {
  
  dcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.DCETime)
}
inline void PBMsgLoginRsp::set_dcetime(const char* value, size_t size) {
  
  dcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.DCETime)
}
inline ::std::string* PBMsgLoginRsp::mutable_dcetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.DCETime)
  return dcetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_dcetime() {
  
  return dcetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_dcetime(::std::string* dcetime) {
  if (dcetime != NULL) {
    
  } else {
    
  }
  dcetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.DCETime)
}

// optional string CZCETime = 12;
inline void PBMsgLoginRsp::clear_czcetime() {
  czcetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::czcetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.CZCETime)
  return czcetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_czcetime(const ::std::string& value) {
  
  czcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}
inline void PBMsgLoginRsp::set_czcetime(const char* value) {
  
  czcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}
inline void PBMsgLoginRsp::set_czcetime(const char* value, size_t size) {
  
  czcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}
inline ::std::string* PBMsgLoginRsp::mutable_czcetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.CZCETime)
  return czcetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_czcetime() {
  
  return czcetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_czcetime(::std::string* czcetime) {
  if (czcetime != NULL) {
    
  } else {
    
  }
  czcetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), czcetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}

// optional string FFEXTime = 13;
inline void PBMsgLoginRsp::clear_ffextime() {
  ffextime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLoginRsp::ffextime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
  return ffextime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_ffextime(const ::std::string& value) {
  
  ffextime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}
inline void PBMsgLoginRsp::set_ffextime(const char* value) {
  
  ffextime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}
inline void PBMsgLoginRsp::set_ffextime(const char* value, size_t size) {
  
  ffextime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}
inline ::std::string* PBMsgLoginRsp::mutable_ffextime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
  return ffextime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLoginRsp::release_ffextime() {
  
  return ffextime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLoginRsp::set_allocated_ffextime(::std::string* ffextime) {
  if (ffextime != NULL) {
    
  } else {
    
  }
  ffextime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ffextime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}

// -------------------------------------------------------------------

// PBMsgLogout

// optional string BrokerID = 2;
inline void PBMsgLogout::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLogout::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLogout.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLogout::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLogout.BrokerID)
}
inline void PBMsgLogout::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLogout.BrokerID)
}
inline void PBMsgLogout::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLogout.BrokerID)
}
inline ::std::string* PBMsgLogout::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLogout.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLogout::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLogout::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLogout.BrokerID)
}

// optional string UserID = 3;
inline void PBMsgLogout::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgLogout::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLogout.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLogout::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLogout.UserID)
}
inline void PBMsgLogout::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLogout.UserID)
}
inline void PBMsgLogout::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLogout.UserID)
}
inline ::std::string* PBMsgLogout::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLogout.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgLogout::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgLogout::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLogout.UserID)
}

// -------------------------------------------------------------------

// PBMsgQueryReqMarketInfo

// optional string ExchangeID = 2;
inline void PBMsgQueryReqMarketInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqMarketInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqMarketInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}
inline void PBMsgQueryReqMarketInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}
inline void PBMsgQueryReqMarketInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}
inline ::std::string* PBMsgQueryReqMarketInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqMarketInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqMarketInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}

// -------------------------------------------------------------------

// PBMsgQueryRspMarketInfo

// optional int32 EOF = 1;
inline void PBMsgQueryRspMarketInfo::clear_eof() {
  eof_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspMarketInfo::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.EOF)
  return eof_;
}
inline void PBMsgQueryRspMarketInfo::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.EOF)
}

// optional string ExchangeID = 2;
inline void PBMsgQueryRspMarketInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspMarketInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspMarketInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}
inline void PBMsgQueryRspMarketInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}
inline void PBMsgQueryRspMarketInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}
inline ::std::string* PBMsgQueryRspMarketInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspMarketInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspMarketInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}

// optional bytes ExchangeName = 3;
inline void PBMsgQueryRspMarketInfo::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspMarketInfo::exchangename() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
  return exchangename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspMarketInfo::set_exchangename(const ::std::string& value) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}
inline void PBMsgQueryRspMarketInfo::set_exchangename(const char* value) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}
inline void PBMsgQueryRspMarketInfo::set_exchangename(const void* value, size_t size) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}
inline ::std::string* PBMsgQueryRspMarketInfo::mutable_exchangename() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
  return exchangename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspMarketInfo::release_exchangename() {
  
  return exchangename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspMarketInfo::set_allocated_exchangename(::std::string* exchangename) {
  if (exchangename != NULL) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}

// optional string ExchangeProperty = 4;
inline void PBMsgQueryRspMarketInfo::clear_exchangeproperty() {
  exchangeproperty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspMarketInfo::exchangeproperty() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
  return exchangeproperty_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspMarketInfo::set_exchangeproperty(const ::std::string& value) {
  
  exchangeproperty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}
inline void PBMsgQueryRspMarketInfo::set_exchangeproperty(const char* value) {
  
  exchangeproperty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}
inline void PBMsgQueryRspMarketInfo::set_exchangeproperty(const char* value, size_t size) {
  
  exchangeproperty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}
inline ::std::string* PBMsgQueryRspMarketInfo::mutable_exchangeproperty() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
  return exchangeproperty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspMarketInfo::release_exchangeproperty() {
  
  return exchangeproperty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspMarketInfo::set_allocated_exchangeproperty(::std::string* exchangeproperty) {
  if (exchangeproperty != NULL) {
    
  } else {
    
  }
  exchangeproperty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeproperty);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}

// -------------------------------------------------------------------

// PBMsgQueryReqInstrumentInfo

// optional string InstrumentID = 2;
inline void PBMsgQueryReqInstrumentInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqInstrumentInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}
inline void PBMsgQueryReqInstrumentInfo::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}
inline void PBMsgQueryReqInstrumentInfo::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}

// optional string ExchangeID = 3;
inline void PBMsgQueryReqInstrumentInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqInstrumentInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}
inline void PBMsgQueryReqInstrumentInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}
inline void PBMsgQueryReqInstrumentInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}

// optional string ExchangeInstID = 4;
inline void PBMsgQueryReqInstrumentInfo::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqInstrumentInfo::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}
inline void PBMsgQueryReqInstrumentInfo::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}
inline void PBMsgQueryReqInstrumentInfo::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}

// optional string ProductID = 5;
inline void PBMsgQueryReqInstrumentInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqInstrumentInfo::productid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}
inline void PBMsgQueryReqInstrumentInfo::set_productid(const char* value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}
inline void PBMsgQueryReqInstrumentInfo::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqInstrumentInfo::release_productid() {
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqInstrumentInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}

// -------------------------------------------------------------------

// PBMsgQueryRspInstrumentInfo

// optional int32 EOF = 1;
inline void PBMsgQueryRspInstrumentInfo::clear_eof() {
  eof_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EOF)
  return eof_;
}
inline void PBMsgQueryRspInstrumentInfo::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EOF)
}

// optional string InstrumentID = 2;
inline void PBMsgQueryRspInstrumentInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}
inline void PBMsgQueryRspInstrumentInfo::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}
inline void PBMsgQueryRspInstrumentInfo::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}

// optional string ExchangeID = 3;
inline void PBMsgQueryRspInstrumentInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}
inline void PBMsgQueryRspInstrumentInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}
inline void PBMsgQueryRspInstrumentInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}

// optional bytes InstrumentName = 4;
inline void PBMsgQueryRspInstrumentInfo::clear_instrumentname() {
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::instrumentname() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
  return instrumentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_instrumentname(const ::std::string& value) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}
inline void PBMsgQueryRspInstrumentInfo::set_instrumentname(const char* value) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}
inline void PBMsgQueryRspInstrumentInfo::set_instrumentname(const void* value, size_t size) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_instrumentname() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
  return instrumentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_instrumentname() {
  
  return instrumentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_instrumentname(::std::string* instrumentname) {
  if (instrumentname != NULL) {
    
  } else {
    
  }
  instrumentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentname);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}

// optional string ExchangeInstID = 5;
inline void PBMsgQueryRspInstrumentInfo::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}
inline void PBMsgQueryRspInstrumentInfo::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}
inline void PBMsgQueryRspInstrumentInfo::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}

// optional string ProductID = 6;
inline void PBMsgQueryRspInstrumentInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::productid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}
inline void PBMsgQueryRspInstrumentInfo::set_productid(const char* value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}
inline void PBMsgQueryRspInstrumentInfo::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_productid() {
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}

// optional bytes ProductClass = 7;
inline void PBMsgQueryRspInstrumentInfo::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::productclass() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
  return productclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}
inline void PBMsgQueryRspInstrumentInfo::set_productclass(const char* value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}
inline void PBMsgQueryRspInstrumentInfo::set_productclass(const void* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_productclass() {
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}

// optional int32 DeliveryYear = 8;
inline void PBMsgQueryRspInstrumentInfo::clear_deliveryyear() {
  deliveryyear_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::deliveryyear() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryYear)
  return deliveryyear_;
}
inline void PBMsgQueryRspInstrumentInfo::set_deliveryyear(::google::protobuf::int32 value) {
  
  deliveryyear_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryYear)
}

// optional int32 DeliveryMonth = 9;
inline void PBMsgQueryRspInstrumentInfo::clear_deliverymonth() {
  deliverymonth_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::deliverymonth() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryMonth)
  return deliverymonth_;
}
inline void PBMsgQueryRspInstrumentInfo::set_deliverymonth(::google::protobuf::int32 value) {
  
  deliverymonth_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryMonth)
}

// optional int32 MaxMarketOrderVolume = 10;
inline void PBMsgQueryRspInstrumentInfo::clear_maxmarketordervolume() {
  maxmarketordervolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarketOrderVolume)
  return maxmarketordervolume_;
}
inline void PBMsgQueryRspInstrumentInfo::set_maxmarketordervolume(::google::protobuf::int32 value) {
  
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarketOrderVolume)
}

// optional int32 MinMarketOrderVolume = 11;
inline void PBMsgQueryRspInstrumentInfo::clear_minmarketordervolume() {
  minmarketordervolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinMarketOrderVolume)
  return minmarketordervolume_;
}
inline void PBMsgQueryRspInstrumentInfo::set_minmarketordervolume(::google::protobuf::int32 value) {
  
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinMarketOrderVolume)
}

// optional int32 MaxLimitOrderVolume = 12;
inline void PBMsgQueryRspInstrumentInfo::clear_maxlimitordervolume() {
  maxlimitordervolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxLimitOrderVolume)
  return maxlimitordervolume_;
}
inline void PBMsgQueryRspInstrumentInfo::set_maxlimitordervolume(::google::protobuf::int32 value) {
  
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxLimitOrderVolume)
}

// optional int32 MinLimitOrderVolume = 13;
inline void PBMsgQueryRspInstrumentInfo::clear_minlimitordervolume() {
  minlimitordervolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinLimitOrderVolume)
  return minlimitordervolume_;
}
inline void PBMsgQueryRspInstrumentInfo::set_minlimitordervolume(::google::protobuf::int32 value) {
  
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinLimitOrderVolume)
}

// optional int32 VolumeMultiple = 14;
inline void PBMsgQueryRspInstrumentInfo::clear_volumemultiple() {
  volumemultiple_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::volumemultiple() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.VolumeMultiple)
  return volumemultiple_;
}
inline void PBMsgQueryRspInstrumentInfo::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.VolumeMultiple)
}

// optional int32 PriceTick = 15;
inline void PBMsgQueryRspInstrumentInfo::clear_pricetick() {
  pricetick_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::pricetick() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PriceTick)
  return pricetick_;
}
inline void PBMsgQueryRspInstrumentInfo::set_pricetick(::google::protobuf::int32 value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PriceTick)
}

// optional string CreateDate = 16;
inline void PBMsgQueryRspInstrumentInfo::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::createdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
  return createdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_createdate(const char* value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_createdate() {
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}

// optional string OpenDate = 17;
inline void PBMsgQueryRspInstrumentInfo::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::opendate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
  return opendate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_opendate(const char* value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_opendate() {
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}

// optional string ExpireDate = 18;
inline void PBMsgQueryRspInstrumentInfo::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::expiredate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
  return expiredate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_expiredate(const char* value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_expiredate() {
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}

// optional string StartDelivDate = 19;
inline void PBMsgQueryRspInstrumentInfo::clear_startdelivdate() {
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::startdelivdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
  return startdelivdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_startdelivdate(const ::std::string& value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_startdelivdate(const char* value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_startdelivdate(const char* value, size_t size) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_startdelivdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
  return startdelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_startdelivdate() {
  
  return startdelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_startdelivdate(::std::string* startdelivdate) {
  if (startdelivdate != NULL) {
    
  } else {
    
  }
  startdelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdelivdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}

// optional string EndDelivDate = 20;
inline void PBMsgQueryRspInstrumentInfo::clear_enddelivdate() {
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::enddelivdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
  return enddelivdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_enddelivdate(const ::std::string& value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_enddelivdate(const char* value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}
inline void PBMsgQueryRspInstrumentInfo::set_enddelivdate(const char* value, size_t size) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_enddelivdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
  return enddelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_enddelivdate() {
  
  return enddelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_enddelivdate(::std::string* enddelivdate) {
  if (enddelivdate != NULL) {
    
  } else {
    
  }
  enddelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddelivdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}

// optional string InstLifePhase = 21;
inline void PBMsgQueryRspInstrumentInfo::clear_instlifephase() {
  instlifephase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::instlifephase() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
  return instlifephase_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_instlifephase(const ::std::string& value) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}
inline void PBMsgQueryRspInstrumentInfo::set_instlifephase(const char* value) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}
inline void PBMsgQueryRspInstrumentInfo::set_instlifephase(const char* value, size_t size) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_instlifephase() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
  return instlifephase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_instlifephase() {
  
  return instlifephase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_instlifephase(::std::string* instlifephase) {
  if (instlifephase != NULL) {
    
  } else {
    
  }
  instlifephase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instlifephase);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}

// optional int32 IsTrading = 22;
inline void PBMsgQueryRspInstrumentInfo::clear_istrading() {
  istrading_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::istrading() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.IsTrading)
  return istrading_;
}
inline void PBMsgQueryRspInstrumentInfo::set_istrading(::google::protobuf::int32 value) {
  
  istrading_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.IsTrading)
}

// optional string PositionType = 23;
inline void PBMsgQueryRspInstrumentInfo::clear_positiontype() {
  positiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::positiontype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
  return positiontype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_positiontype(const ::std::string& value) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}
inline void PBMsgQueryRspInstrumentInfo::set_positiontype(const char* value) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}
inline void PBMsgQueryRspInstrumentInfo::set_positiontype(const char* value, size_t size) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_positiontype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
  return positiontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_positiontype() {
  
  return positiontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_positiontype(::std::string* positiontype) {
  if (positiontype != NULL) {
    
  } else {
    
  }
  positiontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiontype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}

// optional string PositionDateType = 24;
inline void PBMsgQueryRspInstrumentInfo::clear_positiondatetype() {
  positiondatetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::positiondatetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
  return positiondatetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_positiondatetype(const ::std::string& value) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}
inline void PBMsgQueryRspInstrumentInfo::set_positiondatetype(const char* value) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}
inline void PBMsgQueryRspInstrumentInfo::set_positiondatetype(const char* value, size_t size) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_positiondatetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
  return positiondatetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_positiondatetype() {
  
  return positiondatetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_positiondatetype(::std::string* positiondatetype) {
  if (positiondatetype != NULL) {
    
  } else {
    
  }
  positiondatetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondatetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}

// optional double LongMarginRatio = 25;
inline void PBMsgQueryRspInstrumentInfo::clear_longmarginratio() {
  longmarginratio_ = 0;
}
inline double PBMsgQueryRspInstrumentInfo::longmarginratio() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.LongMarginRatio)
  return longmarginratio_;
}
inline void PBMsgQueryRspInstrumentInfo::set_longmarginratio(double value) {
  
  longmarginratio_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.LongMarginRatio)
}

// optional double ShortMarginRatio = 26;
inline void PBMsgQueryRspInstrumentInfo::clear_shortmarginratio() {
  shortmarginratio_ = 0;
}
inline double PBMsgQueryRspInstrumentInfo::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ShortMarginRatio)
  return shortmarginratio_;
}
inline void PBMsgQueryRspInstrumentInfo::set_shortmarginratio(double value) {
  
  shortmarginratio_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ShortMarginRatio)
}

// optional string MaxMarginSideAlgorithm = 27;
inline void PBMsgQueryRspInstrumentInfo::clear_maxmarginsidealgorithm() {
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspInstrumentInfo::maxmarginsidealgorithm() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
  return maxmarginsidealgorithm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_maxmarginsidealgorithm(const ::std::string& value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}
inline void PBMsgQueryRspInstrumentInfo::set_maxmarginsidealgorithm(const char* value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}
inline void PBMsgQueryRspInstrumentInfo::set_maxmarginsidealgorithm(const char* value, size_t size) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::mutable_maxmarginsidealgorithm() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
  return maxmarginsidealgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspInstrumentInfo::release_maxmarginsidealgorithm() {
  
  return maxmarginsidealgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspInstrumentInfo::set_allocated_maxmarginsidealgorithm(::std::string* maxmarginsidealgorithm) {
  if (maxmarginsidealgorithm != NULL) {
    
  } else {
    
  }
  maxmarginsidealgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxmarginsidealgorithm);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}

// -------------------------------------------------------------------

// PBMsgQueryReqOrder

// optional string BrokerID = 2;
inline void PBMsgQueryReqOrder::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}
inline void PBMsgQueryReqOrder::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}
inline void PBMsgQueryReqOrder::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgQueryReqOrder::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}
inline void PBMsgQueryReqOrder::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}
inline void PBMsgQueryReqOrder::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}

// optional string InstrumentID = 4;
inline void PBMsgQueryReqOrder::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}
inline void PBMsgQueryReqOrder::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}
inline void PBMsgQueryReqOrder::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}

// optional string ExchangeID = 5;
inline void PBMsgQueryReqOrder::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}
inline void PBMsgQueryReqOrder::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}
inline void PBMsgQueryReqOrder::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}

// optional string OrderSysID = 6;
inline void PBMsgQueryReqOrder::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}
inline void PBMsgQueryReqOrder::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}
inline void PBMsgQueryReqOrder::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}

// optional string InsertTimeStart = 7;
inline void PBMsgQueryReqOrder::clear_inserttimestart() {
  inserttimestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::inserttimestart() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
  return inserttimestart_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_inserttimestart(const ::std::string& value) {
  
  inserttimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}
inline void PBMsgQueryReqOrder::set_inserttimestart(const char* value) {
  
  inserttimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}
inline void PBMsgQueryReqOrder::set_inserttimestart(const char* value, size_t size) {
  
  inserttimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_inserttimestart() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
  return inserttimestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_inserttimestart() {
  
  return inserttimestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_inserttimestart(::std::string* inserttimestart) {
  if (inserttimestart != NULL) {
    
  } else {
    
  }
  inserttimestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttimestart);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}

// optional string InsertTimeEnd = 8;
inline void PBMsgQueryReqOrder::clear_inserttimeend() {
  inserttimeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::inserttimeend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
  return inserttimeend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_inserttimeend(const ::std::string& value) {
  
  inserttimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}
inline void PBMsgQueryReqOrder::set_inserttimeend(const char* value) {
  
  inserttimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}
inline void PBMsgQueryReqOrder::set_inserttimeend(const char* value, size_t size) {
  
  inserttimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_inserttimeend() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
  return inserttimeend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_inserttimeend() {
  
  return inserttimeend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_inserttimeend(::std::string* inserttimeend) {
  if (inserttimeend != NULL) {
    
  } else {
    
  }
  inserttimeend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttimeend);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}

// optional string TradingDay = 9;
inline void PBMsgQueryReqOrder::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqOrder::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}
inline void PBMsgQueryReqOrder::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}
inline void PBMsgQueryReqOrder::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}
inline ::std::string* PBMsgQueryReqOrder::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqOrder::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqOrder::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}

// optional int32 SettlementID = 10;
inline void PBMsgQueryReqOrder::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryReqOrder::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.SettlementID)
  return settlementid_;
}
inline void PBMsgQueryReqOrder::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.SettlementID)
}

// -------------------------------------------------------------------

// PBMsgQueryReqTrade

// optional string BrokerID = 2;
inline void PBMsgQueryReqTrade::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}
inline void PBMsgQueryReqTrade::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}
inline void PBMsgQueryReqTrade::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgQueryReqTrade::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}
inline void PBMsgQueryReqTrade::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}
inline void PBMsgQueryReqTrade::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}

// optional string InstrumentID = 4;
inline void PBMsgQueryReqTrade::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}
inline void PBMsgQueryReqTrade::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}
inline void PBMsgQueryReqTrade::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}

// optional string ExchangeID = 5;
inline void PBMsgQueryReqTrade::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}
inline void PBMsgQueryReqTrade::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}
inline void PBMsgQueryReqTrade::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}

// optional string TradeID = 6;
inline void PBMsgQueryReqTrade::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::tradeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
  return tradeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}
inline void PBMsgQueryReqTrade::set_tradeid(const char* value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}
inline void PBMsgQueryReqTrade::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_tradeid() {
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}

// optional string TradeTimeStart = 7;
inline void PBMsgQueryReqTrade::clear_tradetimestart() {
  tradetimestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::tradetimestart() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
  return tradetimestart_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_tradetimestart(const ::std::string& value) {
  
  tradetimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}
inline void PBMsgQueryReqTrade::set_tradetimestart(const char* value) {
  
  tradetimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}
inline void PBMsgQueryReqTrade::set_tradetimestart(const char* value, size_t size) {
  
  tradetimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_tradetimestart() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
  return tradetimestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_tradetimestart() {
  
  return tradetimestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_tradetimestart(::std::string* tradetimestart) {
  if (tradetimestart != NULL) {
    
  } else {
    
  }
  tradetimestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetimestart);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}

// optional string TradeTimeEnd = 8;
inline void PBMsgQueryReqTrade::clear_tradetimeend() {
  tradetimeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqTrade::tradetimeend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
  return tradetimeend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_tradetimeend(const ::std::string& value) {
  
  tradetimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}
inline void PBMsgQueryReqTrade::set_tradetimeend(const char* value) {
  
  tradetimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}
inline void PBMsgQueryReqTrade::set_tradetimeend(const char* value, size_t size) {
  
  tradetimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}
inline ::std::string* PBMsgQueryReqTrade::mutable_tradetimeend() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
  return tradetimeend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqTrade::release_tradetimeend() {
  
  return tradetimeend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqTrade::set_allocated_tradetimeend(::std::string* tradetimeend) {
  if (tradetimeend != NULL) {
    
  } else {
    
  }
  tradetimeend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetimeend);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}

// -------------------------------------------------------------------

// PBMsgQueryReqPosition

// optional string BrokerID = 2;
inline void PBMsgQueryReqPosition::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqPosition::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqPosition::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}
inline void PBMsgQueryReqPosition::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}
inline void PBMsgQueryReqPosition::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}
inline ::std::string* PBMsgQueryReqPosition::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqPosition::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqPosition::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgQueryReqPosition::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqPosition::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqPosition::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}
inline void PBMsgQueryReqPosition::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}
inline void PBMsgQueryReqPosition::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}
inline ::std::string* PBMsgQueryReqPosition::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqPosition::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqPosition::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}

// optional string InstrumentID = 4;
inline void PBMsgQueryReqPosition::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqPosition::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqPosition::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}
inline void PBMsgQueryReqPosition::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}
inline void PBMsgQueryReqPosition::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}
inline ::std::string* PBMsgQueryReqPosition::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqPosition::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqPosition::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}

// -------------------------------------------------------------------

// PBMsgQueryRspPosition

// optional int32 EOF = 1;
inline void PBMsgQueryRspPosition::clear_eof() {
  eof_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.EOF)
  return eof_;
}
inline void PBMsgQueryRspPosition::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.EOF)
}

// optional string InstrumentID = 2;
inline void PBMsgQueryRspPosition::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}
inline void PBMsgQueryRspPosition::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}
inline void PBMsgQueryRspPosition::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}

// optional string BrokerID = 3;
inline void PBMsgQueryRspPosition::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}
inline void PBMsgQueryRspPosition::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}
inline void PBMsgQueryRspPosition::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}

// optional string InvestorID = 4;
inline void PBMsgQueryRspPosition::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}
inline void PBMsgQueryRspPosition::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}
inline void PBMsgQueryRspPosition::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}

// optional string PosiDirection = 5;
inline void PBMsgQueryRspPosition::clear_posidirection() {
  posidirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::posidirection() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
  return posidirection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_posidirection(const ::std::string& value) {
  
  posidirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}
inline void PBMsgQueryRspPosition::set_posidirection(const char* value) {
  
  posidirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}
inline void PBMsgQueryRspPosition::set_posidirection(const char* value, size_t size) {
  
  posidirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_posidirection() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
  return posidirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_posidirection() {
  
  return posidirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_posidirection(::std::string* posidirection) {
  if (posidirection != NULL) {
    
  } else {
    
  }
  posidirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posidirection);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}

// optional string HedgeFlag = 6;
inline void PBMsgQueryRspPosition::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::hedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
  return hedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}
inline void PBMsgQueryRspPosition::set_hedgeflag(const char* value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}
inline void PBMsgQueryRspPosition::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_hedgeflag() {
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}

// optional string PositionDate = 7;
inline void PBMsgQueryRspPosition::clear_positiondate() {
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::positiondate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
  return positiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_positiondate(const ::std::string& value) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}
inline void PBMsgQueryRspPosition::set_positiondate(const char* value) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}
inline void PBMsgQueryRspPosition::set_positiondate(const char* value, size_t size) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_positiondate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
  return positiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_positiondate() {
  
  return positiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_positiondate(::std::string* positiondate) {
  if (positiondate != NULL) {
    
  } else {
    
  }
  positiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}

// optional int32 YdPosition = 8;
inline void PBMsgQueryRspPosition::clear_ydposition() {
  ydposition_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::ydposition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.YdPosition)
  return ydposition_;
}
inline void PBMsgQueryRspPosition::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.YdPosition)
}

// optional int32 Position = 9;
inline void PBMsgQueryRspPosition::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::position() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.Position)
  return position_;
}
inline void PBMsgQueryRspPosition::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.Position)
}

// optional int32 LongFrozen = 10;
inline void PBMsgQueryRspPosition::clear_longfrozen() {
  longfrozen_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::longfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.LongFrozen)
  return longfrozen_;
}
inline void PBMsgQueryRspPosition::set_longfrozen(::google::protobuf::int32 value) {
  
  longfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.LongFrozen)
}

// optional int32 ShortFrozen = 11;
inline void PBMsgQueryRspPosition::clear_shortfrozen() {
  shortfrozen_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::shortfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozen)
  return shortfrozen_;
}
inline void PBMsgQueryRspPosition::set_shortfrozen(::google::protobuf::int32 value) {
  
  shortfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozen)
}

// optional double LongFrozenAmount = 12;
inline void PBMsgQueryRspPosition::clear_longfrozenamount() {
  longfrozenamount_ = 0;
}
inline double PBMsgQueryRspPosition::longfrozenamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.LongFrozenAmount)
  return longfrozenamount_;
}
inline void PBMsgQueryRspPosition::set_longfrozenamount(double value) {
  
  longfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.LongFrozenAmount)
}

// optional double ShortFrozenAmount = 13;
inline void PBMsgQueryRspPosition::clear_shortfrozenamount() {
  shortfrozenamount_ = 0;
}
inline double PBMsgQueryRspPosition::shortfrozenamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozenAmount)
  return shortfrozenamount_;
}
inline void PBMsgQueryRspPosition::set_shortfrozenamount(double value) {
  
  shortfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozenAmount)
}

// optional int32 OpenVolume = 14;
inline void PBMsgQueryRspPosition::clear_openvolume() {
  openvolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::openvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.OpenVolume)
  return openvolume_;
}
inline void PBMsgQueryRspPosition::set_openvolume(::google::protobuf::int32 value) {
  
  openvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.OpenVolume)
}

// optional int32 CloseVolume = 15;
inline void PBMsgQueryRspPosition::clear_closevolume() {
  closevolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::closevolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseVolume)
  return closevolume_;
}
inline void PBMsgQueryRspPosition::set_closevolume(::google::protobuf::int32 value) {
  
  closevolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseVolume)
}

// optional double OpenAmount = 16;
inline void PBMsgQueryRspPosition::clear_openamount() {
  openamount_ = 0;
}
inline double PBMsgQueryRspPosition::openamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.OpenAmount)
  return openamount_;
}
inline void PBMsgQueryRspPosition::set_openamount(double value) {
  
  openamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.OpenAmount)
}

// optional double CloseAmount = 17;
inline void PBMsgQueryRspPosition::clear_closeamount() {
  closeamount_ = 0;
}
inline double PBMsgQueryRspPosition::closeamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseAmount)
  return closeamount_;
}
inline void PBMsgQueryRspPosition::set_closeamount(double value) {
  
  closeamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseAmount)
}

// optional double PositionCost = 18;
inline void PBMsgQueryRspPosition::clear_positioncost() {
  positioncost_ = 0;
}
inline double PBMsgQueryRspPosition::positioncost() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PositionCost)
  return positioncost_;
}
inline void PBMsgQueryRspPosition::set_positioncost(double value) {
  
  positioncost_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PositionCost)
}

// optional double PreMargin = 19;
inline void PBMsgQueryRspPosition::clear_premargin() {
  premargin_ = 0;
}
inline double PBMsgQueryRspPosition::premargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PreMargin)
  return premargin_;
}
inline void PBMsgQueryRspPosition::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PreMargin)
}

// optional double UseMargin = 20;
inline void PBMsgQueryRspPosition::clear_usemargin() {
  usemargin_ = 0;
}
inline double PBMsgQueryRspPosition::usemargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.UseMargin)
  return usemargin_;
}
inline void PBMsgQueryRspPosition::set_usemargin(double value) {
  
  usemargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.UseMargin)
}

// optional double FrozenMargin = 21;
inline void PBMsgQueryRspPosition::clear_frozenmargin() {
  frozenmargin_ = 0;
}
inline double PBMsgQueryRspPosition::frozenmargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.FrozenMargin)
  return frozenmargin_;
}
inline void PBMsgQueryRspPosition::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.FrozenMargin)
}

// optional double FrozenCash = 22;
inline void PBMsgQueryRspPosition::clear_frozencash() {
  frozencash_ = 0;
}
inline double PBMsgQueryRspPosition::frozencash() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.FrozenCash)
  return frozencash_;
}
inline void PBMsgQueryRspPosition::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.FrozenCash)
}

// optional double FrozenCommission = 23;
inline void PBMsgQueryRspPosition::clear_frozencommission() {
  frozencommission_ = 0;
}
inline double PBMsgQueryRspPosition::frozencommission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.FrozenCommission)
  return frozencommission_;
}
inline void PBMsgQueryRspPosition::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.FrozenCommission)
}

// optional double CashIn = 24;
inline void PBMsgQueryRspPosition::clear_cashin() {
  cashin_ = 0;
}
inline double PBMsgQueryRspPosition::cashin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CashIn)
  return cashin_;
}
inline void PBMsgQueryRspPosition::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CashIn)
}

// optional double Commission = 25;
inline void PBMsgQueryRspPosition::clear_commission() {
  commission_ = 0;
}
inline double PBMsgQueryRspPosition::commission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.Commission)
  return commission_;
}
inline void PBMsgQueryRspPosition::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.Commission)
}

// optional double CloseProfit = 26;
inline void PBMsgQueryRspPosition::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double PBMsgQueryRspPosition::closeprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseProfit)
  return closeprofit_;
}
inline void PBMsgQueryRspPosition::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseProfit)
}

// optional double PositionProfit = 27;
inline void PBMsgQueryRspPosition::clear_positionprofit() {
  positionprofit_ = 0;
}
inline double PBMsgQueryRspPosition::positionprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PositionProfit)
  return positionprofit_;
}
inline void PBMsgQueryRspPosition::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PositionProfit)
}

// optional double PreSettlementPrice = 28;
inline void PBMsgQueryRspPosition::clear_presettlementprice() {
  presettlementprice_ = 0;
}
inline double PBMsgQueryRspPosition::presettlementprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PreSettlementPrice)
  return presettlementprice_;
}
inline void PBMsgQueryRspPosition::set_presettlementprice(double value) {
  
  presettlementprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PreSettlementPrice)
}

// optional double SettlementPrice = 29;
inline void PBMsgQueryRspPosition::clear_settlementprice() {
  settlementprice_ = 0;
}
inline double PBMsgQueryRspPosition::settlementprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.SettlementPrice)
  return settlementprice_;
}
inline void PBMsgQueryRspPosition::set_settlementprice(double value) {
  
  settlementprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.SettlementPrice)
}

// optional string TradingDay = 30;
inline void PBMsgQueryRspPosition::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspPosition::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}
inline void PBMsgQueryRspPosition::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}
inline void PBMsgQueryRspPosition::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}
inline ::std::string* PBMsgQueryRspPosition::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspPosition::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspPosition::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}

// optional int32 SettlementID = 31;
inline void PBMsgQueryRspPosition::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.SettlementID)
  return settlementid_;
}
inline void PBMsgQueryRspPosition::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.SettlementID)
}

// optional double OpenCost = 32;
inline void PBMsgQueryRspPosition::clear_opencost() {
  opencost_ = 0;
}
inline double PBMsgQueryRspPosition::opencost() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.OpenCost)
  return opencost_;
}
inline void PBMsgQueryRspPosition::set_opencost(double value) {
  
  opencost_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.OpenCost)
}

// optional double ExchangeMargin = 33;
inline void PBMsgQueryRspPosition::clear_exchangemargin() {
  exchangemargin_ = 0;
}
inline double PBMsgQueryRspPosition::exchangemargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.ExchangeMargin)
  return exchangemargin_;
}
inline void PBMsgQueryRspPosition::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.ExchangeMargin)
}

// optional int32 CombPosition = 34;
inline void PBMsgQueryRspPosition::clear_combposition() {
  combposition_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::combposition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CombPosition)
  return combposition_;
}
inline void PBMsgQueryRspPosition::set_combposition(::google::protobuf::int32 value) {
  
  combposition_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CombPosition)
}

// optional int32 CombLongFrozen = 35;
inline void PBMsgQueryRspPosition::clear_comblongfrozen() {
  comblongfrozen_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::comblongfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CombLongFrozen)
  return comblongfrozen_;
}
inline void PBMsgQueryRspPosition::set_comblongfrozen(::google::protobuf::int32 value) {
  
  comblongfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CombLongFrozen)
}

// optional int32 CombShortFrozen = 36;
inline void PBMsgQueryRspPosition::clear_combshortfrozen() {
  combshortfrozen_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::combshortfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CombShortFrozen)
  return combshortfrozen_;
}
inline void PBMsgQueryRspPosition::set_combshortfrozen(::google::protobuf::int32 value) {
  
  combshortfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CombShortFrozen)
}

// optional double CloseProfitByDate = 37;
inline void PBMsgQueryRspPosition::clear_closeprofitbydate() {
  closeprofitbydate_ = 0;
}
inline double PBMsgQueryRspPosition::closeprofitbydate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByDate)
  return closeprofitbydate_;
}
inline void PBMsgQueryRspPosition::set_closeprofitbydate(double value) {
  
  closeprofitbydate_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByDate)
}

// optional double CloseProfitByTrade = 38;
inline void PBMsgQueryRspPosition::clear_closeprofitbytrade() {
  closeprofitbytrade_ = 0;
}
inline double PBMsgQueryRspPosition::closeprofitbytrade() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByTrade)
  return closeprofitbytrade_;
}
inline void PBMsgQueryRspPosition::set_closeprofitbytrade(double value) {
  
  closeprofitbytrade_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByTrade)
}

// optional int32 TodayPosition = 39;
inline void PBMsgQueryRspPosition::clear_todayposition() {
  todayposition_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspPosition::todayposition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.TodayPosition)
  return todayposition_;
}
inline void PBMsgQueryRspPosition::set_todayposition(::google::protobuf::int32 value) {
  
  todayposition_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.TodayPosition)
}

// optional double MarginRateByMoney = 40;
inline void PBMsgQueryRspPosition::clear_marginratebymoney() {
  marginratebymoney_ = 0;
}
inline double PBMsgQueryRspPosition::marginratebymoney() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByMoney)
  return marginratebymoney_;
}
inline void PBMsgQueryRspPosition::set_marginratebymoney(double value) {
  
  marginratebymoney_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByMoney)
}

// optional double MarginRateByVolume = 41;
inline void PBMsgQueryRspPosition::clear_marginratebyvolume() {
  marginratebyvolume_ = 0;
}
inline double PBMsgQueryRspPosition::marginratebyvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByVolume)
  return marginratebyvolume_;
}
inline void PBMsgQueryRspPosition::set_marginratebyvolume(double value) {
  
  marginratebyvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByVolume)
}

// -------------------------------------------------------------------

// PBMsgQueryReqFund

// optional string BrokerID = 2;
inline void PBMsgQueryReqFund::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqFund::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqFund::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}
inline void PBMsgQueryReqFund::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}
inline void PBMsgQueryReqFund::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}
inline ::std::string* PBMsgQueryReqFund::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqFund::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqFund::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgQueryReqFund::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryReqFund::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqFund::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}
inline void PBMsgQueryReqFund::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}
inline void PBMsgQueryReqFund::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}
inline ::std::string* PBMsgQueryReqFund::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryReqFund::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryReqFund::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}

// -------------------------------------------------------------------

// PBMsgQueryRspFund

// optional int32 EOF = 1;
inline void PBMsgQueryRspFund::clear_eof() {
  eof_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspFund::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.EOF)
  return eof_;
}
inline void PBMsgQueryRspFund::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.EOF)
}

// optional string BrokerID = 2;
inline void PBMsgQueryRspFund::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspFund::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspFund::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}
inline void PBMsgQueryRspFund::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}
inline void PBMsgQueryRspFund::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}
inline ::std::string* PBMsgQueryRspFund::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspFund::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspFund::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}

// optional string AccountID = 3;
inline void PBMsgQueryRspFund::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspFund::accountid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.AccountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspFund::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}
inline void PBMsgQueryRspFund::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}
inline void PBMsgQueryRspFund::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}
inline ::std::string* PBMsgQueryRspFund::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspFund.AccountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspFund::release_accountid() {
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspFund::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}

// optional double PreMortgage = 4;
inline void PBMsgQueryRspFund::clear_premortgage() {
  premortgage_ = 0;
}
inline double PBMsgQueryRspFund::premortgage() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreMortgage)
  return premortgage_;
}
inline void PBMsgQueryRspFund::set_premortgage(double value) {
  
  premortgage_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreMortgage)
}

// optional double PreCredit = 5;
inline void PBMsgQueryRspFund::clear_precredit() {
  precredit_ = 0;
}
inline double PBMsgQueryRspFund::precredit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreCredit)
  return precredit_;
}
inline void PBMsgQueryRspFund::set_precredit(double value) {
  
  precredit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreCredit)
}

// optional double PreDeposit = 6;
inline void PBMsgQueryRspFund::clear_predeposit() {
  predeposit_ = 0;
}
inline double PBMsgQueryRspFund::predeposit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreDeposit)
  return predeposit_;
}
inline void PBMsgQueryRspFund::set_predeposit(double value) {
  
  predeposit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreDeposit)
}

// optional double PreBalance = 7;
inline void PBMsgQueryRspFund::clear_prebalance() {
  prebalance_ = 0;
}
inline double PBMsgQueryRspFund::prebalance() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreBalance)
  return prebalance_;
}
inline void PBMsgQueryRspFund::set_prebalance(double value) {
  
  prebalance_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreBalance)
}

// optional double PreMargin = 8;
inline void PBMsgQueryRspFund::clear_premargin() {
  premargin_ = 0;
}
inline double PBMsgQueryRspFund::premargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreMargin)
  return premargin_;
}
inline void PBMsgQueryRspFund::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreMargin)
}

// optional double InterestBase = 9;
inline void PBMsgQueryRspFund::clear_interestbase() {
  interestbase_ = 0;
}
inline double PBMsgQueryRspFund::interestbase() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.InterestBase)
  return interestbase_;
}
inline void PBMsgQueryRspFund::set_interestbase(double value) {
  
  interestbase_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.InterestBase)
}

// optional double Interest = 10;
inline void PBMsgQueryRspFund::clear_interest() {
  interest_ = 0;
}
inline double PBMsgQueryRspFund::interest() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Interest)
  return interest_;
}
inline void PBMsgQueryRspFund::set_interest(double value) {
  
  interest_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Interest)
}

// optional double Deposit = 11;
inline void PBMsgQueryRspFund::clear_deposit() {
  deposit_ = 0;
}
inline double PBMsgQueryRspFund::deposit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Deposit)
  return deposit_;
}
inline void PBMsgQueryRspFund::set_deposit(double value) {
  
  deposit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Deposit)
}

// optional double Withdraw = 12;
inline void PBMsgQueryRspFund::clear_withdraw() {
  withdraw_ = 0;
}
inline double PBMsgQueryRspFund::withdraw() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Withdraw)
  return withdraw_;
}
inline void PBMsgQueryRspFund::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Withdraw)
}

// optional double FrozenMargin = 13;
inline void PBMsgQueryRspFund::clear_frozenmargin() {
  frozenmargin_ = 0;
}
inline double PBMsgQueryRspFund::frozenmargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.FrozenMargin)
  return frozenmargin_;
}
inline void PBMsgQueryRspFund::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.FrozenMargin)
}

// optional double FrozenCash = 14;
inline void PBMsgQueryRspFund::clear_frozencash() {
  frozencash_ = 0;
}
inline double PBMsgQueryRspFund::frozencash() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.FrozenCash)
  return frozencash_;
}
inline void PBMsgQueryRspFund::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.FrozenCash)
}

// optional double FrozenCommission = 15;
inline void PBMsgQueryRspFund::clear_frozencommission() {
  frozencommission_ = 0;
}
inline double PBMsgQueryRspFund::frozencommission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.FrozenCommission)
  return frozencommission_;
}
inline void PBMsgQueryRspFund::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.FrozenCommission)
}

// optional double CurrMargin = 16;
inline void PBMsgQueryRspFund::clear_currmargin() {
  currmargin_ = 0;
}
inline double PBMsgQueryRspFund::currmargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.CurrMargin)
  return currmargin_;
}
inline void PBMsgQueryRspFund::set_currmargin(double value) {
  
  currmargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.CurrMargin)
}

// optional double CashIn = 17;
inline void PBMsgQueryRspFund::clear_cashin() {
  cashin_ = 0;
}
inline double PBMsgQueryRspFund::cashin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.CashIn)
  return cashin_;
}
inline void PBMsgQueryRspFund::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.CashIn)
}

// optional double Commission = 18;
inline void PBMsgQueryRspFund::clear_commission() {
  commission_ = 0;
}
inline double PBMsgQueryRspFund::commission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Commission)
  return commission_;
}
inline void PBMsgQueryRspFund::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Commission)
}

// optional double CloseProfit = 19;
inline void PBMsgQueryRspFund::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double PBMsgQueryRspFund::closeprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.CloseProfit)
  return closeprofit_;
}
inline void PBMsgQueryRspFund::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.CloseProfit)
}

// optional double PositionProfit = 20;
inline void PBMsgQueryRspFund::clear_positionprofit() {
  positionprofit_ = 0;
}
inline double PBMsgQueryRspFund::positionprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PositionProfit)
  return positionprofit_;
}
inline void PBMsgQueryRspFund::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PositionProfit)
}

// optional double Balance = 21;
inline void PBMsgQueryRspFund::clear_balance() {
  balance_ = 0;
}
inline double PBMsgQueryRspFund::balance() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Balance)
  return balance_;
}
inline void PBMsgQueryRspFund::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Balance)
}

// optional double Available = 22;
inline void PBMsgQueryRspFund::clear_available() {
  available_ = 0;
}
inline double PBMsgQueryRspFund::available() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Available)
  return available_;
}
inline void PBMsgQueryRspFund::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Available)
}

// optional double WithdrawQuota = 23;
inline void PBMsgQueryRspFund::clear_withdrawquota() {
  withdrawquota_ = 0;
}
inline double PBMsgQueryRspFund::withdrawquota() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.WithdrawQuota)
  return withdrawquota_;
}
inline void PBMsgQueryRspFund::set_withdrawquota(double value) {
  
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.WithdrawQuota)
}

// optional double Reserve = 24;
inline void PBMsgQueryRspFund::clear_reserve() {
  reserve_ = 0;
}
inline double PBMsgQueryRspFund::reserve() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Reserve)
  return reserve_;
}
inline void PBMsgQueryRspFund::set_reserve(double value) {
  
  reserve_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Reserve)
}

// optional string TradingDay = 25;
inline void PBMsgQueryRspFund::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgQueryRspFund::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspFund::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}
inline void PBMsgQueryRspFund::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}
inline void PBMsgQueryRspFund::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}
inline ::std::string* PBMsgQueryRspFund::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgQueryRspFund::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgQueryRspFund::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}

// optional int32 SettlementID = 26;
inline void PBMsgQueryRspFund::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 PBMsgQueryRspFund::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.SettlementID)
  return settlementid_;
}
inline void PBMsgQueryRspFund::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.SettlementID)
}

// optional double Credit = 27;
inline void PBMsgQueryRspFund::clear_credit() {
  credit_ = 0;
}
inline double PBMsgQueryRspFund::credit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Credit)
  return credit_;
}
inline void PBMsgQueryRspFund::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Credit)
}

// optional double Mortgage = 28;
inline void PBMsgQueryRspFund::clear_mortgage() {
  mortgage_ = 0;
}
inline double PBMsgQueryRspFund::mortgage() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Mortgage)
  return mortgage_;
}
inline void PBMsgQueryRspFund::set_mortgage(double value) {
  
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Mortgage)
}

// optional double ExchangeMargin = 29;
inline void PBMsgQueryRspFund::clear_exchangemargin() {
  exchangemargin_ = 0;
}
inline double PBMsgQueryRspFund::exchangemargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.ExchangeMargin)
  return exchangemargin_;
}
inline void PBMsgQueryRspFund::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.ExchangeMargin)
}

// optional double DeliveryMargin = 30;
inline void PBMsgQueryRspFund::clear_deliverymargin() {
  deliverymargin_ = 0;
}
inline double PBMsgQueryRspFund::deliverymargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.DeliveryMargin)
  return deliverymargin_;
}
inline void PBMsgQueryRspFund::set_deliverymargin(double value) {
  
  deliverymargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.DeliveryMargin)
}

// optional double ExchangeDeliveryMargin = 31;
inline void PBMsgQueryRspFund::clear_exchangedeliverymargin() {
  exchangedeliverymargin_ = 0;
}
inline double PBMsgQueryRspFund::exchangedeliverymargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.ExchangeDeliveryMargin)
  return exchangedeliverymargin_;
}
inline void PBMsgQueryRspFund::set_exchangedeliverymargin(double value) {
  
  exchangedeliverymargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.ExchangeDeliveryMargin)
}

// optional double ReserveBalance = 32;
inline void PBMsgQueryRspFund::clear_reservebalance() {
  reservebalance_ = 0;
}
inline double PBMsgQueryRspFund::reservebalance() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.ReserveBalance)
  return reservebalance_;
}
inline void PBMsgQueryRspFund::set_reservebalance(double value) {
  
  reservebalance_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.ReserveBalance)
}

// -------------------------------------------------------------------

// PBMsgOrderInsert

// optional string BrokerID = 2;
inline void PBMsgOrderInsert::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}
inline void PBMsgOrderInsert::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}
inline void PBMsgOrderInsert::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}
inline ::std::string* PBMsgOrderInsert::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgOrderInsert::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}
inline void PBMsgOrderInsert::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}
inline void PBMsgOrderInsert::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}
inline ::std::string* PBMsgOrderInsert::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}

// optional string InstrumentID = 4;
inline void PBMsgOrderInsert::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}
inline void PBMsgOrderInsert::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}
inline void PBMsgOrderInsert::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}
inline ::std::string* PBMsgOrderInsert::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}

// optional string OrderRef = 5;
inline void PBMsgOrderInsert::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}
inline void PBMsgOrderInsert::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}
inline void PBMsgOrderInsert::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}
inline ::std::string* PBMsgOrderInsert::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}

// optional string UserID = 6;
inline void PBMsgOrderInsert::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.UserID)
}
inline void PBMsgOrderInsert::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.UserID)
}
inline void PBMsgOrderInsert::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.UserID)
}
inline ::std::string* PBMsgOrderInsert::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.UserID)
}

// optional string OrderPriceType = 7;
inline void PBMsgOrderInsert::clear_orderpricetype() {
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::orderpricetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
  return orderpricetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_orderpricetype(const ::std::string& value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}
inline void PBMsgOrderInsert::set_orderpricetype(const char* value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}
inline void PBMsgOrderInsert::set_orderpricetype(const char* value, size_t size) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}
inline ::std::string* PBMsgOrderInsert::mutable_orderpricetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
  return orderpricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_orderpricetype() {
  
  return orderpricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_orderpricetype(::std::string* orderpricetype) {
  if (orderpricetype != NULL) {
    
  } else {
    
  }
  orderpricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderpricetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}

// optional string Direction = 8;
inline void PBMsgOrderInsert::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::direction() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.Direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.Direction)
}
inline void PBMsgOrderInsert::set_direction(const char* value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.Direction)
}
inline void PBMsgOrderInsert::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.Direction)
}
inline ::std::string* PBMsgOrderInsert::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.Direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_direction() {
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.Direction)
}

// optional string CombOffsetFlag = 9;
inline void PBMsgOrderInsert::clear_comboffsetflag() {
  comboffsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::comboffsetflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
  return comboffsetflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_comboffsetflag(const ::std::string& value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}
inline void PBMsgOrderInsert::set_comboffsetflag(const char* value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}
inline void PBMsgOrderInsert::set_comboffsetflag(const char* value, size_t size) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}
inline ::std::string* PBMsgOrderInsert::mutable_comboffsetflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
  return comboffsetflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_comboffsetflag() {
  
  return comboffsetflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_comboffsetflag(::std::string* comboffsetflag) {
  if (comboffsetflag != NULL) {
    
  } else {
    
  }
  comboffsetflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comboffsetflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}

// optional string CombHedgeFlag = 10;
inline void PBMsgOrderInsert::clear_combhedgeflag() {
  combhedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::combhedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
  return combhedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_combhedgeflag(const ::std::string& value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}
inline void PBMsgOrderInsert::set_combhedgeflag(const char* value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}
inline void PBMsgOrderInsert::set_combhedgeflag(const char* value, size_t size) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}
inline ::std::string* PBMsgOrderInsert::mutable_combhedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
  return combhedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_combhedgeflag() {
  
  return combhedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_combhedgeflag(::std::string* combhedgeflag) {
  if (combhedgeflag != NULL) {
    
  } else {
    
  }
  combhedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combhedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}

// optional double LimitPrice = 11;
inline void PBMsgOrderInsert::clear_limitprice() {
  limitprice_ = 0;
}
inline double PBMsgOrderInsert::limitprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.LimitPrice)
  return limitprice_;
}
inline void PBMsgOrderInsert::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.LimitPrice)
}

// optional int32 VolumeTotalOriginal = 12;
inline void PBMsgOrderInsert::clear_volumetotaloriginal() {
  volumetotaloriginal_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderInsert::volumetotaloriginal() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.VolumeTotalOriginal)
  return volumetotaloriginal_;
}
inline void PBMsgOrderInsert::set_volumetotaloriginal(::google::protobuf::int32 value) {
  
  volumetotaloriginal_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.VolumeTotalOriginal)
}

// optional string TimeCondition = 13;
inline void PBMsgOrderInsert::clear_timecondition() {
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::timecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
  return timecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_timecondition(const ::std::string& value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}
inline void PBMsgOrderInsert::set_timecondition(const char* value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}
inline void PBMsgOrderInsert::set_timecondition(const char* value, size_t size) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}
inline ::std::string* PBMsgOrderInsert::mutable_timecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
  return timecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_timecondition() {
  
  return timecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_timecondition(::std::string* timecondition) {
  if (timecondition != NULL) {
    
  } else {
    
  }
  timecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}

// optional string GTDDate = 14;
inline void PBMsgOrderInsert::clear_gtddate() {
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::gtddate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.GTDDate)
  return gtddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_gtddate(const ::std::string& value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}
inline void PBMsgOrderInsert::set_gtddate(const char* value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}
inline void PBMsgOrderInsert::set_gtddate(const char* value, size_t size) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}
inline ::std::string* PBMsgOrderInsert::mutable_gtddate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.GTDDate)
  return gtddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_gtddate() {
  
  return gtddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_gtddate(::std::string* gtddate) {
  if (gtddate != NULL) {
    
  } else {
    
  }
  gtddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtddate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}

// optional string VolumeCondition = 15;
inline void PBMsgOrderInsert::clear_volumecondition() {
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::volumecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
  return volumecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_volumecondition(const ::std::string& value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}
inline void PBMsgOrderInsert::set_volumecondition(const char* value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}
inline void PBMsgOrderInsert::set_volumecondition(const char* value, size_t size) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}
inline ::std::string* PBMsgOrderInsert::mutable_volumecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
  return volumecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_volumecondition() {
  
  return volumecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_volumecondition(::std::string* volumecondition) {
  if (volumecondition != NULL) {
    
  } else {
    
  }
  volumecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}

// optional int32 MinVolume = 16;
inline void PBMsgOrderInsert::clear_minvolume() {
  minvolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderInsert::minvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.MinVolume)
  return minvolume_;
}
inline void PBMsgOrderInsert::set_minvolume(::google::protobuf::int32 value) {
  
  minvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.MinVolume)
}

// optional string ContingentCondition = 17;
inline void PBMsgOrderInsert::clear_contingentcondition() {
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::contingentcondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
  return contingentcondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_contingentcondition(const ::std::string& value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}
inline void PBMsgOrderInsert::set_contingentcondition(const char* value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}
inline void PBMsgOrderInsert::set_contingentcondition(const char* value, size_t size) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}
inline ::std::string* PBMsgOrderInsert::mutable_contingentcondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
  return contingentcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_contingentcondition() {
  
  return contingentcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_contingentcondition(::std::string* contingentcondition) {
  if (contingentcondition != NULL) {
    
  } else {
    
  }
  contingentcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contingentcondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}

// optional double StopPrice = 18;
inline void PBMsgOrderInsert::clear_stopprice() {
  stopprice_ = 0;
}
inline double PBMsgOrderInsert::stopprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.StopPrice)
  return stopprice_;
}
inline void PBMsgOrderInsert::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.StopPrice)
}

// optional string ForceCloseReason = 19;
inline void PBMsgOrderInsert::clear_forceclosereason() {
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::forceclosereason() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
  return forceclosereason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_forceclosereason(const ::std::string& value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}
inline void PBMsgOrderInsert::set_forceclosereason(const char* value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}
inline void PBMsgOrderInsert::set_forceclosereason(const char* value, size_t size) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}
inline ::std::string* PBMsgOrderInsert::mutable_forceclosereason() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
  return forceclosereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_forceclosereason() {
  
  return forceclosereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_forceclosereason(::std::string* forceclosereason) {
  if (forceclosereason != NULL) {
    
  } else {
    
  }
  forceclosereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forceclosereason);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}

// optional int32 IsAutoSuspend = 20;
inline void PBMsgOrderInsert::clear_isautosuspend() {
  isautosuspend_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderInsert::isautosuspend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.IsAutoSuspend)
  return isautosuspend_;
}
inline void PBMsgOrderInsert::set_isautosuspend(::google::protobuf::int32 value) {
  
  isautosuspend_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.IsAutoSuspend)
}

// optional string BusinessUnit = 21;
inline void PBMsgOrderInsert::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderInsert::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}
inline void PBMsgOrderInsert::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}
inline void PBMsgOrderInsert::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}
inline ::std::string* PBMsgOrderInsert::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderInsert::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderInsert::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}

// optional int32 RequestID = 22;
inline void PBMsgOrderInsert::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderInsert::requestid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.RequestID)
  return requestid_;
}
inline void PBMsgOrderInsert::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.RequestID)
}

// optional int32 UserForceClose = 23;
inline void PBMsgOrderInsert::clear_userforceclose() {
  userforceclose_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderInsert::userforceclose() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.UserForceClose)
  return userforceclose_;
}
inline void PBMsgOrderInsert::set_userforceclose(::google::protobuf::int32 value) {
  
  userforceclose_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.UserForceClose)
}

// optional int32 IsSwapOrder = 24;
inline void PBMsgOrderInsert::clear_isswaporder() {
  isswaporder_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderInsert::isswaporder() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.IsSwapOrder)
  return isswaporder_;
}
inline void PBMsgOrderInsert::set_isswaporder(::google::protobuf::int32 value) {
  
  isswaporder_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.IsSwapOrder)
}

// -------------------------------------------------------------------

// PBMsgOrderAction

// optional string BrokerID = 2;
inline void PBMsgOrderAction::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.BrokerID)
}
inline void PBMsgOrderAction::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.BrokerID)
}
inline void PBMsgOrderAction::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.BrokerID)
}
inline ::std::string* PBMsgOrderAction::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgOrderAction::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.InvestorID)
}
inline void PBMsgOrderAction::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.InvestorID)
}
inline void PBMsgOrderAction::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.InvestorID)
}
inline ::std::string* PBMsgOrderAction::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.InvestorID)
}

// optional int32 OrderActionRef = 4;
inline void PBMsgOrderAction::clear_orderactionref() {
  orderactionref_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderAction::orderactionref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderActionRef)
  return orderactionref_;
}
inline void PBMsgOrderAction::set_orderactionref(::google::protobuf::int32 value) {
  
  orderactionref_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderActionRef)
}

// optional string OrderRef = 5;
inline void PBMsgOrderAction::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderRef)
}
inline void PBMsgOrderAction::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderRef)
}
inline void PBMsgOrderAction::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderRef)
}
inline ::std::string* PBMsgOrderAction::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderRef)
}

// optional int32 RequestID = 6;
inline void PBMsgOrderAction::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderAction::requestid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.RequestID)
  return requestid_;
}
inline void PBMsgOrderAction::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.RequestID)
}

// optional int32 FrontID = 7;
inline void PBMsgOrderAction::clear_frontid() {
  frontid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderAction::frontid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.FrontID)
  return frontid_;
}
inline void PBMsgOrderAction::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.FrontID)
}

// optional int32 SessionID = 8;
inline void PBMsgOrderAction::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderAction::sessionid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.SessionID)
  return sessionid_;
}
inline void PBMsgOrderAction::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.SessionID)
}

// optional string ExchangeID = 9;
inline void PBMsgOrderAction::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}
inline void PBMsgOrderAction::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}
inline void PBMsgOrderAction::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}
inline ::std::string* PBMsgOrderAction::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}

// optional string OrderSysID = 10;
inline void PBMsgOrderAction::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}
inline void PBMsgOrderAction::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}
inline void PBMsgOrderAction::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}
inline ::std::string* PBMsgOrderAction::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}

// optional string ActionFlag = 11;
inline void PBMsgOrderAction::clear_actionflag() {
  actionflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::actionflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionFlag)
  return actionflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_actionflag(const ::std::string& value) {
  
  actionflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}
inline void PBMsgOrderAction::set_actionflag(const char* value) {
  
  actionflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}
inline void PBMsgOrderAction::set_actionflag(const char* value, size_t size) {
  
  actionflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}
inline ::std::string* PBMsgOrderAction::mutable_actionflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionFlag)
  return actionflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_actionflag() {
  
  return actionflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_actionflag(::std::string* actionflag) {
  if (actionflag != NULL) {
    
  } else {
    
  }
  actionflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actionflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}

// optional double LimitPrice = 12;
inline void PBMsgOrderAction::clear_limitprice() {
  limitprice_ = 0;
}
inline double PBMsgOrderAction::limitprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.LimitPrice)
  return limitprice_;
}
inline void PBMsgOrderAction::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.LimitPrice)
}

// optional int32 VolumeChange = 13;
inline void PBMsgOrderAction::clear_volumechange() {
  volumechange_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderAction::volumechange() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.VolumeChange)
  return volumechange_;
}
inline void PBMsgOrderAction::set_volumechange(::google::protobuf::int32 value) {
  
  volumechange_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.VolumeChange)
}

// optional string ActionDate = 14;
inline void PBMsgOrderAction::clear_actiondate() {
  actiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::actiondate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionDate)
  return actiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_actiondate(const ::std::string& value) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionDate)
}
inline void PBMsgOrderAction::set_actiondate(const char* value) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionDate)
}
inline void PBMsgOrderAction::set_actiondate(const char* value, size_t size) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionDate)
}
inline ::std::string* PBMsgOrderAction::mutable_actiondate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionDate)
  return actiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_actiondate() {
  
  return actiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_actiondate(::std::string* actiondate) {
  if (actiondate != NULL) {
    
  } else {
    
  }
  actiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actiondate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionDate)
}

// optional string ActionTime = 15;
inline void PBMsgOrderAction::clear_actiontime() {
  actiontime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::actiontime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionTime)
  return actiontime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_actiontime(const ::std::string& value) {
  
  actiontime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionTime)
}
inline void PBMsgOrderAction::set_actiontime(const char* value) {
  
  actiontime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionTime)
}
inline void PBMsgOrderAction::set_actiontime(const char* value, size_t size) {
  
  actiontime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionTime)
}
inline ::std::string* PBMsgOrderAction::mutable_actiontime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionTime)
  return actiontime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_actiontime() {
  
  return actiontime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_actiontime(::std::string* actiontime) {
  if (actiontime != NULL) {
    
  } else {
    
  }
  actiontime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actiontime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionTime)
}

// optional string TraderID = 16;
inline void PBMsgOrderAction::clear_traderid() {
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::traderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.TraderID)
  return traderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_traderid(const ::std::string& value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.TraderID)
}
inline void PBMsgOrderAction::set_traderid(const char* value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.TraderID)
}
inline void PBMsgOrderAction::set_traderid(const char* value, size_t size) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.TraderID)
}
inline ::std::string* PBMsgOrderAction::mutable_traderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.TraderID)
  return traderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_traderid() {
  
  return traderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_traderid(::std::string* traderid) {
  if (traderid != NULL) {
    
  } else {
    
  }
  traderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.TraderID)
}

// optional int32 InstallID = 17;
inline void PBMsgOrderAction::clear_installid() {
  installid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderAction::installid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.InstallID)
  return installid_;
}
inline void PBMsgOrderAction::set_installid(::google::protobuf::int32 value) {
  
  installid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.InstallID)
}

// optional string OrderLocalID = 18;
inline void PBMsgOrderAction::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::orderlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
  return orderlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}
inline void PBMsgOrderAction::set_orderlocalid(const char* value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}
inline void PBMsgOrderAction::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}
inline ::std::string* PBMsgOrderAction::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_orderlocalid() {
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}

// optional string ActionLocalID = 19;
inline void PBMsgOrderAction::clear_actionlocalid() {
  actionlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::actionlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
  return actionlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_actionlocalid(const ::std::string& value) {
  
  actionlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}
inline void PBMsgOrderAction::set_actionlocalid(const char* value) {
  
  actionlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}
inline void PBMsgOrderAction::set_actionlocalid(const char* value, size_t size) {
  
  actionlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}
inline ::std::string* PBMsgOrderAction::mutable_actionlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
  return actionlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_actionlocalid() {
  
  return actionlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_actionlocalid(::std::string* actionlocalid) {
  if (actionlocalid != NULL) {
    
  } else {
    
  }
  actionlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actionlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}

// optional string ParticipantID = 20;
inline void PBMsgOrderAction::clear_participantid() {
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::participantid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ParticipantID)
  return participantid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_participantid(const ::std::string& value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}
inline void PBMsgOrderAction::set_participantid(const char* value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}
inline void PBMsgOrderAction::set_participantid(const char* value, size_t size) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}
inline ::std::string* PBMsgOrderAction::mutable_participantid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ParticipantID)
  return participantid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_participantid() {
  
  return participantid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_participantid(::std::string* participantid) {
  if (participantid != NULL) {
    
  } else {
    
  }
  participantid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participantid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}

// optional string ClientID = 21;
inline void PBMsgOrderAction::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::clientid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ClientID)
}
inline void PBMsgOrderAction::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ClientID)
}
inline void PBMsgOrderAction::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ClientID)
}
inline ::std::string* PBMsgOrderAction::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_clientid() {
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ClientID)
}

// optional string BusinessUnit = 22;
inline void PBMsgOrderAction::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}
inline void PBMsgOrderAction::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}
inline void PBMsgOrderAction::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}
inline ::std::string* PBMsgOrderAction::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}

// optional string OrderActionStatus = 23;
inline void PBMsgOrderAction::clear_orderactionstatus() {
  orderactionstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::orderactionstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
  return orderactionstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_orderactionstatus(const ::std::string& value) {
  
  orderactionstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}
inline void PBMsgOrderAction::set_orderactionstatus(const char* value) {
  
  orderactionstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}
inline void PBMsgOrderAction::set_orderactionstatus(const char* value, size_t size) {
  
  orderactionstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}
inline ::std::string* PBMsgOrderAction::mutable_orderactionstatus() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
  return orderactionstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_orderactionstatus() {
  
  return orderactionstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_orderactionstatus(::std::string* orderactionstatus) {
  if (orderactionstatus != NULL) {
    
  } else {
    
  }
  orderactionstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderactionstatus);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}

// optional string UserID = 24;
inline void PBMsgOrderAction::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.UserID)
}
inline void PBMsgOrderAction::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.UserID)
}
inline void PBMsgOrderAction::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.UserID)
}
inline ::std::string* PBMsgOrderAction::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.UserID)
}

// optional bytes StatusMsg = 25;
inline void PBMsgOrderAction::clear_statusmsg() {
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::statusmsg() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.StatusMsg)
  return statusmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_statusmsg(const ::std::string& value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}
inline void PBMsgOrderAction::set_statusmsg(const char* value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}
inline void PBMsgOrderAction::set_statusmsg(const void* value, size_t size) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}
inline ::std::string* PBMsgOrderAction::mutable_statusmsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.StatusMsg)
  return statusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_statusmsg() {
  
  return statusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg != NULL) {
    
  } else {
    
  }
  statusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmsg);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}

// optional string InstrumentID = 26;
inline void PBMsgOrderAction::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderAction::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}
inline void PBMsgOrderAction::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}
inline void PBMsgOrderAction::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}
inline ::std::string* PBMsgOrderAction::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderAction::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderAction::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}

// -------------------------------------------------------------------

// PBMsgOrderRtn

// optional int32 EOF = 1;
inline void PBMsgOrderRtn::clear_eof() {
  eof_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.EOF)
  return eof_;
}
inline void PBMsgOrderRtn::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.EOF)
}

// optional string BrokerID = 2;
inline void PBMsgOrderRtn::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}
inline void PBMsgOrderRtn::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}
inline void PBMsgOrderRtn::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}
inline ::std::string* PBMsgOrderRtn::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgOrderRtn::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}
inline void PBMsgOrderRtn::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}
inline void PBMsgOrderRtn::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}
inline ::std::string* PBMsgOrderRtn::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}

// optional string InstrumentID = 4;
inline void PBMsgOrderRtn::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}
inline void PBMsgOrderRtn::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}
inline void PBMsgOrderRtn::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}
inline ::std::string* PBMsgOrderRtn::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}

// optional string OrderRef = 5;
inline void PBMsgOrderRtn::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}
inline void PBMsgOrderRtn::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}
inline void PBMsgOrderRtn::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}
inline ::std::string* PBMsgOrderRtn::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}

// optional string UserID = 6;
inline void PBMsgOrderRtn::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UserID)
}
inline void PBMsgOrderRtn::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.UserID)
}
inline void PBMsgOrderRtn::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.UserID)
}
inline ::std::string* PBMsgOrderRtn::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.UserID)
}

// optional string OrderPriceType = 7;
inline void PBMsgOrderRtn::clear_orderpricetype() {
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::orderpricetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
  return orderpricetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_orderpricetype(const ::std::string& value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}
inline void PBMsgOrderRtn::set_orderpricetype(const char* value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}
inline void PBMsgOrderRtn::set_orderpricetype(const char* value, size_t size) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}
inline ::std::string* PBMsgOrderRtn::mutable_orderpricetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
  return orderpricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_orderpricetype() {
  
  return orderpricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_orderpricetype(::std::string* orderpricetype) {
  if (orderpricetype != NULL) {
    
  } else {
    
  }
  orderpricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderpricetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}

// optional string Direction = 8;
inline void PBMsgOrderRtn::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::direction() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.Direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.Direction)
}
inline void PBMsgOrderRtn::set_direction(const char* value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.Direction)
}
inline void PBMsgOrderRtn::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.Direction)
}
inline ::std::string* PBMsgOrderRtn::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.Direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_direction() {
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.Direction)
}

// optional string CombOffsetFlag = 9;
inline void PBMsgOrderRtn::clear_comboffsetflag() {
  comboffsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::comboffsetflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
  return comboffsetflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_comboffsetflag(const ::std::string& value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}
inline void PBMsgOrderRtn::set_comboffsetflag(const char* value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}
inline void PBMsgOrderRtn::set_comboffsetflag(const char* value, size_t size) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}
inline ::std::string* PBMsgOrderRtn::mutable_comboffsetflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
  return comboffsetflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_comboffsetflag() {
  
  return comboffsetflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_comboffsetflag(::std::string* comboffsetflag) {
  if (comboffsetflag != NULL) {
    
  } else {
    
  }
  comboffsetflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comboffsetflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}

// optional string CombHedgeFlag = 10;
inline void PBMsgOrderRtn::clear_combhedgeflag() {
  combhedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::combhedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
  return combhedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_combhedgeflag(const ::std::string& value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}
inline void PBMsgOrderRtn::set_combhedgeflag(const char* value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}
inline void PBMsgOrderRtn::set_combhedgeflag(const char* value, size_t size) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}
inline ::std::string* PBMsgOrderRtn::mutable_combhedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
  return combhedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_combhedgeflag() {
  
  return combhedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_combhedgeflag(::std::string* combhedgeflag) {
  if (combhedgeflag != NULL) {
    
  } else {
    
  }
  combhedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combhedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}

// optional double LimitPrice = 11;
inline void PBMsgOrderRtn::clear_limitprice() {
  limitprice_ = 0;
}
inline double PBMsgOrderRtn::limitprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.LimitPrice)
  return limitprice_;
}
inline void PBMsgOrderRtn::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.LimitPrice)
}

// optional int32 VolumeTotalOriginal = 12;
inline void PBMsgOrderRtn::clear_volumetotaloriginal() {
  volumetotaloriginal_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::volumetotaloriginal() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeTotalOriginal)
  return volumetotaloriginal_;
}
inline void PBMsgOrderRtn::set_volumetotaloriginal(::google::protobuf::int32 value) {
  
  volumetotaloriginal_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeTotalOriginal)
}

// optional string TimeCondition = 13;
inline void PBMsgOrderRtn::clear_timecondition() {
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::timecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
  return timecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_timecondition(const ::std::string& value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}
inline void PBMsgOrderRtn::set_timecondition(const char* value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}
inline void PBMsgOrderRtn::set_timecondition(const char* value, size_t size) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}
inline ::std::string* PBMsgOrderRtn::mutable_timecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
  return timecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_timecondition() {
  
  return timecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_timecondition(::std::string* timecondition) {
  if (timecondition != NULL) {
    
  } else {
    
  }
  timecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}

// optional string GTDDate = 14;
inline void PBMsgOrderRtn::clear_gtddate() {
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::gtddate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.GTDDate)
  return gtddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_gtddate(const ::std::string& value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}
inline void PBMsgOrderRtn::set_gtddate(const char* value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}
inline void PBMsgOrderRtn::set_gtddate(const char* value, size_t size) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}
inline ::std::string* PBMsgOrderRtn::mutable_gtddate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.GTDDate)
  return gtddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_gtddate() {
  
  return gtddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_gtddate(::std::string* gtddate) {
  if (gtddate != NULL) {
    
  } else {
    
  }
  gtddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtddate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}

// optional string VolumeCondition = 15;
inline void PBMsgOrderRtn::clear_volumecondition() {
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::volumecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
  return volumecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_volumecondition(const ::std::string& value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}
inline void PBMsgOrderRtn::set_volumecondition(const char* value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}
inline void PBMsgOrderRtn::set_volumecondition(const char* value, size_t size) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}
inline ::std::string* PBMsgOrderRtn::mutable_volumecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
  return volumecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_volumecondition() {
  
  return volumecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_volumecondition(::std::string* volumecondition) {
  if (volumecondition != NULL) {
    
  } else {
    
  }
  volumecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}

// optional int32 MinVolume = 16;
inline void PBMsgOrderRtn::clear_minvolume() {
  minvolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::minvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.MinVolume)
  return minvolume_;
}
inline void PBMsgOrderRtn::set_minvolume(::google::protobuf::int32 value) {
  
  minvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.MinVolume)
}

// optional string ContingentCondition = 17;
inline void PBMsgOrderRtn::clear_contingentcondition() {
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::contingentcondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
  return contingentcondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_contingentcondition(const ::std::string& value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}
inline void PBMsgOrderRtn::set_contingentcondition(const char* value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}
inline void PBMsgOrderRtn::set_contingentcondition(const char* value, size_t size) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}
inline ::std::string* PBMsgOrderRtn::mutable_contingentcondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
  return contingentcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_contingentcondition() {
  
  return contingentcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_contingentcondition(::std::string* contingentcondition) {
  if (contingentcondition != NULL) {
    
  } else {
    
  }
  contingentcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contingentcondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}

// optional double StopPrice = 18;
inline void PBMsgOrderRtn::clear_stopprice() {
  stopprice_ = 0;
}
inline double PBMsgOrderRtn::stopprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.StopPrice)
  return stopprice_;
}
inline void PBMsgOrderRtn::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.StopPrice)
}

// optional string ForceCloseReason = 19;
inline void PBMsgOrderRtn::clear_forceclosereason() {
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::forceclosereason() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
  return forceclosereason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_forceclosereason(const ::std::string& value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}
inline void PBMsgOrderRtn::set_forceclosereason(const char* value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}
inline void PBMsgOrderRtn::set_forceclosereason(const char* value, size_t size) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}
inline ::std::string* PBMsgOrderRtn::mutable_forceclosereason() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
  return forceclosereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_forceclosereason() {
  
  return forceclosereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_forceclosereason(::std::string* forceclosereason) {
  if (forceclosereason != NULL) {
    
  } else {
    
  }
  forceclosereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forceclosereason);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}

// optional int32 IsAutoSuspend = 20;
inline void PBMsgOrderRtn::clear_isautosuspend() {
  isautosuspend_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::isautosuspend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.IsAutoSuspend)
  return isautosuspend_;
}
inline void PBMsgOrderRtn::set_isautosuspend(::google::protobuf::int32 value) {
  
  isautosuspend_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.IsAutoSuspend)
}

// optional string BusinessUnit = 21;
inline void PBMsgOrderRtn::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}
inline void PBMsgOrderRtn::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}
inline void PBMsgOrderRtn::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}
inline ::std::string* PBMsgOrderRtn::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}

// optional int32 RequestID = 22;
inline void PBMsgOrderRtn::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::requestid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.RequestID)
  return requestid_;
}
inline void PBMsgOrderRtn::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.RequestID)
}

// optional string OrderLocalID = 23;
inline void PBMsgOrderRtn::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::orderlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
  return orderlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}
inline void PBMsgOrderRtn::set_orderlocalid(const char* value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}
inline void PBMsgOrderRtn::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}
inline ::std::string* PBMsgOrderRtn::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_orderlocalid() {
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}

// optional string ExchangeID = 24;
inline void PBMsgOrderRtn::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}
inline void PBMsgOrderRtn::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}
inline void PBMsgOrderRtn::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}
inline ::std::string* PBMsgOrderRtn::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}

// optional string ParticipantID = 25;
inline void PBMsgOrderRtn::clear_participantid() {
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::participantid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
  return participantid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_participantid(const ::std::string& value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}
inline void PBMsgOrderRtn::set_participantid(const char* value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}
inline void PBMsgOrderRtn::set_participantid(const char* value, size_t size) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}
inline ::std::string* PBMsgOrderRtn::mutable_participantid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
  return participantid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_participantid() {
  
  return participantid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_participantid(::std::string* participantid) {
  if (participantid != NULL) {
    
  } else {
    
  }
  participantid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participantid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}

// optional string ClientID = 26;
inline void PBMsgOrderRtn::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::clientid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ClientID)
}
inline void PBMsgOrderRtn::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ClientID)
}
inline void PBMsgOrderRtn::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ClientID)
}
inline ::std::string* PBMsgOrderRtn::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_clientid() {
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ClientID)
}

// optional string ExchangeInstID = 27;
inline void PBMsgOrderRtn::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}
inline void PBMsgOrderRtn::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}
inline void PBMsgOrderRtn::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}
inline ::std::string* PBMsgOrderRtn::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}

// optional string TraderID = 28;
inline void PBMsgOrderRtn::clear_traderid() {
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::traderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.TraderID)
  return traderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_traderid(const ::std::string& value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.TraderID)
}
inline void PBMsgOrderRtn::set_traderid(const char* value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.TraderID)
}
inline void PBMsgOrderRtn::set_traderid(const char* value, size_t size) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.TraderID)
}
inline ::std::string* PBMsgOrderRtn::mutable_traderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.TraderID)
  return traderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_traderid() {
  
  return traderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_traderid(::std::string* traderid) {
  if (traderid != NULL) {
    
  } else {
    
  }
  traderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.TraderID)
}

// optional int32 InstallID = 29;
inline void PBMsgOrderRtn::clear_installid() {
  installid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::installid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InstallID)
  return installid_;
}
inline void PBMsgOrderRtn::set_installid(::google::protobuf::int32 value) {
  
  installid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InstallID)
}

// optional string OrderSubmitStatus = 30;
inline void PBMsgOrderRtn::clear_ordersubmitstatus() {
  ordersubmitstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::ordersubmitstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
  return ordersubmitstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_ordersubmitstatus(const ::std::string& value) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}
inline void PBMsgOrderRtn::set_ordersubmitstatus(const char* value) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}
inline void PBMsgOrderRtn::set_ordersubmitstatus(const char* value, size_t size) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}
inline ::std::string* PBMsgOrderRtn::mutable_ordersubmitstatus() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
  return ordersubmitstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_ordersubmitstatus() {
  
  return ordersubmitstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_ordersubmitstatus(::std::string* ordersubmitstatus) {
  if (ordersubmitstatus != NULL) {
    
  } else {
    
  }
  ordersubmitstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersubmitstatus);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}

// optional int32 NotifySequence = 31;
inline void PBMsgOrderRtn::clear_notifysequence() {
  notifysequence_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::notifysequence() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.NotifySequence)
  return notifysequence_;
}
inline void PBMsgOrderRtn::set_notifysequence(::google::protobuf::int32 value) {
  
  notifysequence_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.NotifySequence)
}

// optional string TradingDay = 32;
inline void PBMsgOrderRtn::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}
inline void PBMsgOrderRtn::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}
inline void PBMsgOrderRtn::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}
inline ::std::string* PBMsgOrderRtn::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}

// optional int32 SettlementID = 33;
inline void PBMsgOrderRtn::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SettlementID)
  return settlementid_;
}
inline void PBMsgOrderRtn::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SettlementID)
}

// optional string OrderSysID = 34;
inline void PBMsgOrderRtn::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}
inline void PBMsgOrderRtn::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}
inline void PBMsgOrderRtn::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}
inline ::std::string* PBMsgOrderRtn::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}

// optional string OrderSource = 35;
inline void PBMsgOrderRtn::clear_ordersource() {
  ordersource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::ordersource() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderSource)
  return ordersource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_ordersource(const ::std::string& value) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}
inline void PBMsgOrderRtn::set_ordersource(const char* value) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}
inline void PBMsgOrderRtn::set_ordersource(const char* value, size_t size) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}
inline ::std::string* PBMsgOrderRtn::mutable_ordersource() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderSource)
  return ordersource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_ordersource() {
  
  return ordersource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_ordersource(::std::string* ordersource) {
  if (ordersource != NULL) {
    
  } else {
    
  }
  ordersource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersource);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}

// optional string OrderStatus = 36;
inline void PBMsgOrderRtn::clear_orderstatus() {
  orderstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::orderstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
  return orderstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_orderstatus(const ::std::string& value) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}
inline void PBMsgOrderRtn::set_orderstatus(const char* value) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}
inline void PBMsgOrderRtn::set_orderstatus(const char* value, size_t size) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}
inline ::std::string* PBMsgOrderRtn::mutable_orderstatus() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
  return orderstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_orderstatus() {
  
  return orderstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_orderstatus(::std::string* orderstatus) {
  if (orderstatus != NULL) {
    
  } else {
    
  }
  orderstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderstatus);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}

// optional string OrderType = 37;
inline void PBMsgOrderRtn::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::ordertype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderType)
  return ordertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_ordertype(const ::std::string& value) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderType)
}
inline void PBMsgOrderRtn::set_ordertype(const char* value) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderType)
}
inline void PBMsgOrderRtn::set_ordertype(const char* value, size_t size) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderType)
}
inline ::std::string* PBMsgOrderRtn::mutable_ordertype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderType)
  return ordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_ordertype() {
  
  return ordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_ordertype(::std::string* ordertype) {
  if (ordertype != NULL) {
    
  } else {
    
  }
  ordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderType)
}

// optional int32 VolumeTraded = 38;
inline void PBMsgOrderRtn::clear_volumetraded() {
  volumetraded_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::volumetraded() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeTraded)
  return volumetraded_;
}
inline void PBMsgOrderRtn::set_volumetraded(::google::protobuf::int32 value) {
  
  volumetraded_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeTraded)
}

// optional int32 VolumeTotal = 39;
inline void PBMsgOrderRtn::clear_volumetotal() {
  volumetotal_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::volumetotal() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeTotal)
  return volumetotal_;
}
inline void PBMsgOrderRtn::set_volumetotal(::google::protobuf::int32 value) {
  
  volumetotal_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeTotal)
}

// optional string InsertDate = 40;
inline void PBMsgOrderRtn::clear_insertdate() {
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::insertdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InsertDate)
  return insertdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_insertdate(const ::std::string& value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}
inline void PBMsgOrderRtn::set_insertdate(const char* value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}
inline void PBMsgOrderRtn::set_insertdate(const char* value, size_t size) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}
inline ::std::string* PBMsgOrderRtn::mutable_insertdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InsertDate)
  return insertdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_insertdate() {
  
  return insertdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_insertdate(::std::string* insertdate) {
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insertdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}

// optional string InsertTime = 41;
inline void PBMsgOrderRtn::clear_inserttime() {
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::inserttime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InsertTime)
  return inserttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_inserttime(const ::std::string& value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}
inline void PBMsgOrderRtn::set_inserttime(const char* value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}
inline void PBMsgOrderRtn::set_inserttime(const char* value, size_t size) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}
inline ::std::string* PBMsgOrderRtn::mutable_inserttime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InsertTime)
  return inserttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_inserttime() {
  
  return inserttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}

// optional string ActiveTime = 42;
inline void PBMsgOrderRtn::clear_activetime() {
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::activetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
  return activetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_activetime(const ::std::string& value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}
inline void PBMsgOrderRtn::set_activetime(const char* value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}
inline void PBMsgOrderRtn::set_activetime(const char* value, size_t size) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}
inline ::std::string* PBMsgOrderRtn::mutable_activetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
  return activetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_activetime() {
  
  return activetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_activetime(::std::string* activetime) {
  if (activetime != NULL) {
    
  } else {
    
  }
  activetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}

// optional string SuspendTime = 43;
inline void PBMsgOrderRtn::clear_suspendtime() {
  suspendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::suspendtime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
  return suspendtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_suspendtime(const ::std::string& value) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}
inline void PBMsgOrderRtn::set_suspendtime(const char* value) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}
inline void PBMsgOrderRtn::set_suspendtime(const char* value, size_t size) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}
inline ::std::string* PBMsgOrderRtn::mutable_suspendtime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
  return suspendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_suspendtime() {
  
  return suspendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_suspendtime(::std::string* suspendtime) {
  if (suspendtime != NULL) {
    
  } else {
    
  }
  suspendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suspendtime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}

// optional string UpdateTime = 44;
inline void PBMsgOrderRtn::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::updatetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
  return updatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}
inline void PBMsgOrderRtn::set_updatetime(const char* value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}
inline void PBMsgOrderRtn::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}
inline ::std::string* PBMsgOrderRtn::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_updatetime() {
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}

// optional string CancelTime = 45;
inline void PBMsgOrderRtn::clear_canceltime() {
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::canceltime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.CancelTime)
  return canceltime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_canceltime(const ::std::string& value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}
inline void PBMsgOrderRtn::set_canceltime(const char* value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}
inline void PBMsgOrderRtn::set_canceltime(const char* value, size_t size) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}
inline ::std::string* PBMsgOrderRtn::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.CancelTime)
  return canceltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_canceltime() {
  
  return canceltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}

// optional string ActiveTraderID = 46;
inline void PBMsgOrderRtn::clear_activetraderid() {
  activetraderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::activetraderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
  return activetraderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_activetraderid(const ::std::string& value) {
  
  activetraderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}
inline void PBMsgOrderRtn::set_activetraderid(const char* value) {
  
  activetraderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}
inline void PBMsgOrderRtn::set_activetraderid(const char* value, size_t size) {
  
  activetraderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}
inline ::std::string* PBMsgOrderRtn::mutable_activetraderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
  return activetraderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_activetraderid() {
  
  return activetraderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_activetraderid(::std::string* activetraderid) {
  if (activetraderid != NULL) {
    
  } else {
    
  }
  activetraderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetraderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}

// optional string ClearingPartID = 47;
inline void PBMsgOrderRtn::clear_clearingpartid() {
  clearingpartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::clearingpartid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
  return clearingpartid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_clearingpartid(const ::std::string& value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}
inline void PBMsgOrderRtn::set_clearingpartid(const char* value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}
inline void PBMsgOrderRtn::set_clearingpartid(const char* value, size_t size) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}
inline ::std::string* PBMsgOrderRtn::mutable_clearingpartid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
  return clearingpartid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_clearingpartid() {
  
  return clearingpartid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_clearingpartid(::std::string* clearingpartid) {
  if (clearingpartid != NULL) {
    
  } else {
    
  }
  clearingpartid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearingpartid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}

// optional int32 SequenceNo = 48;
inline void PBMsgOrderRtn::clear_sequenceno() {
  sequenceno_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::sequenceno() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SequenceNo)
  return sequenceno_;
}
inline void PBMsgOrderRtn::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SequenceNo)
}

// optional int32 FrontID = 49;
inline void PBMsgOrderRtn::clear_frontid() {
  frontid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::frontid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.FrontID)
  return frontid_;
}
inline void PBMsgOrderRtn::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.FrontID)
}

// optional int32 SessionID = 50;
inline void PBMsgOrderRtn::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::sessionid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SessionID)
  return sessionid_;
}
inline void PBMsgOrderRtn::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SessionID)
}

// optional string UserProductInfo = 51;
inline void PBMsgOrderRtn::clear_userproductinfo() {
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::userproductinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
  return userproductinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_userproductinfo(const ::std::string& value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}
inline void PBMsgOrderRtn::set_userproductinfo(const char* value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}
inline void PBMsgOrderRtn::set_userproductinfo(const char* value, size_t size) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}
inline ::std::string* PBMsgOrderRtn::mutable_userproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
  return userproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_userproductinfo() {
  
  return userproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_userproductinfo(::std::string* userproductinfo) {
  if (userproductinfo != NULL) {
    
  } else {
    
  }
  userproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userproductinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}

// optional bytes StatusMsg = 52;
inline void PBMsgOrderRtn::clear_statusmsg() {
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::statusmsg() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
  return statusmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_statusmsg(const ::std::string& value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}
inline void PBMsgOrderRtn::set_statusmsg(const char* value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}
inline void PBMsgOrderRtn::set_statusmsg(const void* value, size_t size) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}
inline ::std::string* PBMsgOrderRtn::mutable_statusmsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
  return statusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_statusmsg() {
  
  return statusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg != NULL) {
    
  } else {
    
  }
  statusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmsg);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}

// optional int32 UserForceClose = 53;
inline void PBMsgOrderRtn::clear_userforceclose() {
  userforceclose_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::userforceclose() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UserForceClose)
  return userforceclose_;
}
inline void PBMsgOrderRtn::set_userforceclose(::google::protobuf::int32 value) {
  
  userforceclose_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UserForceClose)
}

// optional string ActiveUserID = 54;
inline void PBMsgOrderRtn::clear_activeuserid() {
  activeuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::activeuserid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
  return activeuserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_activeuserid(const ::std::string& value) {
  
  activeuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}
inline void PBMsgOrderRtn::set_activeuserid(const char* value) {
  
  activeuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}
inline void PBMsgOrderRtn::set_activeuserid(const char* value, size_t size) {
  
  activeuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}
inline ::std::string* PBMsgOrderRtn::mutable_activeuserid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
  return activeuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_activeuserid() {
  
  return activeuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_activeuserid(::std::string* activeuserid) {
  if (activeuserid != NULL) {
    
  } else {
    
  }
  activeuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activeuserid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}

// optional int32 BrokerOrderSeq = 55;
inline void PBMsgOrderRtn::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.BrokerOrderSeq)
  return brokerorderseq_;
}
inline void PBMsgOrderRtn::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.BrokerOrderSeq)
}

// optional string RelativeOrderSysID = 56;
inline void PBMsgOrderRtn::clear_relativeordersysid() {
  relativeordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgOrderRtn::relativeordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
  return relativeordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_relativeordersysid(const ::std::string& value) {
  
  relativeordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}
inline void PBMsgOrderRtn::set_relativeordersysid(const char* value) {
  
  relativeordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}
inline void PBMsgOrderRtn::set_relativeordersysid(const char* value, size_t size) {
  
  relativeordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}
inline ::std::string* PBMsgOrderRtn::mutable_relativeordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
  return relativeordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgOrderRtn::release_relativeordersysid() {
  
  return relativeordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgOrderRtn::set_allocated_relativeordersysid(::std::string* relativeordersysid) {
  if (relativeordersysid != NULL) {
    
  } else {
    
  }
  relativeordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativeordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}

// optional int32 ZCETotalTradedVolume = 57;
inline void PBMsgOrderRtn::clear_zcetotaltradedvolume() {
  zcetotaltradedvolume_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::zcetotaltradedvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ZCETotalTradedVolume)
  return zcetotaltradedvolume_;
}
inline void PBMsgOrderRtn::set_zcetotaltradedvolume(::google::protobuf::int32 value) {
  
  zcetotaltradedvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ZCETotalTradedVolume)
}

// optional int32 IsSwapOrder = 58;
inline void PBMsgOrderRtn::clear_isswaporder() {
  isswaporder_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::isswaporder() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.IsSwapOrder)
  return isswaporder_;
}
inline void PBMsgOrderRtn::set_isswaporder(::google::protobuf::int32 value) {
  
  isswaporder_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.IsSwapOrder)
}

// optional int32 IOrderStatus = 59;
inline void PBMsgOrderRtn::clear_iorderstatus() {
  iorderstatus_ = 0;
}
inline ::google::protobuf::int32 PBMsgOrderRtn::iorderstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.IOrderStatus)
  return iorderstatus_;
}
inline void PBMsgOrderRtn::set_iorderstatus(::google::protobuf::int32 value) {
  
  iorderstatus_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.IOrderStatus)
}

// -------------------------------------------------------------------

// PBMsgTradeRtn

// optional int32 EOF = 1;
inline void PBMsgTradeRtn::clear_eof() {
  eof_ = 0;
}
inline ::google::protobuf::int32 PBMsgTradeRtn::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.EOF)
  return eof_;
}
inline void PBMsgTradeRtn::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.EOF)
}

// optional string BrokerID = 2;
inline void PBMsgTradeRtn::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}
inline void PBMsgTradeRtn::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}
inline void PBMsgTradeRtn::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}
inline ::std::string* PBMsgTradeRtn::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgTradeRtn::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}
inline void PBMsgTradeRtn::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}
inline void PBMsgTradeRtn::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}
inline ::std::string* PBMsgTradeRtn::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}

// optional string InstrumentID = 4;
inline void PBMsgTradeRtn::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}
inline void PBMsgTradeRtn::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}
inline void PBMsgTradeRtn::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}
inline ::std::string* PBMsgTradeRtn::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}

// optional string OrderRef = 5;
inline void PBMsgTradeRtn::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}
inline void PBMsgTradeRtn::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}
inline void PBMsgTradeRtn::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}
inline ::std::string* PBMsgTradeRtn::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}

// optional string UserID = 6;
inline void PBMsgTradeRtn::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.UserID)
}
inline void PBMsgTradeRtn::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.UserID)
}
inline void PBMsgTradeRtn::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.UserID)
}
inline ::std::string* PBMsgTradeRtn::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.UserID)
}

// optional string ExchangeID = 7;
inline void PBMsgTradeRtn::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}
inline void PBMsgTradeRtn::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}
inline void PBMsgTradeRtn::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}
inline ::std::string* PBMsgTradeRtn::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}

// optional string TradeID = 8;
inline void PBMsgTradeRtn::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeID)
  return tradeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeID)
}
inline void PBMsgTradeRtn::set_tradeid(const char* value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeID)
}
inline void PBMsgTradeRtn::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeID)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeID)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradeid() {
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeID)
}

// optional string Direction = 9;
inline void PBMsgTradeRtn::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::direction() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.Direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.Direction)
}
inline void PBMsgTradeRtn::set_direction(const char* value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.Direction)
}
inline void PBMsgTradeRtn::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.Direction)
}
inline ::std::string* PBMsgTradeRtn::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.Direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_direction() {
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.Direction)
}

// optional string OrderSysID = 10;
inline void PBMsgTradeRtn::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}
inline void PBMsgTradeRtn::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}
inline void PBMsgTradeRtn::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}
inline ::std::string* PBMsgTradeRtn::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}

// optional string ParticipantID = 11;
inline void PBMsgTradeRtn::clear_participantid() {
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::participantid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
  return participantid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_participantid(const ::std::string& value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}
inline void PBMsgTradeRtn::set_participantid(const char* value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}
inline void PBMsgTradeRtn::set_participantid(const char* value, size_t size) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}
inline ::std::string* PBMsgTradeRtn::mutable_participantid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
  return participantid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_participantid() {
  
  return participantid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_participantid(::std::string* participantid) {
  if (participantid != NULL) {
    
  } else {
    
  }
  participantid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participantid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}

// optional string ClientID = 12;
inline void PBMsgTradeRtn::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::clientid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ClientID)
}
inline void PBMsgTradeRtn::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ClientID)
}
inline void PBMsgTradeRtn::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ClientID)
}
inline ::std::string* PBMsgTradeRtn::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_clientid() {
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ClientID)
}

// optional string TradingRole = 13;
inline void PBMsgTradeRtn::clear_tradingrole() {
  tradingrole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradingrole() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradingRole)
  return tradingrole_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradingrole(const ::std::string& value) {
  
  tradingrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}
inline void PBMsgTradeRtn::set_tradingrole(const char* value) {
  
  tradingrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}
inline void PBMsgTradeRtn::set_tradingrole(const char* value, size_t size) {
  
  tradingrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradingrole() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradingRole)
  return tradingrole_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradingrole() {
  
  return tradingrole_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradingrole(::std::string* tradingrole) {
  if (tradingrole != NULL) {
    
  } else {
    
  }
  tradingrole_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingrole);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}

// optional string ExchangeInstID = 14;
inline void PBMsgTradeRtn::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}
inline void PBMsgTradeRtn::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}
inline void PBMsgTradeRtn::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}
inline ::std::string* PBMsgTradeRtn::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}

// optional string OffsetFlag = 15;
inline void PBMsgTradeRtn::clear_offsetflag() {
  offsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::offsetflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
  return offsetflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_offsetflag(const ::std::string& value) {
  
  offsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}
inline void PBMsgTradeRtn::set_offsetflag(const char* value) {
  
  offsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}
inline void PBMsgTradeRtn::set_offsetflag(const char* value, size_t size) {
  
  offsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}
inline ::std::string* PBMsgTradeRtn::mutable_offsetflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
  return offsetflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_offsetflag() {
  
  return offsetflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_offsetflag(::std::string* offsetflag) {
  if (offsetflag != NULL) {
    
  } else {
    
  }
  offsetflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offsetflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}

// optional string HedgeFlag = 16;
inline void PBMsgTradeRtn::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::hedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
  return hedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}
inline void PBMsgTradeRtn::set_hedgeflag(const char* value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}
inline void PBMsgTradeRtn::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}
inline ::std::string* PBMsgTradeRtn::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_hedgeflag() {
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}

// optional double Price = 17;
inline void PBMsgTradeRtn::clear_price() {
  price_ = 0;
}
inline double PBMsgTradeRtn::price() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.Price)
  return price_;
}
inline void PBMsgTradeRtn::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.Price)
}

// optional int32 Volume = 18;
inline void PBMsgTradeRtn::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 PBMsgTradeRtn::volume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.Volume)
  return volume_;
}
inline void PBMsgTradeRtn::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.Volume)
}

// optional string TradeDate = 19;
inline void PBMsgTradeRtn::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradedate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeDate)
  return tradedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradedate(const ::std::string& value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}
inline void PBMsgTradeRtn::set_tradedate(const char* value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}
inline void PBMsgTradeRtn::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradedate() {
  
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}

// optional string TradeTime = 20;
inline void PBMsgTradeRtn::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeTime)
  return tradetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradetime(const ::std::string& value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}
inline void PBMsgTradeRtn::set_tradetime(const char* value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}
inline void PBMsgTradeRtn::set_tradetime(const char* value, size_t size) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradetime() {
  
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}

// optional string TradeType = 21;
inline void PBMsgTradeRtn::clear_tradetype() {
  tradetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeType)
  return tradetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradetype(const ::std::string& value) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeType)
}
inline void PBMsgTradeRtn::set_tradetype(const char* value) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeType)
}
inline void PBMsgTradeRtn::set_tradetype(const char* value, size_t size) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeType)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeType)
  return tradetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradetype() {
  
  return tradetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradetype(::std::string* tradetype) {
  if (tradetype != NULL) {
    
  } else {
    
  }
  tradetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeType)
}

// optional string PriceSource = 22;
inline void PBMsgTradeRtn::clear_pricesource() {
  pricesource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::pricesource() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.PriceSource)
  return pricesource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_pricesource(const ::std::string& value) {
  
  pricesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}
inline void PBMsgTradeRtn::set_pricesource(const char* value) {
  
  pricesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}
inline void PBMsgTradeRtn::set_pricesource(const char* value, size_t size) {
  
  pricesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}
inline ::std::string* PBMsgTradeRtn::mutable_pricesource() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.PriceSource)
  return pricesource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_pricesource() {
  
  return pricesource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_pricesource(::std::string* pricesource) {
  if (pricesource != NULL) {
    
  } else {
    
  }
  pricesource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricesource);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}

// optional string TraderID = 23;
inline void PBMsgTradeRtn::clear_traderid() {
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::traderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TraderID)
  return traderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_traderid(const ::std::string& value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TraderID)
}
inline void PBMsgTradeRtn::set_traderid(const char* value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TraderID)
}
inline void PBMsgTradeRtn::set_traderid(const char* value, size_t size) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TraderID)
}
inline ::std::string* PBMsgTradeRtn::mutable_traderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TraderID)
  return traderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_traderid() {
  
  return traderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_traderid(::std::string* traderid) {
  if (traderid != NULL) {
    
  } else {
    
  }
  traderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TraderID)
}

// optional string OrderLocalID = 24;
inline void PBMsgTradeRtn::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::orderlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
  return orderlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}
inline void PBMsgTradeRtn::set_orderlocalid(const char* value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}
inline void PBMsgTradeRtn::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}
inline ::std::string* PBMsgTradeRtn::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_orderlocalid() {
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}

// optional string ClearingPartID = 25;
inline void PBMsgTradeRtn::clear_clearingpartid() {
  clearingpartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::clearingpartid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
  return clearingpartid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_clearingpartid(const ::std::string& value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}
inline void PBMsgTradeRtn::set_clearingpartid(const char* value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}
inline void PBMsgTradeRtn::set_clearingpartid(const char* value, size_t size) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}
inline ::std::string* PBMsgTradeRtn::mutable_clearingpartid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
  return clearingpartid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_clearingpartid() {
  
  return clearingpartid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_clearingpartid(::std::string* clearingpartid) {
  if (clearingpartid != NULL) {
    
  } else {
    
  }
  clearingpartid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearingpartid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}

// optional string BusinessUnit = 26;
inline void PBMsgTradeRtn::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}
inline void PBMsgTradeRtn::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}
inline void PBMsgTradeRtn::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}
inline ::std::string* PBMsgTradeRtn::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}

// optional int32 SequenceNo = 27;
inline void PBMsgTradeRtn::clear_sequenceno() {
  sequenceno_ = 0;
}
inline ::google::protobuf::int32 PBMsgTradeRtn::sequenceno() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.SequenceNo)
  return sequenceno_;
}
inline void PBMsgTradeRtn::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.SequenceNo)
}

// optional string TradingDay = 28;
inline void PBMsgTradeRtn::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}
inline void PBMsgTradeRtn::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}
inline void PBMsgTradeRtn::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}

// optional int32 SettlementID = 29;
inline void PBMsgTradeRtn::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 PBMsgTradeRtn::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.SettlementID)
  return settlementid_;
}
inline void PBMsgTradeRtn::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.SettlementID)
}

// optional int32 BrokerOrderSeq = 30;
inline void PBMsgTradeRtn::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
inline ::google::protobuf::int32 PBMsgTradeRtn::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.BrokerOrderSeq)
  return brokerorderseq_;
}
inline void PBMsgTradeRtn::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.BrokerOrderSeq)
}

// optional string TradeSource = 31;
inline void PBMsgTradeRtn::clear_tradesource() {
  tradesource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgTradeRtn::tradesource() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeSource)
  return tradesource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_tradesource(const ::std::string& value) {
  
  tradesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}
inline void PBMsgTradeRtn::set_tradesource(const char* value) {
  
  tradesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}
inline void PBMsgTradeRtn::set_tradesource(const char* value, size_t size) {
  
  tradesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}
inline ::std::string* PBMsgTradeRtn::mutable_tradesource() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeSource)
  return tradesource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgTradeRtn::release_tradesource() {
  
  return tradesource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgTradeRtn::set_allocated_tradesource(::std::string* tradesource) {
  if (tradesource != NULL) {
    
  } else {
    
  }
  tradesource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradesource);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}

// -------------------------------------------------------------------

// PBMsgSettlementInfoConfirm

// optional string BrokerID = 2;
inline void PBMsgSettlementInfoConfirm::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgSettlementInfoConfirm::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}
inline void PBMsgSettlementInfoConfirm::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}
inline void PBMsgSettlementInfoConfirm::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}
inline ::std::string* PBMsgSettlementInfoConfirm::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgSettlementInfoConfirm::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgSettlementInfoConfirm::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgSettlementInfoConfirm::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}
inline void PBMsgSettlementInfoConfirm::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}
inline void PBMsgSettlementInfoConfirm::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}
inline ::std::string* PBMsgSettlementInfoConfirm::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgSettlementInfoConfirm::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}

// optional string ConfirmDate = 4;
inline void PBMsgSettlementInfoConfirm::clear_confirmdate() {
  confirmdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgSettlementInfoConfirm::confirmdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
  return confirmdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_confirmdate(const ::std::string& value) {
  
  confirmdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}
inline void PBMsgSettlementInfoConfirm::set_confirmdate(const char* value) {
  
  confirmdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}
inline void PBMsgSettlementInfoConfirm::set_confirmdate(const char* value, size_t size) {
  
  confirmdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}
inline ::std::string* PBMsgSettlementInfoConfirm::mutable_confirmdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
  return confirmdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgSettlementInfoConfirm::release_confirmdate() {
  
  return confirmdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_allocated_confirmdate(::std::string* confirmdate) {
  if (confirmdate != NULL) {
    
  } else {
    
  }
  confirmdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}

// optional string ConfirmTime = 5;
inline void PBMsgSettlementInfoConfirm::clear_confirmtime() {
  confirmtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgSettlementInfoConfirm::confirmtime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
  return confirmtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_confirmtime(const ::std::string& value) {
  
  confirmtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}
inline void PBMsgSettlementInfoConfirm::set_confirmtime(const char* value) {
  
  confirmtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}
inline void PBMsgSettlementInfoConfirm::set_confirmtime(const char* value, size_t size) {
  
  confirmtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}
inline ::std::string* PBMsgSettlementInfoConfirm::mutable_confirmtime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
  return confirmtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgSettlementInfoConfirm::release_confirmtime() {
  
  return confirmtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgSettlementInfoConfirm::set_allocated_confirmtime(::std::string* confirmtime) {
  if (confirmtime != NULL) {
    
  } else {
    
  }
  confirmtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmtime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}

// -------------------------------------------------------------------

// PBMsgReqConnect

// optional string BrokerID = 2;
inline void PBMsgReqConnect::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgReqConnect::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgReqConnect.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgReqConnect::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgReqConnect.BrokerID)
}
inline void PBMsgReqConnect::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgReqConnect.BrokerID)
}
inline void PBMsgReqConnect::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgReqConnect.BrokerID)
}
inline ::std::string* PBMsgReqConnect::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgReqConnect.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgReqConnect::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgReqConnect::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgReqConnect.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgReqConnect::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgReqConnect::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgReqConnect.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgReqConnect::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgReqConnect.InvestorID)
}
inline void PBMsgReqConnect::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgReqConnect.InvestorID)
}
inline void PBMsgReqConnect::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgReqConnect.InvestorID)
}
inline ::std::string* PBMsgReqConnect::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgReqConnect.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgReqConnect::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgReqConnect::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgReqConnect.InvestorID)
}

// optional string TradeFront = 4;
inline void PBMsgReqConnect::clear_tradefront() {
  tradefront_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgReqConnect::tradefront() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgReqConnect.TradeFront)
  return tradefront_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgReqConnect::set_tradefront(const ::std::string& value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgReqConnect.TradeFront)
}
inline void PBMsgReqConnect::set_tradefront(const char* value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgReqConnect.TradeFront)
}
inline void PBMsgReqConnect::set_tradefront(const char* value, size_t size) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgReqConnect.TradeFront)
}
inline ::std::string* PBMsgReqConnect::mutable_tradefront() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgReqConnect.TradeFront)
  return tradefront_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgReqConnect::release_tradefront() {
  
  return tradefront_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgReqConnect::set_allocated_tradefront(::std::string* tradefront) {
  if (tradefront != NULL) {
    
  } else {
    
  }
  tradefront_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradefront);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgReqConnect.TradeFront)
}

// -------------------------------------------------------------------

// PBMsgRspConnect

// optional string BrokerID = 2;
inline void PBMsgRspConnect::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgRspConnect::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.BrokerID)
}
inline void PBMsgRspConnect::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.BrokerID)
}
inline void PBMsgRspConnect::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.BrokerID)
}
inline ::std::string* PBMsgRspConnect::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgRspConnect::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.BrokerID)
}

// optional string InvestorID = 3;
inline void PBMsgRspConnect::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgRspConnect::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.InvestorID)
}
inline void PBMsgRspConnect::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.InvestorID)
}
inline void PBMsgRspConnect::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.InvestorID)
}
inline ::std::string* PBMsgRspConnect::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgRspConnect::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.InvestorID)
}

// optional string TradeFront = 4;
inline void PBMsgRspConnect::clear_tradefront() {
  tradefront_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgRspConnect::tradefront() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.TradeFront)
  return tradefront_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_tradefront(const ::std::string& value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.TradeFront)
}
inline void PBMsgRspConnect::set_tradefront(const char* value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.TradeFront)
}
inline void PBMsgRspConnect::set_tradefront(const char* value, size_t size) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.TradeFront)
}
inline ::std::string* PBMsgRspConnect::mutable_tradefront() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.TradeFront)
  return tradefront_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgRspConnect::release_tradefront() {
  
  return tradefront_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_allocated_tradefront(::std::string* tradefront) {
  if (tradefront != NULL) {
    
  } else {
    
  }
  tradefront_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradefront);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.TradeFront)
}

// optional string ReqURI = 5;
inline void PBMsgRspConnect::clear_requri() {
  requri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgRspConnect::requri() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.ReqURI)
  return requri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_requri(const ::std::string& value) {
  
  requri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.ReqURI)
}
inline void PBMsgRspConnect::set_requri(const char* value) {
  
  requri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.ReqURI)
}
inline void PBMsgRspConnect::set_requri(const char* value, size_t size) {
  
  requri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.ReqURI)
}
inline ::std::string* PBMsgRspConnect::mutable_requri() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.ReqURI)
  return requri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgRspConnect::release_requri() {
  
  return requri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_allocated_requri(::std::string* requri) {
  if (requri != NULL) {
    
  } else {
    
  }
  requri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requri);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.ReqURI)
}

// optional string RspURI = 6;
inline void PBMsgRspConnect::clear_rspuri() {
  rspuri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMsgRspConnect::rspuri() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.RspURI)
  return rspuri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_rspuri(const ::std::string& value) {
  
  rspuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.RspURI)
}
inline void PBMsgRspConnect::set_rspuri(const char* value) {
  
  rspuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.RspURI)
}
inline void PBMsgRspConnect::set_rspuri(const char* value, size_t size) {
  
  rspuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.RspURI)
}
inline ::std::string* PBMsgRspConnect::mutable_rspuri() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.RspURI)
  return rspuri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMsgRspConnect::release_rspuri() {
  
  return rspuri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMsgRspConnect::set_allocated_rspuri(::std::string* rspuri) {
  if (rspuri != NULL) {
    
  } else {
    
  }
  rspuri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspuri);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.RspURI)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PBMsgTrader

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PBMsgTrader::PBOrderStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBMsgTrader::PBOrderStatus>() {
  return ::PBMsgTrader::PBOrderStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PBMsgTrader_2eproto__INCLUDED
