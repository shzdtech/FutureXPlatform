// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simpletable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "simpletable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Micro {
namespace Future {
namespace Message {
namespace Business {

namespace {

const ::google::protobuf::Descriptor* NamedStringVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamedStringVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamedIntVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamedIntVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamedDoubleVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamedDoubleVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleIntTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleIntTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleStringTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleStringTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleDoubleTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleDoubleTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_simpletable_2eproto() {
  protobuf_AddDesc_simpletable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "simpletable.proto");
  GOOGLE_CHECK(file != NULL);
  NamedStringVector_descriptor_ = file->message_type(0);
  static const int NamedStringVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedStringVector, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedStringVector, entry_),
  };
  NamedStringVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NamedStringVector_descriptor_,
      NamedStringVector::default_instance_,
      NamedStringVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedStringVector, _has_bits_[0]),
      -1,
      -1,
      sizeof(NamedStringVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedStringVector, _internal_metadata_),
      -1);
  NamedIntVector_descriptor_ = file->message_type(1);
  static const int NamedIntVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedIntVector, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedIntVector, entry_),
  };
  NamedIntVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NamedIntVector_descriptor_,
      NamedIntVector::default_instance_,
      NamedIntVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedIntVector, _has_bits_[0]),
      -1,
      -1,
      sizeof(NamedIntVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedIntVector, _internal_metadata_),
      -1);
  NamedDoubleVector_descriptor_ = file->message_type(2);
  static const int NamedDoubleVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedDoubleVector, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedDoubleVector, entry_),
  };
  NamedDoubleVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NamedDoubleVector_descriptor_,
      NamedDoubleVector::default_instance_,
      NamedDoubleVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedDoubleVector, _has_bits_[0]),
      -1,
      -1,
      sizeof(NamedDoubleVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedDoubleVector, _internal_metadata_),
      -1);
  SimpleIntTable_descriptor_ = file->message_type(3);
  static const int SimpleIntTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleIntTable, columns_),
  };
  SimpleIntTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleIntTable_descriptor_,
      SimpleIntTable::default_instance_,
      SimpleIntTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleIntTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleIntTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleIntTable, _internal_metadata_),
      -1);
  SimpleStringTable_descriptor_ = file->message_type(4);
  static const int SimpleStringTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleStringTable, columns_),
  };
  SimpleStringTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleStringTable_descriptor_,
      SimpleStringTable::default_instance_,
      SimpleStringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleStringTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleStringTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleStringTable, _internal_metadata_),
      -1);
  SimpleDoubleTable_descriptor_ = file->message_type(5);
  static const int SimpleDoubleTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDoubleTable, columns_),
  };
  SimpleDoubleTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleDoubleTable_descriptor_,
      SimpleDoubleTable::default_instance_,
      SimpleDoubleTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDoubleTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimpleDoubleTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDoubleTable, _internal_metadata_),
      -1);
  ComplexTable_descriptor_ = file->message_type(6);
  static const int ComplexTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexTable, inttable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexTable, doubletable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexTable, stringtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexTable, nesttable_),
  };
  ComplexTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComplexTable_descriptor_,
      ComplexTable::default_instance_,
      ComplexTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(ComplexTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexTable, _internal_metadata_),
      -1);
  StringResponse_descriptor_ = file->message_type(7);
  static const int StringResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringResponse, eof_),
  };
  StringResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringResponse_descriptor_,
      StringResponse::default_instance_,
      StringResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringResponse, _internal_metadata_),
      -1);
  IntResponse_descriptor_ = file->message_type(8);
  static const int IntResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntResponse, eof_),
  };
  IntResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntResponse_descriptor_,
      IntResponse::default_instance_,
      IntResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntResponse, _internal_metadata_),
      -1);
  DoubleResponse_descriptor_ = file->message_type(9);
  static const int DoubleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleResponse, eof_),
  };
  DoubleResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DoubleResponse_descriptor_,
      DoubleResponse::default_instance_,
      DoubleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DoubleResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_simpletable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NamedStringVector_descriptor_, &NamedStringVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NamedIntVector_descriptor_, &NamedIntVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NamedDoubleVector_descriptor_, &NamedDoubleVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleIntTable_descriptor_, &SimpleIntTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleStringTable_descriptor_, &SimpleStringTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleDoubleTable_descriptor_, &SimpleDoubleTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComplexTable_descriptor_, &ComplexTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringResponse_descriptor_, &StringResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntResponse_descriptor_, &IntResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DoubleResponse_descriptor_, &DoubleResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_simpletable_2eproto() {
  delete NamedStringVector::default_instance_;
  delete NamedStringVector_reflection_;
  delete NamedIntVector::default_instance_;
  delete NamedIntVector_reflection_;
  delete NamedDoubleVector::default_instance_;
  delete NamedDoubleVector_reflection_;
  delete SimpleIntTable::default_instance_;
  delete SimpleIntTable_reflection_;
  delete SimpleStringTable::default_instance_;
  delete SimpleStringTable_reflection_;
  delete SimpleDoubleTable::default_instance_;
  delete SimpleDoubleTable_reflection_;
  delete ComplexTable::default_instance_;
  delete ComplexTable_reflection_;
  delete StringResponse::default_instance_;
  delete StringResponse_reflection_;
  delete IntResponse::default_instance_;
  delete IntResponse_reflection_;
  delete DoubleResponse::default_instance_;
  delete DoubleResponse_reflection_;
}

void protobuf_AddDesc_simpletable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021simpletable.proto\022\035Micro.Future.Messag"
    "e.Business\"0\n\021NamedStringVector\022\014\n\004name\030"
    "\001 \002(\t\022\r\n\005entry\030\002 \003(\t\"-\n\016NamedIntVector\022\014"
    "\n\004name\030\001 \002(\t\022\r\n\005entry\030\002 \003(\005\"0\n\021NamedDoub"
    "leVector\022\014\n\004name\030\001 \002(\t\022\r\n\005entry\030\002 \003(\001\"P\n"
    "\016SimpleIntTable\022>\n\007columns\030\001 \003(\0132-.Micro"
    ".Future.Message.Business.NamedIntVector\""
    "V\n\021SimpleStringTable\022A\n\007columns\030\001 \003(\01320."
    "Micro.Future.Message.Business.NamedStrin"
    "gVector\"V\n\021SimpleDoubleTable\022A\n\007columns\030"
    "\001 \003(\01320.Micro.Future.Message.Business.Na"
    "medDoubleVector\"\235\002\n\014ComplexTable\022\?\n\010intT"
    "able\030\001 \001(\0132-.Micro.Future.Message.Busine"
    "ss.SimpleIntTable\022E\n\013doubleTable\030\002 \001(\01320"
    ".Micro.Future.Message.Business.SimpleDou"
    "bleTable\022E\n\013stringTable\030\003 \001(\01320.Micro.Fu"
    "ture.Message.Business.SimpleStringTable\022"
    ">\n\tnestTable\030\004 \001(\0132+.Micro.Future.Messag"
    "e.Business.ComplexTable\",\n\016StringRespons"
    "e\022\r\n\005Value\030\001 \002(\t\022\013\n\003EOF\030\002 \002(\005\")\n\013IntResp"
    "onse\022\r\n\005Value\030\001 \002(\005\022\013\n\003EOF\030\002 \002(\005\",\n\016Doub"
    "leResponse\022\r\n\005Value\030\001 \002(\001\022\013\n\003EOF\030\002 \002(\005", 878);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "simpletable.proto", &protobuf_RegisterTypes);
  NamedStringVector::default_instance_ = new NamedStringVector();
  NamedIntVector::default_instance_ = new NamedIntVector();
  NamedDoubleVector::default_instance_ = new NamedDoubleVector();
  SimpleIntTable::default_instance_ = new SimpleIntTable();
  SimpleStringTable::default_instance_ = new SimpleStringTable();
  SimpleDoubleTable::default_instance_ = new SimpleDoubleTable();
  ComplexTable::default_instance_ = new ComplexTable();
  StringResponse::default_instance_ = new StringResponse();
  IntResponse::default_instance_ = new IntResponse();
  DoubleResponse::default_instance_ = new DoubleResponse();
  NamedStringVector::default_instance_->InitAsDefaultInstance();
  NamedIntVector::default_instance_->InitAsDefaultInstance();
  NamedDoubleVector::default_instance_->InitAsDefaultInstance();
  SimpleIntTable::default_instance_->InitAsDefaultInstance();
  SimpleStringTable::default_instance_->InitAsDefaultInstance();
  SimpleDoubleTable::default_instance_->InitAsDefaultInstance();
  ComplexTable::default_instance_->InitAsDefaultInstance();
  StringResponse::default_instance_->InitAsDefaultInstance();
  IntResponse::default_instance_->InitAsDefaultInstance();
  DoubleResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_simpletable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_simpletable_2eproto {
  StaticDescriptorInitializer_simpletable_2eproto() {
    protobuf_AddDesc_simpletable_2eproto();
  }
} static_descriptor_initializer_simpletable_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NamedStringVector::kNameFieldNumber;
const int NamedStringVector::kEntryFieldNumber;
#endif  // !_MSC_VER

NamedStringVector::NamedStringVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.NamedStringVector)
}

void NamedStringVector::InitAsDefaultInstance() {
}

NamedStringVector::NamedStringVector(const NamedStringVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.NamedStringVector)
}

void NamedStringVector::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamedStringVector::~NamedStringVector() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.NamedStringVector)
  SharedDtor();
}

void NamedStringVector::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NamedStringVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamedStringVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamedStringVector_descriptor_;
}

const NamedStringVector& NamedStringVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

NamedStringVector* NamedStringVector::default_instance_ = NULL;

NamedStringVector* NamedStringVector::New(::google::protobuf::Arena* arena) const {
  NamedStringVector* n = new NamedStringVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NamedStringVector::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NamedStringVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.NamedStringVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.NamedStringVector.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }

      // repeated string entry = 2;
      case 2: {
        if (tag == 18) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entry(this->entry_size() - 1).data(),
            this->entry(this->entry_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.NamedStringVector.entry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.NamedStringVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.NamedStringVector)
  return false;
#undef DO_
}

void NamedStringVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.NamedStringVector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedStringVector.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->entry(i).data(), this->entry(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "Micro.Future.Message.Business.NamedStringVector.entry");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entry(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.NamedStringVector)
}

::google::protobuf::uint8* NamedStringVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.NamedStringVector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedStringVector.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entry(i).data(), this->entry(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedStringVector.entry");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->entry(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.NamedStringVector)
  return target;
}

int NamedStringVector::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated string entry = 2;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entry(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedStringVector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NamedStringVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NamedStringVector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamedStringVector::MergeFrom(const NamedStringVector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NamedStringVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedStringVector::CopyFrom(const NamedStringVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedStringVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NamedStringVector::Swap(NamedStringVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedStringVector::InternalSwap(NamedStringVector* other) {
  name_.Swap(&other->name_);
  entry_.UnsafeArenaSwap(&other->entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NamedStringVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamedStringVector_descriptor_;
  metadata.reflection = NamedStringVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NamedStringVector

// required string name = 1;
bool NamedStringVector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NamedStringVector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NamedStringVector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NamedStringVector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NamedStringVector::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.NamedStringVector.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamedStringVector::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.NamedStringVector.name)
}
 void NamedStringVector::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.NamedStringVector.name)
}
 void NamedStringVector::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.NamedStringVector.name)
}
 ::std::string* NamedStringVector::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.NamedStringVector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NamedStringVector::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamedStringVector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.NamedStringVector.name)
}

// repeated string entry = 2;
int NamedStringVector::entry_size() const {
  return entry_.size();
}
void NamedStringVector::clear_entry() {
  entry_.Clear();
}
 const ::std::string& NamedStringVector::entry(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.NamedStringVector.entry)
  return entry_.Get(index);
}
 ::std::string* NamedStringVector::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.NamedStringVector.entry)
  return entry_.Mutable(index);
}
 void NamedStringVector::set_entry(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.NamedStringVector.entry)
  entry_.Mutable(index)->assign(value);
}
 void NamedStringVector::set_entry(int index, const char* value) {
  entry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.NamedStringVector.entry)
}
 void NamedStringVector::set_entry(int index, const char* value, size_t size) {
  entry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.NamedStringVector.entry)
}
 ::std::string* NamedStringVector::add_entry() {
  return entry_.Add();
}
 void NamedStringVector::add_entry(const ::std::string& value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.NamedStringVector.entry)
}
 void NamedStringVector::add_entry(const char* value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Micro.Future.Message.Business.NamedStringVector.entry)
}
 void NamedStringVector::add_entry(const char* value, size_t size) {
  entry_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Micro.Future.Message.Business.NamedStringVector.entry)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NamedStringVector::entry() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.NamedStringVector.entry)
  return entry_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NamedStringVector::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.NamedStringVector.entry)
  return &entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NamedIntVector::kNameFieldNumber;
const int NamedIntVector::kEntryFieldNumber;
#endif  // !_MSC_VER

NamedIntVector::NamedIntVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.NamedIntVector)
}

void NamedIntVector::InitAsDefaultInstance() {
}

NamedIntVector::NamedIntVector(const NamedIntVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.NamedIntVector)
}

void NamedIntVector::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamedIntVector::~NamedIntVector() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.NamedIntVector)
  SharedDtor();
}

void NamedIntVector::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NamedIntVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamedIntVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamedIntVector_descriptor_;
}

const NamedIntVector& NamedIntVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

NamedIntVector* NamedIntVector::default_instance_ = NULL;

NamedIntVector* NamedIntVector::New(::google::protobuf::Arena* arena) const {
  NamedIntVector* n = new NamedIntVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NamedIntVector::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NamedIntVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.NamedIntVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.NamedIntVector.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entry;
        break;
      }

      // repeated int32 entry = 2;
      case 2: {
        if (tag == 16) {
         parse_entry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_entry())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entry())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.NamedIntVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.NamedIntVector)
  return false;
#undef DO_
}

void NamedIntVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.NamedIntVector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedIntVector.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int32 entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->entry(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.NamedIntVector)
}

::google::protobuf::uint8* NamedIntVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.NamedIntVector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedIntVector.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->entry(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.NamedIntVector)
  return target;
}

int NamedIntVector::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated int32 entry = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->entry_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->entry(i));
    }
    total_size += 1 * this->entry_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedIntVector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NamedIntVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NamedIntVector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamedIntVector::MergeFrom(const NamedIntVector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NamedIntVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedIntVector::CopyFrom(const NamedIntVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedIntVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NamedIntVector::Swap(NamedIntVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedIntVector::InternalSwap(NamedIntVector* other) {
  name_.Swap(&other->name_);
  entry_.UnsafeArenaSwap(&other->entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NamedIntVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamedIntVector_descriptor_;
  metadata.reflection = NamedIntVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NamedIntVector

// required string name = 1;
bool NamedIntVector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NamedIntVector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NamedIntVector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NamedIntVector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NamedIntVector::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.NamedIntVector.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamedIntVector::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.NamedIntVector.name)
}
 void NamedIntVector::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.NamedIntVector.name)
}
 void NamedIntVector::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.NamedIntVector.name)
}
 ::std::string* NamedIntVector::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.NamedIntVector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NamedIntVector::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamedIntVector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.NamedIntVector.name)
}

// repeated int32 entry = 2;
int NamedIntVector::entry_size() const {
  return entry_.size();
}
void NamedIntVector::clear_entry() {
  entry_.Clear();
}
 ::google::protobuf::int32 NamedIntVector::entry(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.NamedIntVector.entry)
  return entry_.Get(index);
}
 void NamedIntVector::set_entry(int index, ::google::protobuf::int32 value) {
  entry_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.NamedIntVector.entry)
}
 void NamedIntVector::add_entry(::google::protobuf::int32 value) {
  entry_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.NamedIntVector.entry)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NamedIntVector::entry() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.NamedIntVector.entry)
  return entry_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NamedIntVector::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.NamedIntVector.entry)
  return &entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NamedDoubleVector::kNameFieldNumber;
const int NamedDoubleVector::kEntryFieldNumber;
#endif  // !_MSC_VER

NamedDoubleVector::NamedDoubleVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.NamedDoubleVector)
}

void NamedDoubleVector::InitAsDefaultInstance() {
}

NamedDoubleVector::NamedDoubleVector(const NamedDoubleVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.NamedDoubleVector)
}

void NamedDoubleVector::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamedDoubleVector::~NamedDoubleVector() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.NamedDoubleVector)
  SharedDtor();
}

void NamedDoubleVector::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NamedDoubleVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamedDoubleVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamedDoubleVector_descriptor_;
}

const NamedDoubleVector& NamedDoubleVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

NamedDoubleVector* NamedDoubleVector::default_instance_ = NULL;

NamedDoubleVector* NamedDoubleVector::New(::google::protobuf::Arena* arena) const {
  NamedDoubleVector* n = new NamedDoubleVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NamedDoubleVector::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NamedDoubleVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.NamedDoubleVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.NamedDoubleVector.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_entry;
        break;
      }

      // repeated double entry = 2;
      case 2: {
        if (tag == 17) {
         parse_entry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_entry())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_entry())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.NamedDoubleVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.NamedDoubleVector)
  return false;
#undef DO_
}

void NamedDoubleVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.NamedDoubleVector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedDoubleVector.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated double entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->entry(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.NamedDoubleVector)
}

::google::protobuf::uint8* NamedDoubleVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.NamedDoubleVector)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.NamedDoubleVector.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->entry(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.NamedDoubleVector)
  return target;
}

int NamedDoubleVector::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated double entry = 2;
  {
    int data_size = 0;
    data_size = 8 * this->entry_size();
    total_size += 1 * this->entry_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedDoubleVector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NamedDoubleVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NamedDoubleVector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamedDoubleVector::MergeFrom(const NamedDoubleVector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NamedDoubleVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedDoubleVector::CopyFrom(const NamedDoubleVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedDoubleVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NamedDoubleVector::Swap(NamedDoubleVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedDoubleVector::InternalSwap(NamedDoubleVector* other) {
  name_.Swap(&other->name_);
  entry_.UnsafeArenaSwap(&other->entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NamedDoubleVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamedDoubleVector_descriptor_;
  metadata.reflection = NamedDoubleVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NamedDoubleVector

// required string name = 1;
bool NamedDoubleVector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NamedDoubleVector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NamedDoubleVector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NamedDoubleVector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NamedDoubleVector::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.NamedDoubleVector.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamedDoubleVector::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.NamedDoubleVector.name)
}
 void NamedDoubleVector::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.NamedDoubleVector.name)
}
 void NamedDoubleVector::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.NamedDoubleVector.name)
}
 ::std::string* NamedDoubleVector::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.NamedDoubleVector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NamedDoubleVector::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NamedDoubleVector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.NamedDoubleVector.name)
}

// repeated double entry = 2;
int NamedDoubleVector::entry_size() const {
  return entry_.size();
}
void NamedDoubleVector::clear_entry() {
  entry_.Clear();
}
 double NamedDoubleVector::entry(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.NamedDoubleVector.entry)
  return entry_.Get(index);
}
 void NamedDoubleVector::set_entry(int index, double value) {
  entry_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.NamedDoubleVector.entry)
}
 void NamedDoubleVector::add_entry(double value) {
  entry_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.NamedDoubleVector.entry)
}
 const ::google::protobuf::RepeatedField< double >&
NamedDoubleVector::entry() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.NamedDoubleVector.entry)
  return entry_;
}
 ::google::protobuf::RepeatedField< double >*
NamedDoubleVector::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.NamedDoubleVector.entry)
  return &entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SimpleIntTable::kColumnsFieldNumber;
#endif  // !_MSC_VER

SimpleIntTable::SimpleIntTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.SimpleIntTable)
}

void SimpleIntTable::InitAsDefaultInstance() {
}

SimpleIntTable::SimpleIntTable(const SimpleIntTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.SimpleIntTable)
}

void SimpleIntTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleIntTable::~SimpleIntTable() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.SimpleIntTable)
  SharedDtor();
}

void SimpleIntTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleIntTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleIntTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleIntTable_descriptor_;
}

const SimpleIntTable& SimpleIntTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

SimpleIntTable* SimpleIntTable::default_instance_ = NULL;

SimpleIntTable* SimpleIntTable::New(::google::protobuf::Arena* arena) const {
  SimpleIntTable* n = new SimpleIntTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleIntTable::Clear() {
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleIntTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.SimpleIntTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.NamedIntVector columns = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.SimpleIntTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.SimpleIntTable)
  return false;
#undef DO_
}

void SimpleIntTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.SimpleIntTable)
  // repeated .Micro.Future.Message.Business.NamedIntVector columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.SimpleIntTable)
}

::google::protobuf::uint8* SimpleIntTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.SimpleIntTable)
  // repeated .Micro.Future.Message.Business.NamedIntVector columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.SimpleIntTable)
  return target;
}

int SimpleIntTable::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.NamedIntVector columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleIntTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SimpleIntTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleIntTable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleIntTable::MergeFrom(const SimpleIntTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  columns_.MergeFrom(from.columns_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleIntTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleIntTable::CopyFrom(const SimpleIntTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleIntTable::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void SimpleIntTable::Swap(SimpleIntTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleIntTable::InternalSwap(SimpleIntTable* other) {
  columns_.UnsafeArenaSwap(&other->columns_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleIntTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleIntTable_descriptor_;
  metadata.reflection = SimpleIntTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleIntTable

// repeated .Micro.Future.Message.Business.NamedIntVector columns = 1;
int SimpleIntTable::columns_size() const {
  return columns_.size();
}
void SimpleIntTable::clear_columns() {
  columns_.Clear();
}
 const ::Micro::Future::Message::Business::NamedIntVector& SimpleIntTable::columns(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.SimpleIntTable.columns)
  return columns_.Get(index);
}
 ::Micro::Future::Message::Business::NamedIntVector* SimpleIntTable::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.SimpleIntTable.columns)
  return columns_.Mutable(index);
}
 ::Micro::Future::Message::Business::NamedIntVector* SimpleIntTable::add_columns() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.SimpleIntTable.columns)
  return columns_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::NamedIntVector >&
SimpleIntTable::columns() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.SimpleIntTable.columns)
  return columns_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::NamedIntVector >*
SimpleIntTable::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.SimpleIntTable.columns)
  return &columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SimpleStringTable::kColumnsFieldNumber;
#endif  // !_MSC_VER

SimpleStringTable::SimpleStringTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.SimpleStringTable)
}

void SimpleStringTable::InitAsDefaultInstance() {
}

SimpleStringTable::SimpleStringTable(const SimpleStringTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.SimpleStringTable)
}

void SimpleStringTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleStringTable::~SimpleStringTable() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.SimpleStringTable)
  SharedDtor();
}

void SimpleStringTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleStringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleStringTable_descriptor_;
}

const SimpleStringTable& SimpleStringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

SimpleStringTable* SimpleStringTable::default_instance_ = NULL;

SimpleStringTable* SimpleStringTable::New(::google::protobuf::Arena* arena) const {
  SimpleStringTable* n = new SimpleStringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleStringTable::Clear() {
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleStringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.SimpleStringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.NamedStringVector columns = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.SimpleStringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.SimpleStringTable)
  return false;
#undef DO_
}

void SimpleStringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.SimpleStringTable)
  // repeated .Micro.Future.Message.Business.NamedStringVector columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.SimpleStringTable)
}

::google::protobuf::uint8* SimpleStringTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.SimpleStringTable)
  // repeated .Micro.Future.Message.Business.NamedStringVector columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.SimpleStringTable)
  return target;
}

int SimpleStringTable::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.NamedStringVector columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleStringTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SimpleStringTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleStringTable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleStringTable::MergeFrom(const SimpleStringTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  columns_.MergeFrom(from.columns_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleStringTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleStringTable::CopyFrom(const SimpleStringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleStringTable::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void SimpleStringTable::Swap(SimpleStringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleStringTable::InternalSwap(SimpleStringTable* other) {
  columns_.UnsafeArenaSwap(&other->columns_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleStringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleStringTable_descriptor_;
  metadata.reflection = SimpleStringTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleStringTable

// repeated .Micro.Future.Message.Business.NamedStringVector columns = 1;
int SimpleStringTable::columns_size() const {
  return columns_.size();
}
void SimpleStringTable::clear_columns() {
  columns_.Clear();
}
 const ::Micro::Future::Message::Business::NamedStringVector& SimpleStringTable::columns(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.SimpleStringTable.columns)
  return columns_.Get(index);
}
 ::Micro::Future::Message::Business::NamedStringVector* SimpleStringTable::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.SimpleStringTable.columns)
  return columns_.Mutable(index);
}
 ::Micro::Future::Message::Business::NamedStringVector* SimpleStringTable::add_columns() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.SimpleStringTable.columns)
  return columns_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::NamedStringVector >&
SimpleStringTable::columns() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.SimpleStringTable.columns)
  return columns_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::NamedStringVector >*
SimpleStringTable::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.SimpleStringTable.columns)
  return &columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SimpleDoubleTable::kColumnsFieldNumber;
#endif  // !_MSC_VER

SimpleDoubleTable::SimpleDoubleTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.SimpleDoubleTable)
}

void SimpleDoubleTable::InitAsDefaultInstance() {
}

SimpleDoubleTable::SimpleDoubleTable(const SimpleDoubleTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.SimpleDoubleTable)
}

void SimpleDoubleTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleDoubleTable::~SimpleDoubleTable() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.SimpleDoubleTable)
  SharedDtor();
}

void SimpleDoubleTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleDoubleTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleDoubleTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleDoubleTable_descriptor_;
}

const SimpleDoubleTable& SimpleDoubleTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

SimpleDoubleTable* SimpleDoubleTable::default_instance_ = NULL;

SimpleDoubleTable* SimpleDoubleTable::New(::google::protobuf::Arena* arena) const {
  SimpleDoubleTable* n = new SimpleDoubleTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleDoubleTable::Clear() {
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimpleDoubleTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.SimpleDoubleTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.NamedDoubleVector columns = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.SimpleDoubleTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.SimpleDoubleTable)
  return false;
#undef DO_
}

void SimpleDoubleTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.SimpleDoubleTable)
  // repeated .Micro.Future.Message.Business.NamedDoubleVector columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.SimpleDoubleTable)
}

::google::protobuf::uint8* SimpleDoubleTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.SimpleDoubleTable)
  // repeated .Micro.Future.Message.Business.NamedDoubleVector columns = 1;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.SimpleDoubleTable)
  return target;
}

int SimpleDoubleTable::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.NamedDoubleVector columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleDoubleTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SimpleDoubleTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleDoubleTable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleDoubleTable::MergeFrom(const SimpleDoubleTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  columns_.MergeFrom(from.columns_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimpleDoubleTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleDoubleTable::CopyFrom(const SimpleDoubleTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleDoubleTable::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void SimpleDoubleTable::Swap(SimpleDoubleTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleDoubleTable::InternalSwap(SimpleDoubleTable* other) {
  columns_.UnsafeArenaSwap(&other->columns_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleDoubleTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleDoubleTable_descriptor_;
  metadata.reflection = SimpleDoubleTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleDoubleTable

// repeated .Micro.Future.Message.Business.NamedDoubleVector columns = 1;
int SimpleDoubleTable::columns_size() const {
  return columns_.size();
}
void SimpleDoubleTable::clear_columns() {
  columns_.Clear();
}
 const ::Micro::Future::Message::Business::NamedDoubleVector& SimpleDoubleTable::columns(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.SimpleDoubleTable.columns)
  return columns_.Get(index);
}
 ::Micro::Future::Message::Business::NamedDoubleVector* SimpleDoubleTable::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.SimpleDoubleTable.columns)
  return columns_.Mutable(index);
}
 ::Micro::Future::Message::Business::NamedDoubleVector* SimpleDoubleTable::add_columns() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.SimpleDoubleTable.columns)
  return columns_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::NamedDoubleVector >&
SimpleDoubleTable::columns() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.SimpleDoubleTable.columns)
  return columns_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::NamedDoubleVector >*
SimpleDoubleTable::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.SimpleDoubleTable.columns)
  return &columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ComplexTable::kIntTableFieldNumber;
const int ComplexTable::kDoubleTableFieldNumber;
const int ComplexTable::kStringTableFieldNumber;
const int ComplexTable::kNestTableFieldNumber;
#endif  // !_MSC_VER

ComplexTable::ComplexTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.ComplexTable)
}

void ComplexTable::InitAsDefaultInstance() {
  inttable_ = const_cast< ::Micro::Future::Message::Business::SimpleIntTable*>(&::Micro::Future::Message::Business::SimpleIntTable::default_instance());
  doubletable_ = const_cast< ::Micro::Future::Message::Business::SimpleDoubleTable*>(&::Micro::Future::Message::Business::SimpleDoubleTable::default_instance());
  stringtable_ = const_cast< ::Micro::Future::Message::Business::SimpleStringTable*>(&::Micro::Future::Message::Business::SimpleStringTable::default_instance());
  nesttable_ = const_cast< ::Micro::Future::Message::Business::ComplexTable*>(&::Micro::Future::Message::Business::ComplexTable::default_instance());
}

ComplexTable::ComplexTable(const ComplexTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.ComplexTable)
}

void ComplexTable::SharedCtor() {
  _cached_size_ = 0;
  inttable_ = NULL;
  doubletable_ = NULL;
  stringtable_ = NULL;
  nesttable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComplexTable::~ComplexTable() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.ComplexTable)
  SharedDtor();
}

void ComplexTable::SharedDtor() {
  if (this != default_instance_) {
    delete inttable_;
    delete doubletable_;
    delete stringtable_;
    delete nesttable_;
  }
}

void ComplexTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexTable_descriptor_;
}

const ComplexTable& ComplexTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

ComplexTable* ComplexTable::default_instance_ = NULL;

ComplexTable* ComplexTable::New(::google::protobuf::Arena* arena) const {
  ComplexTable* n = new ComplexTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexTable::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_inttable()) {
      if (inttable_ != NULL) inttable_->::Micro::Future::Message::Business::SimpleIntTable::Clear();
    }
    if (has_doubletable()) {
      if (doubletable_ != NULL) doubletable_->::Micro::Future::Message::Business::SimpleDoubleTable::Clear();
    }
    if (has_stringtable()) {
      if (stringtable_ != NULL) stringtable_->::Micro::Future::Message::Business::SimpleStringTable::Clear();
    }
    if (has_nesttable()) {
      if (nesttable_ != NULL) nesttable_->::Micro::Future::Message::Business::ComplexTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ComplexTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.ComplexTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Micro.Future.Message.Business.SimpleIntTable intTable = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inttable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_doubleTable;
        break;
      }

      // optional .Micro.Future.Message.Business.SimpleDoubleTable doubleTable = 2;
      case 2: {
        if (tag == 18) {
         parse_doubleTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doubletable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stringTable;
        break;
      }

      // optional .Micro.Future.Message.Business.SimpleStringTable stringTable = 3;
      case 3: {
        if (tag == 26) {
         parse_stringTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nestTable;
        break;
      }

      // optional .Micro.Future.Message.Business.ComplexTable nestTable = 4;
      case 4: {
        if (tag == 34) {
         parse_nestTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nesttable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.ComplexTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.ComplexTable)
  return false;
#undef DO_
}

void ComplexTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.ComplexTable)
  // optional .Micro.Future.Message.Business.SimpleIntTable intTable = 1;
  if (has_inttable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inttable_, output);
  }

  // optional .Micro.Future.Message.Business.SimpleDoubleTable doubleTable = 2;
  if (has_doubletable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->doubletable_, output);
  }

  // optional .Micro.Future.Message.Business.SimpleStringTable stringTable = 3;
  if (has_stringtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stringtable_, output);
  }

  // optional .Micro.Future.Message.Business.ComplexTable nestTable = 4;
  if (has_nesttable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->nesttable_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.ComplexTable)
}

::google::protobuf::uint8* ComplexTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.ComplexTable)
  // optional .Micro.Future.Message.Business.SimpleIntTable intTable = 1;
  if (has_inttable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->inttable_, target);
  }

  // optional .Micro.Future.Message.Business.SimpleDoubleTable doubleTable = 2;
  if (has_doubletable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->doubletable_, target);
  }

  // optional .Micro.Future.Message.Business.SimpleStringTable stringTable = 3;
  if (has_stringtable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->stringtable_, target);
  }

  // optional .Micro.Future.Message.Business.ComplexTable nestTable = 4;
  if (has_nesttable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->nesttable_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.ComplexTable)
  return target;
}

int ComplexTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .Micro.Future.Message.Business.SimpleIntTable intTable = 1;
    if (has_inttable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inttable_);
    }

    // optional .Micro.Future.Message.Business.SimpleDoubleTable doubleTable = 2;
    if (has_doubletable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->doubletable_);
    }

    // optional .Micro.Future.Message.Business.SimpleStringTable stringTable = 3;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stringtable_);
    }

    // optional .Micro.Future.Message.Business.ComplexTable nestTable = 4;
    if (has_nesttable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nesttable_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ComplexTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexTable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComplexTable::MergeFrom(const ComplexTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inttable()) {
      mutable_inttable()->::Micro::Future::Message::Business::SimpleIntTable::MergeFrom(from.inttable());
    }
    if (from.has_doubletable()) {
      mutable_doubletable()->::Micro::Future::Message::Business::SimpleDoubleTable::MergeFrom(from.doubletable());
    }
    if (from.has_stringtable()) {
      mutable_stringtable()->::Micro::Future::Message::Business::SimpleStringTable::MergeFrom(from.stringtable());
    }
    if (from.has_nesttable()) {
      mutable_nesttable()->::Micro::Future::Message::Business::ComplexTable::MergeFrom(from.nesttable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ComplexTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexTable::CopyFrom(const ComplexTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexTable::IsInitialized() const {

  if (has_inttable()) {
    if (!this->inttable_->IsInitialized()) return false;
  }
  if (has_doubletable()) {
    if (!this->doubletable_->IsInitialized()) return false;
  }
  if (has_stringtable()) {
    if (!this->stringtable_->IsInitialized()) return false;
  }
  if (has_nesttable()) {
    if (!this->nesttable_->IsInitialized()) return false;
  }
  return true;
}

void ComplexTable::Swap(ComplexTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexTable::InternalSwap(ComplexTable* other) {
  std::swap(inttable_, other->inttable_);
  std::swap(doubletable_, other->doubletable_);
  std::swap(stringtable_, other->stringtable_);
  std::swap(nesttable_, other->nesttable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexTable_descriptor_;
  metadata.reflection = ComplexTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexTable

// optional .Micro.Future.Message.Business.SimpleIntTable intTable = 1;
bool ComplexTable::has_inttable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ComplexTable::set_has_inttable() {
  _has_bits_[0] |= 0x00000001u;
}
void ComplexTable::clear_has_inttable() {
  _has_bits_[0] &= ~0x00000001u;
}
void ComplexTable::clear_inttable() {
  if (inttable_ != NULL) inttable_->::Micro::Future::Message::Business::SimpleIntTable::Clear();
  clear_has_inttable();
}
 const ::Micro::Future::Message::Business::SimpleIntTable& ComplexTable::inttable() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.ComplexTable.intTable)
  return inttable_ != NULL ? *inttable_ : *default_instance_->inttable_;
}
 ::Micro::Future::Message::Business::SimpleIntTable* ComplexTable::mutable_inttable() {
  set_has_inttable();
  if (inttable_ == NULL) {
    inttable_ = new ::Micro::Future::Message::Business::SimpleIntTable;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.ComplexTable.intTable)
  return inttable_;
}
 ::Micro::Future::Message::Business::SimpleIntTable* ComplexTable::release_inttable() {
  clear_has_inttable();
  ::Micro::Future::Message::Business::SimpleIntTable* temp = inttable_;
  inttable_ = NULL;
  return temp;
}
 void ComplexTable::set_allocated_inttable(::Micro::Future::Message::Business::SimpleIntTable* inttable) {
  delete inttable_;
  inttable_ = inttable;
  if (inttable) {
    set_has_inttable();
  } else {
    clear_has_inttable();
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.ComplexTable.intTable)
}

// optional .Micro.Future.Message.Business.SimpleDoubleTable doubleTable = 2;
bool ComplexTable::has_doubletable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ComplexTable::set_has_doubletable() {
  _has_bits_[0] |= 0x00000002u;
}
void ComplexTable::clear_has_doubletable() {
  _has_bits_[0] &= ~0x00000002u;
}
void ComplexTable::clear_doubletable() {
  if (doubletable_ != NULL) doubletable_->::Micro::Future::Message::Business::SimpleDoubleTable::Clear();
  clear_has_doubletable();
}
 const ::Micro::Future::Message::Business::SimpleDoubleTable& ComplexTable::doubletable() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.ComplexTable.doubleTable)
  return doubletable_ != NULL ? *doubletable_ : *default_instance_->doubletable_;
}
 ::Micro::Future::Message::Business::SimpleDoubleTable* ComplexTable::mutable_doubletable() {
  set_has_doubletable();
  if (doubletable_ == NULL) {
    doubletable_ = new ::Micro::Future::Message::Business::SimpleDoubleTable;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.ComplexTable.doubleTable)
  return doubletable_;
}
 ::Micro::Future::Message::Business::SimpleDoubleTable* ComplexTable::release_doubletable() {
  clear_has_doubletable();
  ::Micro::Future::Message::Business::SimpleDoubleTable* temp = doubletable_;
  doubletable_ = NULL;
  return temp;
}
 void ComplexTable::set_allocated_doubletable(::Micro::Future::Message::Business::SimpleDoubleTable* doubletable) {
  delete doubletable_;
  doubletable_ = doubletable;
  if (doubletable) {
    set_has_doubletable();
  } else {
    clear_has_doubletable();
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.ComplexTable.doubleTable)
}

// optional .Micro.Future.Message.Business.SimpleStringTable stringTable = 3;
bool ComplexTable::has_stringtable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ComplexTable::set_has_stringtable() {
  _has_bits_[0] |= 0x00000004u;
}
void ComplexTable::clear_has_stringtable() {
  _has_bits_[0] &= ~0x00000004u;
}
void ComplexTable::clear_stringtable() {
  if (stringtable_ != NULL) stringtable_->::Micro::Future::Message::Business::SimpleStringTable::Clear();
  clear_has_stringtable();
}
 const ::Micro::Future::Message::Business::SimpleStringTable& ComplexTable::stringtable() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.ComplexTable.stringTable)
  return stringtable_ != NULL ? *stringtable_ : *default_instance_->stringtable_;
}
 ::Micro::Future::Message::Business::SimpleStringTable* ComplexTable::mutable_stringtable() {
  set_has_stringtable();
  if (stringtable_ == NULL) {
    stringtable_ = new ::Micro::Future::Message::Business::SimpleStringTable;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.ComplexTable.stringTable)
  return stringtable_;
}
 ::Micro::Future::Message::Business::SimpleStringTable* ComplexTable::release_stringtable() {
  clear_has_stringtable();
  ::Micro::Future::Message::Business::SimpleStringTable* temp = stringtable_;
  stringtable_ = NULL;
  return temp;
}
 void ComplexTable::set_allocated_stringtable(::Micro::Future::Message::Business::SimpleStringTable* stringtable) {
  delete stringtable_;
  stringtable_ = stringtable;
  if (stringtable) {
    set_has_stringtable();
  } else {
    clear_has_stringtable();
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.ComplexTable.stringTable)
}

// optional .Micro.Future.Message.Business.ComplexTable nestTable = 4;
bool ComplexTable::has_nesttable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ComplexTable::set_has_nesttable() {
  _has_bits_[0] |= 0x00000008u;
}
void ComplexTable::clear_has_nesttable() {
  _has_bits_[0] &= ~0x00000008u;
}
void ComplexTable::clear_nesttable() {
  if (nesttable_ != NULL) nesttable_->::Micro::Future::Message::Business::ComplexTable::Clear();
  clear_has_nesttable();
}
 const ::Micro::Future::Message::Business::ComplexTable& ComplexTable::nesttable() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.ComplexTable.nestTable)
  return nesttable_ != NULL ? *nesttable_ : *default_instance_->nesttable_;
}
 ::Micro::Future::Message::Business::ComplexTable* ComplexTable::mutable_nesttable() {
  set_has_nesttable();
  if (nesttable_ == NULL) {
    nesttable_ = new ::Micro::Future::Message::Business::ComplexTable;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.ComplexTable.nestTable)
  return nesttable_;
}
 ::Micro::Future::Message::Business::ComplexTable* ComplexTable::release_nesttable() {
  clear_has_nesttable();
  ::Micro::Future::Message::Business::ComplexTable* temp = nesttable_;
  nesttable_ = NULL;
  return temp;
}
 void ComplexTable::set_allocated_nesttable(::Micro::Future::Message::Business::ComplexTable* nesttable) {
  delete nesttable_;
  nesttable_ = nesttable;
  if (nesttable) {
    set_has_nesttable();
  } else {
    clear_has_nesttable();
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.ComplexTable.nestTable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StringResponse::kValueFieldNumber;
const int StringResponse::kEOFFieldNumber;
#endif  // !_MSC_VER

StringResponse::StringResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.StringResponse)
}

void StringResponse::InitAsDefaultInstance() {
}

StringResponse::StringResponse(const StringResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.StringResponse)
}

void StringResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.StringResponse)
  SharedDtor();
}

void StringResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StringResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringResponse_descriptor_;
}

const StringResponse& StringResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

StringResponse* StringResponse::default_instance_ = NULL;

StringResponse* StringResponse::New(::google::protobuf::Arena* arena) const {
  StringResponse* n = new StringResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    eof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.StringResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.StringResponse.Value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EOF;
        break;
      }

      // required int32 EOF = 2;
      case 2: {
        if (tag == 16) {
         parse_EOF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));
          set_has_eof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.StringResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.StringResponse)
  return false;
#undef DO_
}

void StringResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.StringResponse)
  // required string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.StringResponse.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // required int32 EOF = 2;
  if (has_eof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.StringResponse)
}

::google::protobuf::uint8* StringResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.StringResponse)
  // required string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.StringResponse.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // required int32 EOF = 2;
  if (has_eof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.StringResponse)
  return target;
}

int StringResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_value()) {
    // required string Value = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_eof()) {
    // required int32 EOF = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  return total_size;
}
int StringResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Value = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required int32 EOF = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StringResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringResponse::MergeFrom(const StringResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_eof()) {
      set_eof(from.eof());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringResponse::CopyFrom(const StringResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringResponse::Swap(StringResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringResponse::InternalSwap(StringResponse* other) {
  value_.Swap(&other->value_);
  std::swap(eof_, other->eof_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringResponse_descriptor_;
  metadata.reflection = StringResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringResponse

// required string Value = 1;
bool StringResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StringResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void StringResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void StringResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& StringResponse::value() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.StringResponse.Value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.StringResponse.Value)
}
 void StringResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.StringResponse.Value)
}
 void StringResponse::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.StringResponse.Value)
}
 ::std::string* StringResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.StringResponse.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringResponse::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.StringResponse.Value)
}

// required int32 EOF = 2;
bool StringResponse::has_eof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StringResponse::set_has_eof() {
  _has_bits_[0] |= 0x00000002u;
}
void StringResponse::clear_has_eof() {
  _has_bits_[0] &= ~0x00000002u;
}
void StringResponse::clear_eof() {
  eof_ = 0;
  clear_has_eof();
}
 ::google::protobuf::int32 StringResponse::eof() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.StringResponse.EOF)
  return eof_;
}
 void StringResponse::set_eof(::google::protobuf::int32 value) {
  set_has_eof();
  eof_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.StringResponse.EOF)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int IntResponse::kValueFieldNumber;
const int IntResponse::kEOFFieldNumber;
#endif  // !_MSC_VER

IntResponse::IntResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.IntResponse)
}

void IntResponse::InitAsDefaultInstance() {
}

IntResponse::IntResponse(const IntResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.IntResponse)
}

void IntResponse::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  eof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntResponse::~IntResponse() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.IntResponse)
  SharedDtor();
}

void IntResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntResponse_descriptor_;
}

const IntResponse& IntResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

IntResponse* IntResponse::default_instance_ = NULL;

IntResponse* IntResponse::New(::google::protobuf::Arena* arena) const {
  IntResponse* n = new IntResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IntResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, eof_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.IntResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EOF;
        break;
      }

      // required int32 EOF = 2;
      case 2: {
        if (tag == 16) {
         parse_EOF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));
          set_has_eof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.IntResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.IntResponse)
  return false;
#undef DO_
}

void IntResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.IntResponse)
  // required int32 Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // required int32 EOF = 2;
  if (has_eof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.IntResponse)
}

::google::protobuf::uint8* IntResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.IntResponse)
  // required int32 Value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // required int32 EOF = 2;
  if (has_eof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.IntResponse)
  return target;
}

int IntResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_value()) {
    // required int32 Value = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  if (has_eof()) {
    // required int32 EOF = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  return total_size;
}
int IntResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 Value = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

    // required int32 EOF = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IntResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntResponse::MergeFrom(const IntResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_eof()) {
      set_eof(from.eof());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntResponse::CopyFrom(const IntResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IntResponse::Swap(IntResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntResponse::InternalSwap(IntResponse* other) {
  std::swap(value_, other->value_);
  std::swap(eof_, other->eof_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntResponse_descriptor_;
  metadata.reflection = IntResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntResponse

// required int32 Value = 1;
bool IntResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IntResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void IntResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void IntResponse::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 IntResponse::value() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.IntResponse.Value)
  return value_;
}
 void IntResponse::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.IntResponse.Value)
}

// required int32 EOF = 2;
bool IntResponse::has_eof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IntResponse::set_has_eof() {
  _has_bits_[0] |= 0x00000002u;
}
void IntResponse::clear_has_eof() {
  _has_bits_[0] &= ~0x00000002u;
}
void IntResponse::clear_eof() {
  eof_ = 0;
  clear_has_eof();
}
 ::google::protobuf::int32 IntResponse::eof() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.IntResponse.EOF)
  return eof_;
}
 void IntResponse::set_eof(::google::protobuf::int32 value) {
  set_has_eof();
  eof_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.IntResponse.EOF)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DoubleResponse::kValueFieldNumber;
const int DoubleResponse::kEOFFieldNumber;
#endif  // !_MSC_VER

DoubleResponse::DoubleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.DoubleResponse)
}

void DoubleResponse::InitAsDefaultInstance() {
}

DoubleResponse::DoubleResponse(const DoubleResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.DoubleResponse)
}

void DoubleResponse::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  eof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleResponse::~DoubleResponse() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.DoubleResponse)
  SharedDtor();
}

void DoubleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleResponse_descriptor_;
}

const DoubleResponse& DoubleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_simpletable_2eproto();
  return *default_instance_;
}

DoubleResponse* DoubleResponse::default_instance_ = NULL;

DoubleResponse* DoubleResponse::New(::google::protobuf::Arena* arena) const {
  DoubleResponse* n = new DoubleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DoubleResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, eof_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DoubleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.DoubleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EOF;
        break;
      }

      // required int32 EOF = 2;
      case 2: {
        if (tag == 16) {
         parse_EOF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));
          set_has_eof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.DoubleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.DoubleResponse)
  return false;
#undef DO_
}

void DoubleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.DoubleResponse)
  // required double Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // required int32 EOF = 2;
  if (has_eof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.DoubleResponse)
}

::google::protobuf::uint8* DoubleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.DoubleResponse)
  // required double Value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // required int32 EOF = 2;
  if (has_eof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.DoubleResponse)
  return target;
}

int DoubleResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_value()) {
    // required double Value = 1;
    total_size += 1 + 8;
  }

  if (has_eof()) {
    // required int32 EOF = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  return total_size;
}
int DoubleResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double Value = 1;
    total_size += 1 + 8;

    // required int32 EOF = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DoubleResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleResponse::MergeFrom(const DoubleResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_eof()) {
      set_eof(from.eof());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DoubleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleResponse::CopyFrom(const DoubleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DoubleResponse::Swap(DoubleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleResponse::InternalSwap(DoubleResponse* other) {
  std::swap(value_, other->value_);
  std::swap(eof_, other->eof_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleResponse_descriptor_;
  metadata.reflection = DoubleResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleResponse

// required double Value = 1;
bool DoubleResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleResponse::clear_value() {
  value_ = 0;
  clear_has_value();
}
 double DoubleResponse::value() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.DoubleResponse.Value)
  return value_;
}
 void DoubleResponse::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.DoubleResponse.Value)
}

// required int32 EOF = 2;
bool DoubleResponse::has_eof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DoubleResponse::set_has_eof() {
  _has_bits_[0] |= 0x00000002u;
}
void DoubleResponse::clear_has_eof() {
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleResponse::clear_eof() {
  eof_ = 0;
  clear_has_eof();
}
 ::google::protobuf::int32 DoubleResponse::eof() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.DoubleResponse.EOF)
  return eof_;
}
 void DoubleResponse::set_eof(::google::protobuf::int32 value) {
  set_has_eof();
  eof_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.DoubleResponse.EOF)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Business
}  // namespace Message
}  // namespace Future
}  // namespace Micro

// @@protoc_insertion_point(global_scope)
