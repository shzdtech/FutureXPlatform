// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: businessobj.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "businessobj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Micro {
namespace Future {
namespace Message {
namespace Business {

namespace {

const ::google::protobuf::Descriptor* PBUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUserInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUserInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMarketData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMarketDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMarketDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPricingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPricingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPricingDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPricingDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStrategyWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStrategyWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStrategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStrategy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStrategyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStrategyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBContractParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBContractParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBContractParamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBContractParamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOTCUserParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOTCUserParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOTCUserParamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOTCUserParamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTradeNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTradeNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAccountInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_businessobj_2eproto() {
  protobuf_AddDesc_businessobj_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "businessobj.proto");
  GOOGLE_CHECK(file != NULL);
  PBUserInfo_descriptor_ = file->message_type(0);
  static const int PBUserInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, company_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, contactnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, permission_),
  };
  PBUserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBUserInfo_descriptor_,
      PBUserInfo::default_instance_,
      PBUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBUserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfo, _internal_metadata_),
      -1);
  PBUserInfoList_descriptor_ = file->message_type(1);
  static const int PBUserInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfoList, userinfo_),
  };
  PBUserInfoList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBUserInfoList_descriptor_,
      PBUserInfoList::default_instance_,
      PBUserInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfoList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBUserInfoList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUserInfoList, _internal_metadata_),
      -1);
  PBParam_descriptor_ = file->message_type(2);
  static const int PBParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBParam, value_),
  };
  PBParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBParam_descriptor_,
      PBParam::default_instance_,
      PBParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBParam, _internal_metadata_),
      -1);
  PBMarketData_descriptor_ = file->message_type(3);
  static const int PBMarketData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, preclosevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, openvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, highvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, lowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, matchprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, askvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, bidvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, presettleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, pricechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, settleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, highlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, lowlimit_),
  };
  PBMarketData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMarketData_descriptor_,
      PBMarketData::default_instance_,
      PBMarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBMarketData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketData, _internal_metadata_),
      -1);
  PBMarketDataList_descriptor_ = file->message_type(4);
  static const int PBMarketDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketDataList, mdlist_),
  };
  PBMarketDataList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMarketDataList_descriptor_,
      PBMarketDataList::default_instance_,
      PBMarketDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketDataList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBMarketDataList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarketDataList, _internal_metadata_),
      -1);
  PBPricingData_descriptor_ = file->message_type(5);
  static const int PBPricingData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingData, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingData, bidprice_),
  };
  PBPricingData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBPricingData_descriptor_,
      PBPricingData::default_instance_,
      PBPricingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBPricingData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingData, _internal_metadata_),
      -1);
  PBPricingDataList_descriptor_ = file->message_type(6);
  static const int PBPricingDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingDataList, pricing_),
  };
  PBPricingDataList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBPricingDataList_descriptor_,
      PBPricingDataList::default_instance_,
      PBPricingDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingDataList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBPricingDataList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPricingDataList, _internal_metadata_),
      -1);
  PBStrategyWeight_descriptor_ = file->message_type(7);
  static const int PBStrategyWeight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyWeight, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyWeight, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyWeight, weight_),
  };
  PBStrategyWeight_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBStrategyWeight_descriptor_,
      PBStrategyWeight::default_instance_,
      PBStrategyWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyWeight, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBStrategyWeight),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyWeight, _internal_metadata_),
      -1);
  PBStrategy_descriptor_ = file->message_type(8);
  static const int PBStrategy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, underlying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, allowtrading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, spread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, weightcontract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, params_),
  };
  PBStrategy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBStrategy_descriptor_,
      PBStrategy::default_instance_,
      PBStrategy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBStrategy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategy, _internal_metadata_),
      -1);
  PBStrategyList_descriptor_ = file->message_type(9);
  static const int PBStrategyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyList, strategy_),
  };
  PBStrategyList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBStrategyList_descriptor_,
      PBStrategyList::default_instance_,
      PBStrategyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBStrategyList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrategyList, _internal_metadata_),
      -1);
  PBContractParam_descriptor_ = file->message_type(10);
  static const int PBContractParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParam, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParam, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParam, depthvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParam, gamma_),
  };
  PBContractParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBContractParam_descriptor_,
      PBContractParam::default_instance_,
      PBContractParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBContractParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParam, _internal_metadata_),
      -1);
  PBContractParamList_descriptor_ = file->message_type(11);
  static const int PBContractParamList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParamList, params_),
  };
  PBContractParamList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBContractParamList_descriptor_,
      PBContractParamList::default_instance_,
      PBContractParamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParamList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBContractParamList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBContractParamList, _internal_metadata_),
      -1);
  PBOTCUserParam_descriptor_ = file->message_type(12);
  static const int PBOTCUserParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParam, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParam, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParam, quantity_),
  };
  PBOTCUserParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBOTCUserParam_descriptor_,
      PBOTCUserParam::default_instance_,
      PBOTCUserParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBOTCUserParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParam, _internal_metadata_),
      -1);
  PBOTCUserParamList_descriptor_ = file->message_type(13);
  static const int PBOTCUserParamList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParamList, params_),
  };
  PBOTCUserParamList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBOTCUserParamList_descriptor_,
      PBOTCUserParamList::default_instance_,
      PBOTCUserParamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParamList, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBOTCUserParamList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOTCUserParamList, _internal_metadata_),
      -1);
  PBOrderInfo_descriptor_ = file->message_type(14);
  static const int PBOrderInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, exectype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, tif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, tradingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, stopprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, inserttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, canceltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, volumetraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, volumeremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, volumecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, openclose_),
  };
  PBOrderInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBOrderInfo_descriptor_,
      PBOrderInfo::default_instance_,
      PBOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBOrderInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOrderInfo, _internal_metadata_),
      -1);
  PBTradeNotification_descriptor_ = file->message_type(15);
  static const int PBTradeNotification_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, tradedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, tradetype_),
  };
  PBTradeNotification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBTradeNotification_descriptor_,
      PBTradeNotification::default_instance_,
      PBTradeNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBTradeNotification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTradeNotification, _internal_metadata_),
      -1);
  PBPosition_descriptor_ = file->message_type(16);
  static const int PBPosition_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, ydposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, positiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, openvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, openamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, closeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, opencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, usemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, hedgeflag_),
  };
  PBPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBPosition_descriptor_,
      PBPosition::default_instance_,
      PBPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPosition, _internal_metadata_),
      -1);
  PBAccountInfo_descriptor_ = file->message_type(17);
  static const int PBAccountInfo_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, premortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, precredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, predeposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, interestbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, currmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, withdrawquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, deliverymargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, exchangedeliverymargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, reservebalance_),
  };
  PBAccountInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBAccountInfo_descriptor_,
      PBAccountInfo::default_instance_,
      PBAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PBAccountInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_businessobj_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBUserInfo_descriptor_, &PBUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBUserInfoList_descriptor_, &PBUserInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBParam_descriptor_, &PBParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMarketData_descriptor_, &PBMarketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMarketDataList_descriptor_, &PBMarketDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBPricingData_descriptor_, &PBPricingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBPricingDataList_descriptor_, &PBPricingDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBStrategyWeight_descriptor_, &PBStrategyWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBStrategy_descriptor_, &PBStrategy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBStrategyList_descriptor_, &PBStrategyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBContractParam_descriptor_, &PBContractParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBContractParamList_descriptor_, &PBContractParamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBOTCUserParam_descriptor_, &PBOTCUserParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBOTCUserParamList_descriptor_, &PBOTCUserParamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBOrderInfo_descriptor_, &PBOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBTradeNotification_descriptor_, &PBTradeNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBPosition_descriptor_, &PBPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBAccountInfo_descriptor_, &PBAccountInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_businessobj_2eproto() {
  delete PBUserInfo::default_instance_;
  delete PBUserInfo_reflection_;
  delete PBUserInfoList::default_instance_;
  delete PBUserInfoList_reflection_;
  delete PBParam::default_instance_;
  delete PBParam_reflection_;
  delete PBMarketData::default_instance_;
  delete PBMarketData_reflection_;
  delete PBMarketDataList::default_instance_;
  delete PBMarketDataList_reflection_;
  delete PBPricingData::default_instance_;
  delete PBPricingData_reflection_;
  delete PBPricingDataList::default_instance_;
  delete PBPricingDataList_reflection_;
  delete PBStrategyWeight::default_instance_;
  delete PBStrategyWeight_reflection_;
  delete PBStrategy::default_instance_;
  delete PBStrategy_reflection_;
  delete PBStrategyList::default_instance_;
  delete PBStrategyList_reflection_;
  delete PBContractParam::default_instance_;
  delete PBContractParam_reflection_;
  delete PBContractParamList::default_instance_;
  delete PBContractParamList_reflection_;
  delete PBOTCUserParam::default_instance_;
  delete PBOTCUserParam_reflection_;
  delete PBOTCUserParamList::default_instance_;
  delete PBOTCUserParamList_reflection_;
  delete PBOrderInfo::default_instance_;
  delete PBOrderInfo_reflection_;
  delete PBTradeNotification::default_instance_;
  delete PBTradeNotification_reflection_;
  delete PBPosition::default_instance_;
  delete PBPosition_reflection_;
  delete PBAccountInfo::default_instance_;
  delete PBAccountInfo_reflection_;
}

void protobuf_AddDesc_businessobj_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021businessobj.proto\022\035Micro.Future.Messag"
    "e.Business\"\244\001\n\nPBUserInfo\022\016\n\006userId\030\001 \002("
    "\t\022\020\n\010password\030\002 \001(\t\022\020\n\010brokerId\030\003 \001(\t\022\014\n"
    "\004name\030\004 \001(\t\022\017\n\007company\030\005 \001(\t\022\r\n\005email\030\006 "
    "\001(\t\022\022\n\ncontactNum\030\007 \001(\t\022\014\n\004role\030\010 \001(\005\022\022\n"
    "\npermission\030\t \001(\005\"M\n\016PBUserInfoList\022;\n\010u"
    "serInfo\030\001 \003(\0132).Micro.Future.Message.Bus"
    "iness.PBUserInfo\"&\n\007PBParam\022\014\n\004name\030\001 \002("
    "\t\022\r\n\005value\030\002 \002(\001\"\347\002\n\014PBMarketData\022\016\n\006sym"
    "bol\030\001 \002(\t\022\021\n\ttimeStamp\030\002 \001(\t\022\025\n\rpreClose"
    "Value\030\003 \001(\001\022\021\n\topenValue\030\004 \001(\001\022\020\n\010turnov"
    "er\030\005 \001(\001\022\016\n\006volume\030\006 \001(\005\022\021\n\thighValue\030\007 "
    "\001(\001\022\020\n\010lowValue\030\010 \001(\001\022\022\n\nmatchPrice\030\t \001("
    "\001\022\020\n\010askPrice\030\n \003(\001\022\021\n\taskVolume\030\013 \003(\005\022\020"
    "\n\010bidPrice\030\014 \003(\001\022\021\n\tbidVolume\030\r \003(\005\022\026\n\016p"
    "reSettlePrice\030\016 \001(\001\022\023\n\013priceChange\030\017 \001(\001"
    "\022\023\n\013settlePrice\030\020 \001(\001\022\021\n\thighLimit\030\021 \001(\005"
    "\022\020\n\010lowLimit\030\022 \001(\005\"O\n\020PBMarketDataList\022;"
    "\n\006mdList\030\001 \003(\0132+.Micro.Future.Message.Bu"
    "siness.PBMarketData\"W\n\rPBPricingData\022\020\n\010"
    "exchange\030\001 \002(\t\022\020\n\010contract\030\002 \002(\t\022\020\n\010askP"
    "rice\030\003 \002(\001\022\020\n\010bidPrice\030\004 \002(\001\"R\n\021PBPricin"
    "gDataList\022=\n\007pricing\030\001 \003(\0132,.Micro.Futur"
    "e.Message.Business.PBPricingData\"F\n\020PBSt"
    "rategyWeight\022\020\n\010exchange\030\003 \002(\t\022\020\n\010contra"
    "ct\030\004 \002(\t\022\016\n\006weight\030\006 \002(\002\"\322\002\n\nPBStrategy\022"
    "\020\n\010exchange\030\001 \002(\t\022\020\n\010contract\030\002 \002(\t\022\022\n\nu"
    "nderlying\030\003 \001(\t\022\016\n\006symbol\030\004 \001(\t\022\023\n\013descr"
    "iption\030\005 \001(\t\022\024\n\014allowTrading\030\006 \001(\010\022\020\n\010qu"
    "antity\030\007 \001(\005\022\r\n\005depth\030\010 \001(\005\022\016\n\006spread\030\t "
    "\001(\002\022\016\n\006offset\030\n \001(\002\022\017\n\007enabled\030\013 \001(\010\022G\n\016"
    "weightContract\030\014 \003(\0132/.Micro.Future.Mess"
    "age.Business.PBStrategyWeight\0226\n\006params\030"
    "\r \003(\0132&.Micro.Future.Message.Business.PB"
    "Param\"M\n\016PBStrategyList\022;\n\010strategy\030\001 \003("
    "\0132).Micro.Future.Message.Business.PBStra"
    "tegy\"V\n\017PBContractParam\022\020\n\010exchange\030\001 \002("
    "\t\022\020\n\010contract\030\002 \002(\t\022\020\n\010depthVol\030\003 \001(\005\022\r\n"
    "\005gamma\030\004 \001(\002\"U\n\023PBContractParamList\022>\n\006p"
    "arams\030\001 \003(\0132..Micro.Future.Message.Busin"
    "ess.PBContractParam\"F\n\016PBOTCUserParam\022\020\n"
    "\010exchange\030\001 \002(\t\022\020\n\010contract\030\002 \002(\t\022\020\n\010qua"
    "ntity\030\003 \002(\002\"S\n\022PBOTCUserParamList\022=\n\006par"
    "ams\030\001 \003(\0132-.Micro.Future.Message.Busines"
    "s.PBOTCUserParam\"\332\003\n\013PBOrderInfo\022\017\n\007orde"
    "rID\030\001 \001(\004\022\022\n\norderSysID\030\002 \001(\004\022\020\n\010brokerI"
    "D\030\003 \001(\t\022\022\n\ninvestorID\030\004 \001(\t\022\020\n\010exchange\030"
    "\005 \001(\t\022\020\n\010contract\030\006 \001(\t\022\020\n\010execType\030\007 \001("
    "\005\022\013\n\003tif\030\010 \001(\005\022\023\n\013tradingType\030\t \001(\005\022\021\n\td"
    "irection\030\n \001(\005\022\022\n\nlimitPrice\030\013 \001(\001\022\021\n\tst"
    "opPrice\030\014 \001(\001\022\023\n\013orderStatus\030\r \001(\005\022\021\n\tor"
    "derType\030\016 \001(\005\022\016\n\006volume\030\017 \001(\005\022\022\n\ninsertT"
    "ime\030\021 \001(\t\022\022\n\nupdateTime\030\022 \001(\t\022\022\n\ncancelT"
    "ime\030\023 \001(\t\022\024\n\014volumeTraded\030\024 \001(\005\022\024\n\014volum"
    "eRemain\030\025 \001(\005\022\027\n\017volumeCondition\030\026 \001(\005\022\022"
    "\n\ntradingDay\030\027 \001(\005\022\016\n\006active\030\030 \001(\010\022\021\n\top"
    "enclose\030\031 \001(\005\"\220\002\n\023PBTradeNotification\022\017\n"
    "\007orderID\030\001 \002(\004\022\020\n\010brokerID\030\002 \001(\t\022\022\n\ninve"
    "storID\030\003 \001(\t\022\020\n\010exchange\030\004 \001(\t\022\020\n\010contra"
    "ct\030\005 \001(\t\022\016\n\006userID\030\006 \001(\t\022\017\n\007tradeID\030\007 \001("
    "\004\022\021\n\tdirection\030\010 \001(\005\022\022\n\norderSysID\030\t \002(\004"
    "\022\r\n\005price\030\n \002(\001\022\016\n\006volume\030\013 \002(\005\022\021\n\ttrade"
    "Date\030\014 \001(\t\022\021\n\ttradeTime\030\r \001(\t\022\021\n\ttradeTy"
    "pe\030\016 \001(\005\"\274\002\n\nPBPosition\022\020\n\010exchange\030\001 \002("
    "\t\022\020\n\010contract\030\002 \002(\t\022\021\n\tdirection\030\003 \002(\005\022\020"
    "\n\010position\030\005 \002(\005\022\022\n\nydPosition\030\004 \001(\005\022\024\n\014"
    "positionDate\030\006 \001(\t\022\022\n\nopenVolume\030\007 \001(\005\022\023"
    "\n\013closeVolume\030\010 \001(\005\022\022\n\nopenAmount\030\t \001(\001\022"
    "\023\n\013closeAmount\030\n \001(\001\022\014\n\004cost\030\013 \001(\001\022\020\n\010op"
    "enCost\030\014 \001(\001\022\016\n\006profit\030\r \001(\001\022\023\n\013closePro"
    "fit\030\016 \001(\001\022\021\n\tuseMargin\030\017 \001(\001\022\021\n\thedgeFla"
    "g\030\020 \001(\005\"\213\005\n\rPBAccountInfo\022\020\n\010BrokerID\030\002 "
    "\001(\t\022\021\n\tAccountID\030\003 \001(\t\022\023\n\013PreMortgage\030\004 "
    "\001(\001\022\021\n\tPreCredit\030\005 \001(\001\022\022\n\nPreDeposit\030\006 \001"
    "(\001\022\022\n\nPreBalance\030\007 \001(\001\022\021\n\tPreMargin\030\010 \001("
    "\001\022\024\n\014InterestBase\030\t \001(\001\022\020\n\010Interest\030\n \001("
    "\001\022\017\n\007Deposit\030\013 \001(\001\022\020\n\010Withdraw\030\014 \001(\001\022\024\n\014"
    "FrozenMargin\030\r \001(\001\022\022\n\nFrozenCash\030\016 \001(\001\022\030"
    "\n\020FrozenCommission\030\017 \001(\001\022\022\n\nCurrMargin\030\020"
    " \001(\001\022\016\n\006CashIn\030\021 \001(\001\022\022\n\nCommission\030\022 \001(\001"
    "\022\023\n\013CloseProfit\030\023 \001(\001\022\026\n\016PositionProfit\030"
    "\024 \001(\001\022\017\n\007Balance\030\025 \001(\001\022\021\n\tAvailable\030\026 \001("
    "\001\022\025\n\rWithdrawQuota\030\027 \001(\001\022\017\n\007Reserve\030\030 \001("
    "\001\022\022\n\nTradingDay\030\031 \001(\t\022\024\n\014SettlementID\030\032 "
    "\001(\005\022\016\n\006Credit\030\033 \001(\001\022\020\n\010Mortgage\030\034 \001(\001\022\026\n"
    "\016ExchangeMargin\030\035 \001(\001\022\026\n\016DeliveryMargin\030"
    "\036 \001(\001\022\036\n\026ExchangeDeliveryMargin\030\037 \001(\001\022\026\n"
    "\016ReserveBalance\030  \001(\001", 3501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "businessobj.proto", &protobuf_RegisterTypes);
  PBUserInfo::default_instance_ = new PBUserInfo();
  PBUserInfoList::default_instance_ = new PBUserInfoList();
  PBParam::default_instance_ = new PBParam();
  PBMarketData::default_instance_ = new PBMarketData();
  PBMarketDataList::default_instance_ = new PBMarketDataList();
  PBPricingData::default_instance_ = new PBPricingData();
  PBPricingDataList::default_instance_ = new PBPricingDataList();
  PBStrategyWeight::default_instance_ = new PBStrategyWeight();
  PBStrategy::default_instance_ = new PBStrategy();
  PBStrategyList::default_instance_ = new PBStrategyList();
  PBContractParam::default_instance_ = new PBContractParam();
  PBContractParamList::default_instance_ = new PBContractParamList();
  PBOTCUserParam::default_instance_ = new PBOTCUserParam();
  PBOTCUserParamList::default_instance_ = new PBOTCUserParamList();
  PBOrderInfo::default_instance_ = new PBOrderInfo();
  PBTradeNotification::default_instance_ = new PBTradeNotification();
  PBPosition::default_instance_ = new PBPosition();
  PBAccountInfo::default_instance_ = new PBAccountInfo();
  PBUserInfo::default_instance_->InitAsDefaultInstance();
  PBUserInfoList::default_instance_->InitAsDefaultInstance();
  PBParam::default_instance_->InitAsDefaultInstance();
  PBMarketData::default_instance_->InitAsDefaultInstance();
  PBMarketDataList::default_instance_->InitAsDefaultInstance();
  PBPricingData::default_instance_->InitAsDefaultInstance();
  PBPricingDataList::default_instance_->InitAsDefaultInstance();
  PBStrategyWeight::default_instance_->InitAsDefaultInstance();
  PBStrategy::default_instance_->InitAsDefaultInstance();
  PBStrategyList::default_instance_->InitAsDefaultInstance();
  PBContractParam::default_instance_->InitAsDefaultInstance();
  PBContractParamList::default_instance_->InitAsDefaultInstance();
  PBOTCUserParam::default_instance_->InitAsDefaultInstance();
  PBOTCUserParamList::default_instance_->InitAsDefaultInstance();
  PBOrderInfo::default_instance_->InitAsDefaultInstance();
  PBTradeNotification::default_instance_->InitAsDefaultInstance();
  PBPosition::default_instance_->InitAsDefaultInstance();
  PBAccountInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_businessobj_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_businessobj_2eproto {
  StaticDescriptorInitializer_businessobj_2eproto() {
    protobuf_AddDesc_businessobj_2eproto();
  }
} static_descriptor_initializer_businessobj_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int PBUserInfo::kUserIdFieldNumber;
const int PBUserInfo::kPasswordFieldNumber;
const int PBUserInfo::kBrokerIdFieldNumber;
const int PBUserInfo::kNameFieldNumber;
const int PBUserInfo::kCompanyFieldNumber;
const int PBUserInfo::kEmailFieldNumber;
const int PBUserInfo::kContactNumFieldNumber;
const int PBUserInfo::kRoleFieldNumber;
const int PBUserInfo::kPermissionFieldNumber;
#endif  // !_MSC_VER

PBUserInfo::PBUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBUserInfo)
}

void PBUserInfo::InitAsDefaultInstance() {
}

PBUserInfo::PBUserInfo(const PBUserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBUserInfo)
}

void PBUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0;
  permission_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUserInfo::~PBUserInfo() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBUserInfo)
  SharedDtor();
}

void PBUserInfo::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contactnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUserInfo_descriptor_;
}

const PBUserInfo& PBUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBUserInfo* PBUserInfo::default_instance_ = NULL;

PBUserInfo* PBUserInfo::New(::google::protobuf::Arena* arena) const {
  PBUserInfo* n = new PBUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_brokerid()) {
      brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_company()) {
      company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contactnum()) {
      contactnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    role_ = 0;
  }
  permission_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brokerId;
        break;
      }

      // optional string brokerId = 3;
      case 3: {
        if (tag == 26) {
         parse_brokerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.brokerId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_company;
        break;
      }

      // optional string company = 5;
      case 5: {
        if (tag == 42) {
         parse_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company().data(), this->company().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.company");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (tag == 50) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_contactNum;
        break;
      }

      // optional string contactNum = 7;
      case 7: {
        if (tag == 58) {
         parse_contactNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contactnum().data(), this->contactnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBUserInfo.contactNum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_role;
        break;
      }

      // optional int32 role = 8;
      case 8: {
        if (tag == 64) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_permission;
        break;
      }

      // optional int32 permission = 9;
      case 9: {
        if (tag == 72) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBUserInfo)
  return false;
#undef DO_
}

void PBUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBUserInfo)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string brokerId = 3;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.brokerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string company = 5;
  if (has_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), this->company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->company(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // optional string contactNum = 7;
  if (has_contactnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactnum().data(), this->contactnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.contactNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->contactnum(), output);
  }

  // optional int32 role = 8;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role(), output);
  }

  // optional int32 permission = 9;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->permission(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBUserInfo)
}

::google::protobuf::uint8* PBUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBUserInfo)
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string brokerId = 3;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.brokerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string company = 5;
  if (has_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), this->company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->company(), target);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // optional string contactNum = 7;
  if (has_contactnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contactnum().data(), this->contactnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBUserInfo.contactNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contactnum(), target);
  }

  // optional int32 role = 8;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role(), target);
  }

  // optional int32 permission = 9;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->permission(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBUserInfo)
  return target;
}

int PBUserInfo::ByteSize() const {
  int total_size = 0;

  // required string userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string brokerId = 3;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string company = 5;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string contactNum = 7;
    if (has_contactnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactnum());
    }

    // optional int32 role = 8;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  // optional int32 permission = 9;
  if (has_permission()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->permission());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBUserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBUserInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUserInfo::MergeFrom(const PBUserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_brokerid()) {
      set_has_brokerid();
      brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_company()) {
      set_has_company();
      company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (from.has_contactnum()) {
      set_has_contactnum();
      contactnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contactnum_);
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_permission()) {
      set_permission(from.permission());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUserInfo::CopyFrom(const PBUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBUserInfo::Swap(PBUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBUserInfo::InternalSwap(PBUserInfo* other) {
  userid_.Swap(&other->userid_);
  password_.Swap(&other->password_);
  brokerid_.Swap(&other->brokerid_);
  name_.Swap(&other->name_);
  company_.Swap(&other->company_);
  email_.Swap(&other->email_);
  contactnum_.Swap(&other->contactnum_);
  std::swap(role_, other->role_);
  std::swap(permission_, other->permission_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUserInfo_descriptor_;
  metadata.reflection = PBUserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBUserInfo

// required string userId = 1;
bool PBUserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBUserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void PBUserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBUserInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& PBUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.userId)
}
 void PBUserInfo::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.userId)
}
 void PBUserInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.userId)
}
 ::std::string* PBUserInfo::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.userId)
}

// optional string password = 2;
bool PBUserInfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBUserInfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void PBUserInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBUserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& PBUserInfo::password() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.password)
}
 void PBUserInfo::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.password)
}
 void PBUserInfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.password)
}
 ::std::string* PBUserInfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.password)
}

// optional string brokerId = 3;
bool PBUserInfo::has_brokerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBUserInfo::set_has_brokerid() {
  _has_bits_[0] |= 0x00000004u;
}
void PBUserInfo::clear_has_brokerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBUserInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokerid();
}
 const ::std::string& PBUserInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.brokerId)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_brokerid(const ::std::string& value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.brokerId)
}
 void PBUserInfo::set_brokerid(const char* value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.brokerId)
}
 void PBUserInfo::set_brokerid(const char* value, size_t size) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.brokerId)
}
 ::std::string* PBUserInfo::mutable_brokerid() {
  set_has_brokerid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.brokerId)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_brokerid() {
  clear_has_brokerid();
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    set_has_brokerid();
  } else {
    clear_has_brokerid();
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.brokerId)
}

// optional string name = 4;
bool PBUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void PBUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PBUserInfo::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.name)
}
 void PBUserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.name)
}
 void PBUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.name)
}
 ::std::string* PBUserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.name)
}

// optional string company = 5;
bool PBUserInfo::has_company() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBUserInfo::set_has_company() {
  _has_bits_[0] |= 0x00000010u;
}
void PBUserInfo::clear_has_company() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBUserInfo::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company();
}
 const ::std::string& PBUserInfo::company() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.company)
  return company_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_company(const ::std::string& value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.company)
}
 void PBUserInfo::set_company(const char* value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.company)
}
 void PBUserInfo::set_company(const char* value, size_t size) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.company)
}
 ::std::string* PBUserInfo::mutable_company() {
  set_has_company();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_company() {
  clear_has_company();
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    set_has_company();
  } else {
    clear_has_company();
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.company)
}

// optional string email = 6;
bool PBUserInfo::has_email() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBUserInfo::set_has_email() {
  _has_bits_[0] |= 0x00000020u;
}
void PBUserInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBUserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& PBUserInfo::email() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.email)
}
 void PBUserInfo::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.email)
}
 void PBUserInfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.email)
}
 ::std::string* PBUserInfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_email() {
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.email)
}

// optional string contactNum = 7;
bool PBUserInfo::has_contactnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBUserInfo::set_has_contactnum() {
  _has_bits_[0] |= 0x00000040u;
}
void PBUserInfo::clear_has_contactnum() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBUserInfo::clear_contactnum() {
  contactnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contactnum();
}
 const ::std::string& PBUserInfo::contactnum() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.contactNum)
  return contactnum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_contactnum(const ::std::string& value) {
  set_has_contactnum();
  contactnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.contactNum)
}
 void PBUserInfo::set_contactnum(const char* value) {
  set_has_contactnum();
  contactnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserInfo.contactNum)
}
 void PBUserInfo::set_contactnum(const char* value, size_t size) {
  set_has_contactnum();
  contactnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserInfo.contactNum)
}
 ::std::string* PBUserInfo::mutable_contactnum() {
  set_has_contactnum();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfo.contactNum)
  return contactnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBUserInfo::release_contactnum() {
  clear_has_contactnum();
  return contactnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBUserInfo::set_allocated_contactnum(::std::string* contactnum) {
  if (contactnum != NULL) {
    set_has_contactnum();
  } else {
    clear_has_contactnum();
  }
  contactnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactnum);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserInfo.contactNum)
}

// optional int32 role = 8;
bool PBUserInfo::has_role() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBUserInfo::set_has_role() {
  _has_bits_[0] |= 0x00000080u;
}
void PBUserInfo::clear_has_role() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBUserInfo::clear_role() {
  role_ = 0;
  clear_has_role();
}
 ::google::protobuf::int32 PBUserInfo::role() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.role)
  return role_;
}
 void PBUserInfo::set_role(::google::protobuf::int32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.role)
}

// optional int32 permission = 9;
bool PBUserInfo::has_permission() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBUserInfo::set_has_permission() {
  _has_bits_[0] |= 0x00000100u;
}
void PBUserInfo::clear_has_permission() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBUserInfo::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
 ::google::protobuf::int32 PBUserInfo::permission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfo.permission)
  return permission_;
}
 void PBUserInfo::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserInfo.permission)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBUserInfoList::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PBUserInfoList::PBUserInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBUserInfoList)
}

void PBUserInfoList::InitAsDefaultInstance() {
}

PBUserInfoList::PBUserInfoList(const PBUserInfoList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBUserInfoList)
}

void PBUserInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUserInfoList::~PBUserInfoList() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBUserInfoList)
  SharedDtor();
}

void PBUserInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBUserInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUserInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUserInfoList_descriptor_;
}

const PBUserInfoList& PBUserInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBUserInfoList* PBUserInfoList::default_instance_ = NULL;

PBUserInfoList* PBUserInfoList::New(::google::protobuf::Arena* arena) const {
  PBUserInfoList* n = new PBUserInfoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBUserInfoList::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBUserInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBUserInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.PBUserInfo userInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_userInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBUserInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBUserInfoList)
  return false;
#undef DO_
}

void PBUserInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBUserInfoList)
  // repeated .Micro.Future.Message.Business.PBUserInfo userInfo = 1;
  for (unsigned int i = 0, n = this->userinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBUserInfoList)
}

::google::protobuf::uint8* PBUserInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBUserInfoList)
  // repeated .Micro.Future.Message.Business.PBUserInfo userInfo = 1;
  for (unsigned int i = 0, n = this->userinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBUserInfoList)
  return target;
}

int PBUserInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.PBUserInfo userInfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUserInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBUserInfoList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBUserInfoList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUserInfoList::MergeFrom(const PBUserInfoList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBUserInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUserInfoList::CopyFrom(const PBUserInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUserInfoList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->userinfo())) return false;
  return true;
}

void PBUserInfoList::Swap(PBUserInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBUserInfoList::InternalSwap(PBUserInfoList* other) {
  userinfo_.UnsafeArenaSwap(&other->userinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBUserInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUserInfoList_descriptor_;
  metadata.reflection = PBUserInfoList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBUserInfoList

// repeated .Micro.Future.Message.Business.PBUserInfo userInfo = 1;
int PBUserInfoList::userinfo_size() const {
  return userinfo_.size();
}
void PBUserInfoList::clear_userinfo() {
  userinfo_.Clear();
}
 const ::Micro::Future::Message::Business::PBUserInfo& PBUserInfoList::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserInfoList.userInfo)
  return userinfo_.Get(index);
}
 ::Micro::Future::Message::Business::PBUserInfo* PBUserInfoList::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserInfoList.userInfo)
  return userinfo_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBUserInfo* PBUserInfoList::add_userinfo() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBUserInfoList.userInfo)
  return userinfo_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBUserInfo >&
PBUserInfoList::userinfo() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBUserInfoList.userInfo)
  return userinfo_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBUserInfo >*
PBUserInfoList::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBUserInfoList.userInfo)
  return &userinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBParam::kNameFieldNumber;
const int PBParam::kValueFieldNumber;
#endif  // !_MSC_VER

PBParam::PBParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBParam)
}

void PBParam::InitAsDefaultInstance() {
}

PBParam::PBParam(const PBParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBParam)
}

void PBParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBParam::~PBParam() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBParam)
  SharedDtor();
}

void PBParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBParam_descriptor_;
}

const PBParam& PBParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBParam* PBParam::default_instance_ = NULL;

PBParam* PBParam::New(::google::protobuf::Arena* arena) const {
  PBParam* n = new PBParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBParam::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBParam.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBParam)
  return false;
#undef DO_
}

void PBParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBParam)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBParam)
}

::google::protobuf::uint8* PBParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBParam)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBParam)
  return target;
}

int PBParam::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required double value = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int PBParam::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required double value = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBParam::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBParam>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBParam::MergeFrom(const PBParam& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBParam::CopyFrom(const PBParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBParam::Swap(PBParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBParam::InternalSwap(PBParam* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBParam_descriptor_;
  metadata.reflection = PBParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBParam

// required string name = 1;
bool PBParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PBParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PBParam::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBParam.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBParam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBParam.name)
}
 void PBParam::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBParam.name)
}
 void PBParam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBParam.name)
}
 ::std::string* PBParam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBParam::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBParam.name)
}

// required double value = 2;
bool PBParam::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBParam::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PBParam::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBParam::clear_value() {
  value_ = 0;
  clear_has_value();
}
 double PBParam::value() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBParam.value)
  return value_;
}
 void PBParam::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBParam.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBMarketData::kSymbolFieldNumber;
const int PBMarketData::kTimeStampFieldNumber;
const int PBMarketData::kPreCloseValueFieldNumber;
const int PBMarketData::kOpenValueFieldNumber;
const int PBMarketData::kTurnoverFieldNumber;
const int PBMarketData::kVolumeFieldNumber;
const int PBMarketData::kHighValueFieldNumber;
const int PBMarketData::kLowValueFieldNumber;
const int PBMarketData::kMatchPriceFieldNumber;
const int PBMarketData::kAskPriceFieldNumber;
const int PBMarketData::kAskVolumeFieldNumber;
const int PBMarketData::kBidPriceFieldNumber;
const int PBMarketData::kBidVolumeFieldNumber;
const int PBMarketData::kPreSettlePriceFieldNumber;
const int PBMarketData::kPriceChangeFieldNumber;
const int PBMarketData::kSettlePriceFieldNumber;
const int PBMarketData::kHighLimitFieldNumber;
const int PBMarketData::kLowLimitFieldNumber;
#endif  // !_MSC_VER

PBMarketData::PBMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBMarketData)
}

void PBMarketData::InitAsDefaultInstance() {
}

PBMarketData::PBMarketData(const PBMarketData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBMarketData)
}

void PBMarketData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preclosevalue_ = 0;
  openvalue_ = 0;
  turnover_ = 0;
  volume_ = 0;
  highvalue_ = 0;
  lowvalue_ = 0;
  matchprice_ = 0;
  presettleprice_ = 0;
  pricechange_ = 0;
  settleprice_ = 0;
  highlimit_ = 0;
  lowlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMarketData::~PBMarketData() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBMarketData)
  SharedDtor();
}

void PBMarketData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMarketData_descriptor_;
}

const PBMarketData& PBMarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBMarketData* PBMarketData::default_instance_ = NULL;

PBMarketData* PBMarketData::New(::google::protobuf::Arena* arena) const {
  PBMarketData* n = new PBMarketData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMarketData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMarketData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(preclosevalue_, lowvalue_);
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    volume_ = 0;
  }
  if (_has_bits_[8 / 32] & 57600u) {
    ZR_(presettleprice_, settleprice_);
    matchprice_ = 0;
  }
  if (_has_bits_[16 / 32] & 196608u) {
    highlimit_ = 0;
    lowlimit_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  askprice_.Clear();
  askvolume_.Clear();
  bidprice_.Clear();
  bidvolume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBMarketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBMarketData.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timeStamp;
        break;
      }

      // optional string timeStamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timeStamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBMarketData.timeStamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_preCloseValue;
        break;
      }

      // optional double preCloseValue = 3;
      case 3: {
        if (tag == 25) {
         parse_preCloseValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preclosevalue_)));
          set_has_preclosevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_openValue;
        break;
      }

      // optional double openValue = 4;
      case 4: {
        if (tag == 33) {
         parse_openValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openvalue_)));
          set_has_openvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_turnover;
        break;
      }

      // optional double turnover = 5;
      case 5: {
        if (tag == 41) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_volume;
        break;
      }

      // optional int32 volume = 6;
      case 6: {
        if (tag == 48) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_highValue;
        break;
      }

      // optional double highValue = 7;
      case 7: {
        if (tag == 57) {
         parse_highValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highvalue_)));
          set_has_highvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lowValue;
        break;
      }

      // optional double lowValue = 8;
      case 8: {
        if (tag == 65) {
         parse_lowValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowvalue_)));
          set_has_lowvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_matchPrice;
        break;
      }

      // optional double matchPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_matchPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matchprice_)));
          set_has_matchprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_askPrice;
        break;
      }

      // repeated double askPrice = 10;
      case 10: {
        if (tag == 81) {
         parse_askPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_askprice())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_askprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_askPrice;
        if (input->ExpectTag(88)) goto parse_askVolume;
        break;
      }

      // repeated int32 askVolume = 11;
      case 11: {
        if (tag == 88) {
         parse_askVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_askvolume())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_askvolume())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_askVolume;
        if (input->ExpectTag(97)) goto parse_bidPrice;
        break;
      }

      // repeated double bidPrice = 12;
      case 12: {
        if (tag == 97) {
         parse_bidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_bidprice())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bidprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_bidPrice;
        if (input->ExpectTag(104)) goto parse_bidVolume;
        break;
      }

      // repeated int32 bidVolume = 13;
      case 13: {
        if (tag == 104) {
         parse_bidVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_bidvolume())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bidvolume())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bidVolume;
        if (input->ExpectTag(113)) goto parse_preSettlePrice;
        break;
      }

      // optional double preSettlePrice = 14;
      case 14: {
        if (tag == 113) {
         parse_preSettlePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettleprice_)));
          set_has_presettleprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_priceChange;
        break;
      }

      // optional double priceChange = 15;
      case 15: {
        if (tag == 121) {
         parse_priceChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricechange_)));
          set_has_pricechange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_settlePrice;
        break;
      }

      // optional double settlePrice = 16;
      case 16: {
        if (tag == 129) {
         parse_settlePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settleprice_)));
          set_has_settleprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_highLimit;
        break;
      }

      // optional int32 highLimit = 17;
      case 17: {
        if (tag == 136) {
         parse_highLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highlimit_)));
          set_has_highlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_lowLimit;
        break;
      }

      // optional int32 lowLimit = 18;
      case 18: {
        if (tag == 144) {
         parse_lowLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowlimit_)));
          set_has_lowlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBMarketData)
  return false;
#undef DO_
}

void PBMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBMarketData)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBMarketData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string timeStamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBMarketData.timeStamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  // optional double preCloseValue = 3;
  if (has_preclosevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preclosevalue(), output);
  }

  // optional double openValue = 4;
  if (has_openvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->openvalue(), output);
  }

  // optional double turnover = 5;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->turnover(), output);
  }

  // optional int32 volume = 6;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // optional double highValue = 7;
  if (has_highvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->highvalue(), output);
  }

  // optional double lowValue = 8;
  if (has_lowvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lowvalue(), output);
  }

  // optional double matchPrice = 9;
  if (has_matchprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->matchprice(), output);
  }

  // repeated double askPrice = 10;
  for (int i = 0; i < this->askprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->askprice(i), output);
  }

  // repeated int32 askVolume = 11;
  for (int i = 0; i < this->askvolume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->askvolume(i), output);
  }

  // repeated double bidPrice = 12;
  for (int i = 0; i < this->bidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->bidprice(i), output);
  }

  // repeated int32 bidVolume = 13;
  for (int i = 0; i < this->bidvolume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->bidvolume(i), output);
  }

  // optional double preSettlePrice = 14;
  if (has_presettleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->presettleprice(), output);
  }

  // optional double priceChange = 15;
  if (has_pricechange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->pricechange(), output);
  }

  // optional double settlePrice = 16;
  if (has_settleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->settleprice(), output);
  }

  // optional int32 highLimit = 17;
  if (has_highlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->highlimit(), output);
  }

  // optional int32 lowLimit = 18;
  if (has_lowlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->lowlimit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBMarketData)
}

::google::protobuf::uint8* PBMarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBMarketData)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBMarketData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string timeStamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBMarketData.timeStamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  // optional double preCloseValue = 3;
  if (has_preclosevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preclosevalue(), target);
  }

  // optional double openValue = 4;
  if (has_openvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->openvalue(), target);
  }

  // optional double turnover = 5;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->turnover(), target);
  }

  // optional int32 volume = 6;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // optional double highValue = 7;
  if (has_highvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->highvalue(), target);
  }

  // optional double lowValue = 8;
  if (has_lowvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lowvalue(), target);
  }

  // optional double matchPrice = 9;
  if (has_matchprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->matchprice(), target);
  }

  // repeated double askPrice = 10;
  for (int i = 0; i < this->askprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->askprice(i), target);
  }

  // repeated int32 askVolume = 11;
  for (int i = 0; i < this->askvolume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->askvolume(i), target);
  }

  // repeated double bidPrice = 12;
  for (int i = 0; i < this->bidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->bidprice(i), target);
  }

  // repeated int32 bidVolume = 13;
  for (int i = 0; i < this->bidvolume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->bidvolume(i), target);
  }

  // optional double preSettlePrice = 14;
  if (has_presettleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->presettleprice(), target);
  }

  // optional double priceChange = 15;
  if (has_pricechange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->pricechange(), target);
  }

  // optional double settlePrice = 16;
  if (has_settleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->settleprice(), target);
  }

  // optional int32 highLimit = 17;
  if (has_highlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->highlimit(), target);
  }

  // optional int32 lowLimit = 18;
  if (has_lowlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->lowlimit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBMarketData)
  return target;
}

int PBMarketData::ByteSize() const {
  int total_size = 0;

  // required string symbol = 1;
  if (has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string timeStamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional double preCloseValue = 3;
    if (has_preclosevalue()) {
      total_size += 1 + 8;
    }

    // optional double openValue = 4;
    if (has_openvalue()) {
      total_size += 1 + 8;
    }

    // optional double turnover = 5;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // optional int32 volume = 6;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional double highValue = 7;
    if (has_highvalue()) {
      total_size += 1 + 8;
    }

    // optional double lowValue = 8;
    if (has_lowvalue()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 57600u) {
    // optional double matchPrice = 9;
    if (has_matchprice()) {
      total_size += 1 + 8;
    }

    // optional double preSettlePrice = 14;
    if (has_presettleprice()) {
      total_size += 1 + 8;
    }

    // optional double priceChange = 15;
    if (has_pricechange()) {
      total_size += 1 + 8;
    }

    // optional double settlePrice = 16;
    if (has_settleprice()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 highLimit = 17;
    if (has_highlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highlimit());
    }

    // optional int32 lowLimit = 18;
    if (has_lowlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowlimit());
    }

  }
  // repeated double askPrice = 10;
  {
    int data_size = 0;
    data_size = 8 * this->askprice_size();
    total_size += 1 * this->askprice_size() + data_size;
  }

  // repeated int32 askVolume = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->askvolume_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->askvolume(i));
    }
    total_size += 1 * this->askvolume_size() + data_size;
  }

  // repeated double bidPrice = 12;
  {
    int data_size = 0;
    data_size = 8 * this->bidprice_size();
    total_size += 1 * this->bidprice_size() + data_size;
  }

  // repeated int32 bidVolume = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidvolume_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bidvolume(i));
    }
    total_size += 1 * this->bidvolume_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMarketData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMarketData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMarketData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMarketData::MergeFrom(const PBMarketData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  askprice_.MergeFrom(from.askprice_);
  askvolume_.MergeFrom(from.askvolume_);
  bidprice_.MergeFrom(from.bidprice_);
  bidvolume_.MergeFrom(from.bidvolume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_timestamp()) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (from.has_preclosevalue()) {
      set_preclosevalue(from.preclosevalue());
    }
    if (from.has_openvalue()) {
      set_openvalue(from.openvalue());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_highvalue()) {
      set_highvalue(from.highvalue());
    }
    if (from.has_lowvalue()) {
      set_lowvalue(from.lowvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matchprice()) {
      set_matchprice(from.matchprice());
    }
    if (from.has_presettleprice()) {
      set_presettleprice(from.presettleprice());
    }
    if (from.has_pricechange()) {
      set_pricechange(from.pricechange());
    }
    if (from.has_settleprice()) {
      set_settleprice(from.settleprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_highlimit()) {
      set_highlimit(from.highlimit());
    }
    if (from.has_lowlimit()) {
      set_lowlimit(from.lowlimit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBMarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMarketData::CopyFrom(const PBMarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMarketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBMarketData::Swap(PBMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMarketData::InternalSwap(PBMarketData* other) {
  symbol_.Swap(&other->symbol_);
  timestamp_.Swap(&other->timestamp_);
  std::swap(preclosevalue_, other->preclosevalue_);
  std::swap(openvalue_, other->openvalue_);
  std::swap(turnover_, other->turnover_);
  std::swap(volume_, other->volume_);
  std::swap(highvalue_, other->highvalue_);
  std::swap(lowvalue_, other->lowvalue_);
  std::swap(matchprice_, other->matchprice_);
  askprice_.UnsafeArenaSwap(&other->askprice_);
  askvolume_.UnsafeArenaSwap(&other->askvolume_);
  bidprice_.UnsafeArenaSwap(&other->bidprice_);
  bidvolume_.UnsafeArenaSwap(&other->bidvolume_);
  std::swap(presettleprice_, other->presettleprice_);
  std::swap(pricechange_, other->pricechange_);
  std::swap(settleprice_, other->settleprice_);
  std::swap(highlimit_, other->highlimit_);
  std::swap(lowlimit_, other->lowlimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMarketData_descriptor_;
  metadata.reflection = PBMarketData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMarketData

// required string symbol = 1;
bool PBMarketData::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBMarketData::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void PBMarketData::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBMarketData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& PBMarketData::symbol() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMarketData::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.symbol)
}
 void PBMarketData::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketData.symbol)
}
 void PBMarketData::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketData.symbol)
}
 ::std::string* PBMarketData::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMarketData::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMarketData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketData.symbol)
}

// optional string timeStamp = 2;
bool PBMarketData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBMarketData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void PBMarketData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBMarketData::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
 const ::std::string& PBMarketData::timestamp() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.timeStamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMarketData::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.timeStamp)
}
 void PBMarketData::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketData.timeStamp)
}
 void PBMarketData::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketData.timeStamp)
}
 ::std::string* PBMarketData::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketData.timeStamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMarketData::release_timestamp() {
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMarketData::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketData.timeStamp)
}

// optional double preCloseValue = 3;
bool PBMarketData::has_preclosevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBMarketData::set_has_preclosevalue() {
  _has_bits_[0] |= 0x00000004u;
}
void PBMarketData::clear_has_preclosevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBMarketData::clear_preclosevalue() {
  preclosevalue_ = 0;
  clear_has_preclosevalue();
}
 double PBMarketData::preclosevalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.preCloseValue)
  return preclosevalue_;
}
 void PBMarketData::set_preclosevalue(double value) {
  set_has_preclosevalue();
  preclosevalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.preCloseValue)
}

// optional double openValue = 4;
bool PBMarketData::has_openvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBMarketData::set_has_openvalue() {
  _has_bits_[0] |= 0x00000008u;
}
void PBMarketData::clear_has_openvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBMarketData::clear_openvalue() {
  openvalue_ = 0;
  clear_has_openvalue();
}
 double PBMarketData::openvalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.openValue)
  return openvalue_;
}
 void PBMarketData::set_openvalue(double value) {
  set_has_openvalue();
  openvalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.openValue)
}

// optional double turnover = 5;
bool PBMarketData::has_turnover() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBMarketData::set_has_turnover() {
  _has_bits_[0] |= 0x00000010u;
}
void PBMarketData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBMarketData::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
 double PBMarketData::turnover() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.turnover)
  return turnover_;
}
 void PBMarketData::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.turnover)
}

// optional int32 volume = 6;
bool PBMarketData::has_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBMarketData::set_has_volume() {
  _has_bits_[0] |= 0x00000020u;
}
void PBMarketData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBMarketData::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 PBMarketData::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.volume)
  return volume_;
}
 void PBMarketData::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.volume)
}

// optional double highValue = 7;
bool PBMarketData::has_highvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBMarketData::set_has_highvalue() {
  _has_bits_[0] |= 0x00000040u;
}
void PBMarketData::clear_has_highvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBMarketData::clear_highvalue() {
  highvalue_ = 0;
  clear_has_highvalue();
}
 double PBMarketData::highvalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.highValue)
  return highvalue_;
}
 void PBMarketData::set_highvalue(double value) {
  set_has_highvalue();
  highvalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.highValue)
}

// optional double lowValue = 8;
bool PBMarketData::has_lowvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBMarketData::set_has_lowvalue() {
  _has_bits_[0] |= 0x00000080u;
}
void PBMarketData::clear_has_lowvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBMarketData::clear_lowvalue() {
  lowvalue_ = 0;
  clear_has_lowvalue();
}
 double PBMarketData::lowvalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.lowValue)
  return lowvalue_;
}
 void PBMarketData::set_lowvalue(double value) {
  set_has_lowvalue();
  lowvalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.lowValue)
}

// optional double matchPrice = 9;
bool PBMarketData::has_matchprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBMarketData::set_has_matchprice() {
  _has_bits_[0] |= 0x00000100u;
}
void PBMarketData::clear_has_matchprice() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBMarketData::clear_matchprice() {
  matchprice_ = 0;
  clear_has_matchprice();
}
 double PBMarketData::matchprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.matchPrice)
  return matchprice_;
}
 void PBMarketData::set_matchprice(double value) {
  set_has_matchprice();
  matchprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.matchPrice)
}

// repeated double askPrice = 10;
int PBMarketData::askprice_size() const {
  return askprice_.size();
}
void PBMarketData::clear_askprice() {
  askprice_.Clear();
}
 double PBMarketData::askprice(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.askPrice)
  return askprice_.Get(index);
}
 void PBMarketData::set_askprice(int index, double value) {
  askprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.askPrice)
}
 void PBMarketData::add_askprice(double value) {
  askprice_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.askPrice)
}
 const ::google::protobuf::RepeatedField< double >&
PBMarketData::askprice() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.askPrice)
  return askprice_;
}
 ::google::protobuf::RepeatedField< double >*
PBMarketData::mutable_askprice() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.askPrice)
  return &askprice_;
}

// repeated int32 askVolume = 11;
int PBMarketData::askvolume_size() const {
  return askvolume_.size();
}
void PBMarketData::clear_askvolume() {
  askvolume_.Clear();
}
 ::google::protobuf::int32 PBMarketData::askvolume(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.askVolume)
  return askvolume_.Get(index);
}
 void PBMarketData::set_askvolume(int index, ::google::protobuf::int32 value) {
  askvolume_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.askVolume)
}
 void PBMarketData::add_askvolume(::google::protobuf::int32 value) {
  askvolume_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.askVolume)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBMarketData::askvolume() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.askVolume)
  return askvolume_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBMarketData::mutable_askvolume() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.askVolume)
  return &askvolume_;
}

// repeated double bidPrice = 12;
int PBMarketData::bidprice_size() const {
  return bidprice_.size();
}
void PBMarketData::clear_bidprice() {
  bidprice_.Clear();
}
 double PBMarketData::bidprice(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.bidPrice)
  return bidprice_.Get(index);
}
 void PBMarketData::set_bidprice(int index, double value) {
  bidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.bidPrice)
}
 void PBMarketData::add_bidprice(double value) {
  bidprice_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.bidPrice)
}
 const ::google::protobuf::RepeatedField< double >&
PBMarketData::bidprice() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.bidPrice)
  return bidprice_;
}
 ::google::protobuf::RepeatedField< double >*
PBMarketData::mutable_bidprice() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.bidPrice)
  return &bidprice_;
}

// repeated int32 bidVolume = 13;
int PBMarketData::bidvolume_size() const {
  return bidvolume_.size();
}
void PBMarketData::clear_bidvolume() {
  bidvolume_.Clear();
}
 ::google::protobuf::int32 PBMarketData::bidvolume(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.bidVolume)
  return bidvolume_.Get(index);
}
 void PBMarketData::set_bidvolume(int index, ::google::protobuf::int32 value) {
  bidvolume_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.bidVolume)
}
 void PBMarketData::add_bidvolume(::google::protobuf::int32 value) {
  bidvolume_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.bidVolume)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBMarketData::bidvolume() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.bidVolume)
  return bidvolume_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBMarketData::mutable_bidvolume() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.bidVolume)
  return &bidvolume_;
}

// optional double preSettlePrice = 14;
bool PBMarketData::has_presettleprice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PBMarketData::set_has_presettleprice() {
  _has_bits_[0] |= 0x00002000u;
}
void PBMarketData::clear_has_presettleprice() {
  _has_bits_[0] &= ~0x00002000u;
}
void PBMarketData::clear_presettleprice() {
  presettleprice_ = 0;
  clear_has_presettleprice();
}
 double PBMarketData::presettleprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.preSettlePrice)
  return presettleprice_;
}
 void PBMarketData::set_presettleprice(double value) {
  set_has_presettleprice();
  presettleprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.preSettlePrice)
}

// optional double priceChange = 15;
bool PBMarketData::has_pricechange() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PBMarketData::set_has_pricechange() {
  _has_bits_[0] |= 0x00004000u;
}
void PBMarketData::clear_has_pricechange() {
  _has_bits_[0] &= ~0x00004000u;
}
void PBMarketData::clear_pricechange() {
  pricechange_ = 0;
  clear_has_pricechange();
}
 double PBMarketData::pricechange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.priceChange)
  return pricechange_;
}
 void PBMarketData::set_pricechange(double value) {
  set_has_pricechange();
  pricechange_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.priceChange)
}

// optional double settlePrice = 16;
bool PBMarketData::has_settleprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PBMarketData::set_has_settleprice() {
  _has_bits_[0] |= 0x00008000u;
}
void PBMarketData::clear_has_settleprice() {
  _has_bits_[0] &= ~0x00008000u;
}
void PBMarketData::clear_settleprice() {
  settleprice_ = 0;
  clear_has_settleprice();
}
 double PBMarketData::settleprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.settlePrice)
  return settleprice_;
}
 void PBMarketData::set_settleprice(double value) {
  set_has_settleprice();
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.settlePrice)
}

// optional int32 highLimit = 17;
bool PBMarketData::has_highlimit() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PBMarketData::set_has_highlimit() {
  _has_bits_[0] |= 0x00010000u;
}
void PBMarketData::clear_has_highlimit() {
  _has_bits_[0] &= ~0x00010000u;
}
void PBMarketData::clear_highlimit() {
  highlimit_ = 0;
  clear_has_highlimit();
}
 ::google::protobuf::int32 PBMarketData::highlimit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.highLimit)
  return highlimit_;
}
 void PBMarketData::set_highlimit(::google::protobuf::int32 value) {
  set_has_highlimit();
  highlimit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.highLimit)
}

// optional int32 lowLimit = 18;
bool PBMarketData::has_lowlimit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PBMarketData::set_has_lowlimit() {
  _has_bits_[0] |= 0x00020000u;
}
void PBMarketData::clear_has_lowlimit() {
  _has_bits_[0] &= ~0x00020000u;
}
void PBMarketData::clear_lowlimit() {
  lowlimit_ = 0;
  clear_has_lowlimit();
}
 ::google::protobuf::int32 PBMarketData::lowlimit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.lowLimit)
  return lowlimit_;
}
 void PBMarketData::set_lowlimit(::google::protobuf::int32 value) {
  set_has_lowlimit();
  lowlimit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.lowLimit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBMarketDataList::kMdListFieldNumber;
#endif  // !_MSC_VER

PBMarketDataList::PBMarketDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBMarketDataList)
}

void PBMarketDataList::InitAsDefaultInstance() {
}

PBMarketDataList::PBMarketDataList(const PBMarketDataList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBMarketDataList)
}

void PBMarketDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMarketDataList::~PBMarketDataList() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBMarketDataList)
  SharedDtor();
}

void PBMarketDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMarketDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMarketDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMarketDataList_descriptor_;
}

const PBMarketDataList& PBMarketDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBMarketDataList* PBMarketDataList::default_instance_ = NULL;

PBMarketDataList* PBMarketDataList::New(::google::protobuf::Arena* arena) const {
  PBMarketDataList* n = new PBMarketDataList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMarketDataList::Clear() {
  mdlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBMarketDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBMarketDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.PBMarketData mdList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mdList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mdlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mdList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBMarketDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBMarketDataList)
  return false;
#undef DO_
}

void PBMarketDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBMarketDataList)
  // repeated .Micro.Future.Message.Business.PBMarketData mdList = 1;
  for (unsigned int i = 0, n = this->mdlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mdlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBMarketDataList)
}

::google::protobuf::uint8* PBMarketDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBMarketDataList)
  // repeated .Micro.Future.Message.Business.PBMarketData mdList = 1;
  for (unsigned int i = 0, n = this->mdlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mdlist(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBMarketDataList)
  return target;
}

int PBMarketDataList::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.PBMarketData mdList = 1;
  total_size += 1 * this->mdlist_size();
  for (int i = 0; i < this->mdlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mdlist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMarketDataList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMarketDataList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMarketDataList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMarketDataList::MergeFrom(const PBMarketDataList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mdlist_.MergeFrom(from.mdlist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBMarketDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMarketDataList::CopyFrom(const PBMarketDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMarketDataList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mdlist())) return false;
  return true;
}

void PBMarketDataList::Swap(PBMarketDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMarketDataList::InternalSwap(PBMarketDataList* other) {
  mdlist_.UnsafeArenaSwap(&other->mdlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMarketDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMarketDataList_descriptor_;
  metadata.reflection = PBMarketDataList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMarketDataList

// repeated .Micro.Future.Message.Business.PBMarketData mdList = 1;
int PBMarketDataList::mdlist_size() const {
  return mdlist_.size();
}
void PBMarketDataList::clear_mdlist() {
  mdlist_.Clear();
}
 const ::Micro::Future::Message::Business::PBMarketData& PBMarketDataList::mdlist(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketDataList.mdList)
  return mdlist_.Get(index);
}
 ::Micro::Future::Message::Business::PBMarketData* PBMarketDataList::mutable_mdlist(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketDataList.mdList)
  return mdlist_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBMarketData* PBMarketDataList::add_mdlist() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketDataList.mdList)
  return mdlist_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData >&
PBMarketDataList::mdlist() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketDataList.mdList)
  return mdlist_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData >*
PBMarketDataList::mutable_mdlist() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketDataList.mdList)
  return &mdlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBPricingData::kExchangeFieldNumber;
const int PBPricingData::kContractFieldNumber;
const int PBPricingData::kAskPriceFieldNumber;
const int PBPricingData::kBidPriceFieldNumber;
#endif  // !_MSC_VER

PBPricingData::PBPricingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBPricingData)
}

void PBPricingData::InitAsDefaultInstance() {
}

PBPricingData::PBPricingData(const PBPricingData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBPricingData)
}

void PBPricingData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  askprice_ = 0;
  bidprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPricingData::~PBPricingData() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBPricingData)
  SharedDtor();
}

void PBPricingData::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBPricingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPricingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPricingData_descriptor_;
}

const PBPricingData& PBPricingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBPricingData* PBPricingData::default_instance_ = NULL;

PBPricingData* PBPricingData::New(::google::protobuf::Arena* arena) const {
  PBPricingData* n = new PBPricingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBPricingData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBPricingData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(askprice_, bidprice_);
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBPricingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBPricingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exchange = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBPricingData.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // required string contract = 2;
      case 2: {
        if (tag == 18) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBPricingData.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_askPrice;
        break;
      }

      // required double askPrice = 3;
      case 3: {
        if (tag == 25) {
         parse_askPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bidPrice;
        break;
      }

      // required double bidPrice = 4;
      case 4: {
        if (tag == 33) {
         parse_bidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBPricingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBPricingData)
  return false;
#undef DO_
}

void PBPricingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBPricingData)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPricingData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchange(), output);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPricingData.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract(), output);
  }

  // required double askPrice = 3;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->askprice(), output);
  }

  // required double bidPrice = 4;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bidprice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBPricingData)
}

::google::protobuf::uint8* PBPricingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBPricingData)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPricingData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchange(), target);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPricingData.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // required double askPrice = 3;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->askprice(), target);
  }

  // required double bidPrice = 4;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bidprice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBPricingData)
  return target;
}

int PBPricingData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_exchange()) {
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  if (has_contract()) {
    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());
  }

  if (has_askprice()) {
    // required double askPrice = 3;
    total_size += 1 + 8;
  }

  if (has_bidprice()) {
    // required double bidPrice = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int PBPricingData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());

    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());

    // required double askPrice = 3;
    total_size += 1 + 8;

    // required double bidPrice = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPricingData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBPricingData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBPricingData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPricingData::MergeFrom(const PBPricingData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBPricingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPricingData::CopyFrom(const PBPricingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPricingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBPricingData::Swap(PBPricingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBPricingData::InternalSwap(PBPricingData* other) {
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  std::swap(askprice_, other->askprice_);
  std::swap(bidprice_, other->bidprice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBPricingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPricingData_descriptor_;
  metadata.reflection = PBPricingData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBPricingData

// required string exchange = 1;
bool PBPricingData::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBPricingData::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
void PBPricingData::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBPricingData::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBPricingData::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPricingData::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.exchange)
}
 void PBPricingData::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPricingData.exchange)
}
 void PBPricingData::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPricingData.exchange)
}
 ::std::string* PBPricingData::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingData.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBPricingData::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPricingData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingData.exchange)
}

// required string contract = 2;
bool PBPricingData::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBPricingData::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
void PBPricingData::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBPricingData::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBPricingData::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPricingData::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.contract)
}
 void PBPricingData::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPricingData.contract)
}
 void PBPricingData::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPricingData.contract)
}
 ::std::string* PBPricingData::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingData.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBPricingData::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPricingData::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingData.contract)
}

// required double askPrice = 3;
bool PBPricingData::has_askprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBPricingData::set_has_askprice() {
  _has_bits_[0] |= 0x00000004u;
}
void PBPricingData::clear_has_askprice() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBPricingData::clear_askprice() {
  askprice_ = 0;
  clear_has_askprice();
}
 double PBPricingData::askprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.askPrice)
  return askprice_;
}
 void PBPricingData::set_askprice(double value) {
  set_has_askprice();
  askprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.askPrice)
}

// required double bidPrice = 4;
bool PBPricingData::has_bidprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBPricingData::set_has_bidprice() {
  _has_bits_[0] |= 0x00000008u;
}
void PBPricingData::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBPricingData::clear_bidprice() {
  bidprice_ = 0;
  clear_has_bidprice();
}
 double PBPricingData::bidprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.bidPrice)
  return bidprice_;
}
 void PBPricingData::set_bidprice(double value) {
  set_has_bidprice();
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.bidPrice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBPricingDataList::kPricingFieldNumber;
#endif  // !_MSC_VER

PBPricingDataList::PBPricingDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBPricingDataList)
}

void PBPricingDataList::InitAsDefaultInstance() {
}

PBPricingDataList::PBPricingDataList(const PBPricingDataList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBPricingDataList)
}

void PBPricingDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPricingDataList::~PBPricingDataList() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBPricingDataList)
  SharedDtor();
}

void PBPricingDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPricingDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPricingDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPricingDataList_descriptor_;
}

const PBPricingDataList& PBPricingDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBPricingDataList* PBPricingDataList::default_instance_ = NULL;

PBPricingDataList* PBPricingDataList::New(::google::protobuf::Arena* arena) const {
  PBPricingDataList* n = new PBPricingDataList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBPricingDataList::Clear() {
  pricing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBPricingDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBPricingDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.PBPricingData pricing = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pricing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pricing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pricing;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBPricingDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBPricingDataList)
  return false;
#undef DO_
}

void PBPricingDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBPricingDataList)
  // repeated .Micro.Future.Message.Business.PBPricingData pricing = 1;
  for (unsigned int i = 0, n = this->pricing_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pricing(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBPricingDataList)
}

::google::protobuf::uint8* PBPricingDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBPricingDataList)
  // repeated .Micro.Future.Message.Business.PBPricingData pricing = 1;
  for (unsigned int i = 0, n = this->pricing_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pricing(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBPricingDataList)
  return target;
}

int PBPricingDataList::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.PBPricingData pricing = 1;
  total_size += 1 * this->pricing_size();
  for (int i = 0; i < this->pricing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pricing(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPricingDataList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBPricingDataList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBPricingDataList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPricingDataList::MergeFrom(const PBPricingDataList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pricing_.MergeFrom(from.pricing_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBPricingDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPricingDataList::CopyFrom(const PBPricingDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPricingDataList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pricing())) return false;
  return true;
}

void PBPricingDataList::Swap(PBPricingDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBPricingDataList::InternalSwap(PBPricingDataList* other) {
  pricing_.UnsafeArenaSwap(&other->pricing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBPricingDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPricingDataList_descriptor_;
  metadata.reflection = PBPricingDataList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBPricingDataList

// repeated .Micro.Future.Message.Business.PBPricingData pricing = 1;
int PBPricingDataList::pricing_size() const {
  return pricing_.size();
}
void PBPricingDataList::clear_pricing() {
  pricing_.Clear();
}
 const ::Micro::Future::Message::Business::PBPricingData& PBPricingDataList::pricing(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingDataList.pricing)
  return pricing_.Get(index);
}
 ::Micro::Future::Message::Business::PBPricingData* PBPricingDataList::mutable_pricing(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingDataList.pricing)
  return pricing_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBPricingData* PBPricingDataList::add_pricing() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBPricingDataList.pricing)
  return pricing_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData >&
PBPricingDataList::pricing() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBPricingDataList.pricing)
  return pricing_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData >*
PBPricingDataList::mutable_pricing() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBPricingDataList.pricing)
  return &pricing_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBStrategyWeight::kExchangeFieldNumber;
const int PBStrategyWeight::kContractFieldNumber;
const int PBStrategyWeight::kWeightFieldNumber;
#endif  // !_MSC_VER

PBStrategyWeight::PBStrategyWeight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBStrategyWeight)
}

void PBStrategyWeight::InitAsDefaultInstance() {
}

PBStrategyWeight::PBStrategyWeight(const PBStrategyWeight& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBStrategyWeight)
}

void PBStrategyWeight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStrategyWeight::~PBStrategyWeight() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBStrategyWeight)
  SharedDtor();
}

void PBStrategyWeight::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBStrategyWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBStrategyWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStrategyWeight_descriptor_;
}

const PBStrategyWeight& PBStrategyWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBStrategyWeight* PBStrategyWeight::default_instance_ = NULL;

PBStrategyWeight* PBStrategyWeight::New(::google::protobuf::Arena* arena) const {
  PBStrategyWeight* n = new PBStrategyWeight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBStrategyWeight::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBStrategyWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBStrategyWeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exchange = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategyWeight.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_contract;
        break;
      }

      // required string contract = 4;
      case 4: {
        if (tag == 34) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategyWeight.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_weight;
        break;
      }

      // required float weight = 6;
      case 6: {
        if (tag == 53) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBStrategyWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBStrategyWeight)
  return false;
#undef DO_
}

void PBStrategyWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBStrategyWeight)
  // required string exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategyWeight.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // required string contract = 4;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategyWeight.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contract(), output);
  }

  // required float weight = 6;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBStrategyWeight)
}

::google::protobuf::uint8* PBStrategyWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBStrategyWeight)
  // required string exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategyWeight.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // required string contract = 4;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategyWeight.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contract(), target);
  }

  // required float weight = 6;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBStrategyWeight)
  return target;
}

int PBStrategyWeight::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_exchange()) {
    // required string exchange = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  if (has_contract()) {
    // required string contract = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());
  }

  if (has_weight()) {
    // required float weight = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int PBStrategyWeight::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string exchange = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());

    // required string contract = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());

    // required float weight = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBStrategyWeight::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBStrategyWeight* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBStrategyWeight>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStrategyWeight::MergeFrom(const PBStrategyWeight& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBStrategyWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStrategyWeight::CopyFrom(const PBStrategyWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStrategyWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBStrategyWeight::Swap(PBStrategyWeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBStrategyWeight::InternalSwap(PBStrategyWeight* other) {
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBStrategyWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBStrategyWeight_descriptor_;
  metadata.reflection = PBStrategyWeight_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBStrategyWeight

// required string exchange = 3;
bool PBStrategyWeight::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBStrategyWeight::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
void PBStrategyWeight::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBStrategyWeight::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBStrategyWeight::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategyWeight.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategyWeight::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategyWeight.exchange)
}
 void PBStrategyWeight::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategyWeight.exchange)
}
 void PBStrategyWeight::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategyWeight.exchange)
}
 ::std::string* PBStrategyWeight::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategyWeight.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategyWeight::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategyWeight::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategyWeight.exchange)
}

// required string contract = 4;
bool PBStrategyWeight::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBStrategyWeight::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
void PBStrategyWeight::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBStrategyWeight::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBStrategyWeight::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategyWeight.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategyWeight::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategyWeight.contract)
}
 void PBStrategyWeight::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategyWeight.contract)
}
 void PBStrategyWeight::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategyWeight.contract)
}
 ::std::string* PBStrategyWeight::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategyWeight.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategyWeight::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategyWeight::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategyWeight.contract)
}

// required float weight = 6;
bool PBStrategyWeight::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBStrategyWeight::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void PBStrategyWeight::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBStrategyWeight::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 float PBStrategyWeight::weight() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategyWeight.weight)
  return weight_;
}
 void PBStrategyWeight::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategyWeight.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBStrategy::kExchangeFieldNumber;
const int PBStrategy::kContractFieldNumber;
const int PBStrategy::kUnderlyingFieldNumber;
const int PBStrategy::kSymbolFieldNumber;
const int PBStrategy::kDescriptionFieldNumber;
const int PBStrategy::kAllowTradingFieldNumber;
const int PBStrategy::kQuantityFieldNumber;
const int PBStrategy::kDepthFieldNumber;
const int PBStrategy::kSpreadFieldNumber;
const int PBStrategy::kOffsetFieldNumber;
const int PBStrategy::kEnabledFieldNumber;
const int PBStrategy::kWeightContractFieldNumber;
const int PBStrategy::kParamsFieldNumber;
#endif  // !_MSC_VER

PBStrategy::PBStrategy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBStrategy)
}

void PBStrategy::InitAsDefaultInstance() {
}

PBStrategy::PBStrategy(const PBStrategy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBStrategy)
}

void PBStrategy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allowtrading_ = false;
  quantity_ = 0;
  depth_ = 0;
  spread_ = 0;
  offset_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStrategy::~PBStrategy() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBStrategy)
  SharedDtor();
}

void PBStrategy::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBStrategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBStrategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStrategy_descriptor_;
}

const PBStrategy& PBStrategy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBStrategy* PBStrategy::default_instance_ = NULL;

PBStrategy* PBStrategy::New(::google::protobuf::Arena* arena) const {
  PBStrategy* n = new PBStrategy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBStrategy::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBStrategy*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(quantity_, allowtrading_);
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_underlying()) {
      underlying_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(enabled_, spread_);
    offset_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  weightcontract_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBStrategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBStrategy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exchange = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategy.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // required string contract = 2;
      case 2: {
        if (tag == 18) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategy.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_underlying;
        break;
      }

      // optional string underlying = 3;
      case 3: {
        if (tag == 26) {
         parse_underlying:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying().data(), this->underlying().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategy.underlying");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }

      // optional string symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategy.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBStrategy.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allowTrading;
        break;
      }

      // optional bool allowTrading = 6;
      case 6: {
        if (tag == 48) {
         parse_allowTrading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowtrading_)));
          set_has_allowtrading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 7;
      case 7: {
        if (tag == 56) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_depth;
        break;
      }

      // optional int32 depth = 8;
      case 8: {
        if (tag == 64) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_spread;
        break;
      }

      // optional float spread = 9;
      case 9: {
        if (tag == 77) {
         parse_spread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spread_)));
          set_has_spread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_offset;
        break;
      }

      // optional float offset = 10;
      case 10: {
        if (tag == 85) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 11;
      case 11: {
        if (tag == 88) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_weightContract;
        break;
      }

      // repeated .Micro.Future.Message.Business.PBStrategyWeight weightContract = 12;
      case 12: {
        if (tag == 98) {
         parse_weightContract:
          DO_(input->IncrementRecursionDepth());
         parse_loop_weightContract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_weightcontract()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_weightContract;
        if (input->ExpectTag(106)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Micro.Future.Message.Business.PBParam params = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBStrategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBStrategy)
  return false;
#undef DO_
}

void PBStrategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBStrategy)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchange(), output);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract(), output);
  }

  // optional string underlying = 3;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.underlying");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->underlying(), output);
  }

  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional bool allowTrading = 6;
  if (has_allowtrading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allowtrading(), output);
  }

  // optional int32 quantity = 7;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quantity(), output);
  }

  // optional int32 depth = 8;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->depth(), output);
  }

  // optional float spread = 9;
  if (has_spread()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->spread(), output);
  }

  // optional float offset = 10;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->offset(), output);
  }

  // optional bool enabled = 11;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enabled(), output);
  }

  // repeated .Micro.Future.Message.Business.PBStrategyWeight weightContract = 12;
  for (unsigned int i = 0, n = this->weightcontract_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->weightcontract(i), output);
  }

  // repeated .Micro.Future.Message.Business.PBParam params = 13;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBStrategy)
}

::google::protobuf::uint8* PBStrategy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBStrategy)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchange(), target);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string underlying = 3;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.underlying");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->underlying(), target);
  }

  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBStrategy.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional bool allowTrading = 6;
  if (has_allowtrading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allowtrading(), target);
  }

  // optional int32 quantity = 7;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quantity(), target);
  }

  // optional int32 depth = 8;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->depth(), target);
  }

  // optional float spread = 9;
  if (has_spread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->spread(), target);
  }

  // optional float offset = 10;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->offset(), target);
  }

  // optional bool enabled = 11;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enabled(), target);
  }

  // repeated .Micro.Future.Message.Business.PBStrategyWeight weightContract = 12;
  for (unsigned int i = 0, n = this->weightcontract_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->weightcontract(i), target);
  }

  // repeated .Micro.Future.Message.Business.PBParam params = 13;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->params(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBStrategy)
  return target;
}

int PBStrategy::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_exchange()) {
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  if (has_contract()) {
    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());
  }

  return total_size;
}
int PBStrategy::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());

    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string underlying = 3;
    if (has_underlying()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying());
    }

    // optional string symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bool allowTrading = 6;
    if (has_allowtrading()) {
      total_size += 1 + 1;
    }

    // optional int32 quantity = 7;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional int32 depth = 8;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float spread = 9;
    if (has_spread()) {
      total_size += 1 + 4;
    }

    // optional float offset = 10;
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional bool enabled = 11;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Micro.Future.Message.Business.PBStrategyWeight weightContract = 12;
  total_size += 1 * this->weightcontract_size();
  for (int i = 0; i < this->weightcontract_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weightcontract(i));
  }

  // repeated .Micro.Future.Message.Business.PBParam params = 13;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBStrategy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBStrategy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBStrategy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStrategy::MergeFrom(const PBStrategy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  weightcontract_.MergeFrom(from.weightcontract_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_underlying()) {
      set_has_underlying();
      underlying_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlying_);
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_allowtrading()) {
      set_allowtrading(from.allowtrading());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spread()) {
      set_spread(from.spread());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBStrategy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStrategy::CopyFrom(const PBStrategy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStrategy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->weightcontract())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void PBStrategy::Swap(PBStrategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBStrategy::InternalSwap(PBStrategy* other) {
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  underlying_.Swap(&other->underlying_);
  symbol_.Swap(&other->symbol_);
  description_.Swap(&other->description_);
  std::swap(allowtrading_, other->allowtrading_);
  std::swap(quantity_, other->quantity_);
  std::swap(depth_, other->depth_);
  std::swap(spread_, other->spread_);
  std::swap(offset_, other->offset_);
  std::swap(enabled_, other->enabled_);
  weightcontract_.UnsafeArenaSwap(&other->weightcontract_);
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBStrategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBStrategy_descriptor_;
  metadata.reflection = PBStrategy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBStrategy

// required string exchange = 1;
bool PBStrategy::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBStrategy::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
void PBStrategy::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBStrategy::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBStrategy::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.exchange)
}
 void PBStrategy::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.exchange)
}
 void PBStrategy::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.exchange)
}
 ::std::string* PBStrategy::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategy::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.exchange)
}

// required string contract = 2;
bool PBStrategy::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBStrategy::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
void PBStrategy::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBStrategy::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBStrategy::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.contract)
}
 void PBStrategy::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.contract)
}
 void PBStrategy::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.contract)
}
 ::std::string* PBStrategy::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategy::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.contract)
}

// optional string underlying = 3;
bool PBStrategy::has_underlying() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBStrategy::set_has_underlying() {
  _has_bits_[0] |= 0x00000004u;
}
void PBStrategy::clear_has_underlying() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBStrategy::clear_underlying() {
  underlying_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_underlying();
}
 const ::std::string& PBStrategy::underlying() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.underlying)
  return underlying_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_underlying(const ::std::string& value) {
  set_has_underlying();
  underlying_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.underlying)
}
 void PBStrategy::set_underlying(const char* value) {
  set_has_underlying();
  underlying_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.underlying)
}
 void PBStrategy::set_underlying(const char* value, size_t size) {
  set_has_underlying();
  underlying_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.underlying)
}
 ::std::string* PBStrategy::mutable_underlying() {
  set_has_underlying();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.underlying)
  return underlying_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategy::release_underlying() {
  clear_has_underlying();
  return underlying_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_allocated_underlying(::std::string* underlying) {
  if (underlying != NULL) {
    set_has_underlying();
  } else {
    clear_has_underlying();
  }
  underlying_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.underlying)
}

// optional string symbol = 4;
bool PBStrategy::has_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBStrategy::set_has_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
void PBStrategy::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBStrategy::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
 const ::std::string& PBStrategy::symbol() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.symbol)
}
 void PBStrategy::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.symbol)
}
 void PBStrategy::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.symbol)
}
 ::std::string* PBStrategy::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategy::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.symbol)
}

// optional string description = 5;
bool PBStrategy::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBStrategy::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
void PBStrategy::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBStrategy::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& PBStrategy::description() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.description)
}
 void PBStrategy::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.description)
}
 void PBStrategy::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.description)
}
 ::std::string* PBStrategy::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBStrategy::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBStrategy::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.description)
}

// optional bool allowTrading = 6;
bool PBStrategy::has_allowtrading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBStrategy::set_has_allowtrading() {
  _has_bits_[0] |= 0x00000020u;
}
void PBStrategy::clear_has_allowtrading() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBStrategy::clear_allowtrading() {
  allowtrading_ = false;
  clear_has_allowtrading();
}
 bool PBStrategy::allowtrading() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.allowTrading)
  return allowtrading_;
}
 void PBStrategy::set_allowtrading(bool value) {
  set_has_allowtrading();
  allowtrading_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.allowTrading)
}

// optional int32 quantity = 7;
bool PBStrategy::has_quantity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBStrategy::set_has_quantity() {
  _has_bits_[0] |= 0x00000040u;
}
void PBStrategy::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBStrategy::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
 ::google::protobuf::int32 PBStrategy::quantity() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.quantity)
  return quantity_;
}
 void PBStrategy::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.quantity)
}

// optional int32 depth = 8;
bool PBStrategy::has_depth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBStrategy::set_has_depth() {
  _has_bits_[0] |= 0x00000080u;
}
void PBStrategy::clear_has_depth() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBStrategy::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 PBStrategy::depth() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.depth)
  return depth_;
}
 void PBStrategy::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.depth)
}

// optional float spread = 9;
bool PBStrategy::has_spread() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBStrategy::set_has_spread() {
  _has_bits_[0] |= 0x00000100u;
}
void PBStrategy::clear_has_spread() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBStrategy::clear_spread() {
  spread_ = 0;
  clear_has_spread();
}
 float PBStrategy::spread() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.spread)
  return spread_;
}
 void PBStrategy::set_spread(float value) {
  set_has_spread();
  spread_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.spread)
}

// optional float offset = 10;
bool PBStrategy::has_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBStrategy::set_has_offset() {
  _has_bits_[0] |= 0x00000200u;
}
void PBStrategy::clear_has_offset() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBStrategy::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
 float PBStrategy::offset() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.offset)
  return offset_;
}
 void PBStrategy::set_offset(float value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.offset)
}

// optional bool enabled = 11;
bool PBStrategy::has_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PBStrategy::set_has_enabled() {
  _has_bits_[0] |= 0x00000400u;
}
void PBStrategy::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000400u;
}
void PBStrategy::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool PBStrategy::enabled() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.enabled)
  return enabled_;
}
 void PBStrategy::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.enabled)
}

// repeated .Micro.Future.Message.Business.PBStrategyWeight weightContract = 12;
int PBStrategy::weightcontract_size() const {
  return weightcontract_.size();
}
void PBStrategy::clear_weightcontract() {
  weightcontract_.Clear();
}
 const ::Micro::Future::Message::Business::PBStrategyWeight& PBStrategy::weightcontract(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.weightContract)
  return weightcontract_.Get(index);
}
 ::Micro::Future::Message::Business::PBStrategyWeight* PBStrategy::mutable_weightcontract(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.weightContract)
  return weightcontract_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBStrategyWeight* PBStrategy::add_weightcontract() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBStrategy.weightContract)
  return weightcontract_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategyWeight >&
PBStrategy::weightcontract() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBStrategy.weightContract)
  return weightcontract_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategyWeight >*
PBStrategy::mutable_weightcontract() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBStrategy.weightContract)
  return &weightcontract_;
}

// repeated .Micro.Future.Message.Business.PBParam params = 13;
int PBStrategy::params_size() const {
  return params_.size();
}
void PBStrategy::clear_params() {
  params_.Clear();
}
 const ::Micro::Future::Message::Business::PBParam& PBStrategy::params(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.params)
  return params_.Get(index);
}
 ::Micro::Future::Message::Business::PBParam* PBStrategy::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.params)
  return params_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBParam* PBStrategy::add_params() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBStrategy.params)
  return params_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBParam >&
PBStrategy::params() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBStrategy.params)
  return params_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBParam >*
PBStrategy::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBStrategy.params)
  return &params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBStrategyList::kStrategyFieldNumber;
#endif  // !_MSC_VER

PBStrategyList::PBStrategyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBStrategyList)
}

void PBStrategyList::InitAsDefaultInstance() {
}

PBStrategyList::PBStrategyList(const PBStrategyList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBStrategyList)
}

void PBStrategyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStrategyList::~PBStrategyList() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBStrategyList)
  SharedDtor();
}

void PBStrategyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBStrategyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBStrategyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStrategyList_descriptor_;
}

const PBStrategyList& PBStrategyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBStrategyList* PBStrategyList::default_instance_ = NULL;

PBStrategyList* PBStrategyList::New(::google::protobuf::Arena* arena) const {
  PBStrategyList* n = new PBStrategyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBStrategyList::Clear() {
  strategy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBStrategyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBStrategyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.PBStrategy strategy = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_strategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_strategy;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBStrategyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBStrategyList)
  return false;
#undef DO_
}

void PBStrategyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBStrategyList)
  // repeated .Micro.Future.Message.Business.PBStrategy strategy = 1;
  for (unsigned int i = 0, n = this->strategy_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strategy(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBStrategyList)
}

::google::protobuf::uint8* PBStrategyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBStrategyList)
  // repeated .Micro.Future.Message.Business.PBStrategy strategy = 1;
  for (unsigned int i = 0, n = this->strategy_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strategy(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBStrategyList)
  return target;
}

int PBStrategyList::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.PBStrategy strategy = 1;
  total_size += 1 * this->strategy_size();
  for (int i = 0; i < this->strategy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategy(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBStrategyList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBStrategyList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBStrategyList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStrategyList::MergeFrom(const PBStrategyList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  strategy_.MergeFrom(from.strategy_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBStrategyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStrategyList::CopyFrom(const PBStrategyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStrategyList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strategy())) return false;
  return true;
}

void PBStrategyList::Swap(PBStrategyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBStrategyList::InternalSwap(PBStrategyList* other) {
  strategy_.UnsafeArenaSwap(&other->strategy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBStrategyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBStrategyList_descriptor_;
  metadata.reflection = PBStrategyList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBStrategyList

// repeated .Micro.Future.Message.Business.PBStrategy strategy = 1;
int PBStrategyList::strategy_size() const {
  return strategy_.size();
}
void PBStrategyList::clear_strategy() {
  strategy_.Clear();
}
 const ::Micro::Future::Message::Business::PBStrategy& PBStrategyList::strategy(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_.Get(index);
}
 ::Micro::Future::Message::Business::PBStrategy* PBStrategyList::mutable_strategy(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBStrategy* PBStrategyList::add_strategy() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy >&
PBStrategyList::strategy() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy >*
PBStrategyList::mutable_strategy() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBStrategyList.strategy)
  return &strategy_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBContractParam::kExchangeFieldNumber;
const int PBContractParam::kContractFieldNumber;
const int PBContractParam::kDepthVolFieldNumber;
const int PBContractParam::kGammaFieldNumber;
#endif  // !_MSC_VER

PBContractParam::PBContractParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBContractParam)
}

void PBContractParam::InitAsDefaultInstance() {
}

PBContractParam::PBContractParam(const PBContractParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBContractParam)
}

void PBContractParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depthvol_ = 0;
  gamma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBContractParam::~PBContractParam() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBContractParam)
  SharedDtor();
}

void PBContractParam::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBContractParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBContractParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBContractParam_descriptor_;
}

const PBContractParam& PBContractParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBContractParam* PBContractParam::default_instance_ = NULL;

PBContractParam* PBContractParam::New(::google::protobuf::Arena* arena) const {
  PBContractParam* n = new PBContractParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBContractParam::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBContractParam*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(depthvol_, gamma_);
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBContractParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBContractParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exchange = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBContractParam.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // required string contract = 2;
      case 2: {
        if (tag == 18) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBContractParam.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_depthVol;
        break;
      }

      // optional int32 depthVol = 3;
      case 3: {
        if (tag == 24) {
         parse_depthVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depthvol_)));
          set_has_depthvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gamma;
        break;
      }

      // optional float gamma = 4;
      case 4: {
        if (tag == 37) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBContractParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBContractParam)
  return false;
#undef DO_
}

void PBContractParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBContractParam)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBContractParam.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchange(), output);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBContractParam.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract(), output);
  }

  // optional int32 depthVol = 3;
  if (has_depthvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depthvol(), output);
  }

  // optional float gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gamma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBContractParam)
}

::google::protobuf::uint8* PBContractParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBContractParam)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBContractParam.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchange(), target);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBContractParam.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional int32 depthVol = 3;
  if (has_depthvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depthvol(), target);
  }

  // optional float gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gamma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBContractParam)
  return target;
}

int PBContractParam::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_exchange()) {
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  if (has_contract()) {
    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());
  }

  return total_size;
}
int PBContractParam::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());

    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional int32 depthVol = 3;
    if (has_depthvol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depthvol());
    }

    // optional float gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBContractParam::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBContractParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBContractParam>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBContractParam::MergeFrom(const PBContractParam& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_depthvol()) {
      set_depthvol(from.depthvol());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBContractParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBContractParam::CopyFrom(const PBContractParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBContractParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBContractParam::Swap(PBContractParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBContractParam::InternalSwap(PBContractParam* other) {
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  std::swap(depthvol_, other->depthvol_);
  std::swap(gamma_, other->gamma_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBContractParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBContractParam_descriptor_;
  metadata.reflection = PBContractParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBContractParam

// required string exchange = 1;
bool PBContractParam::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBContractParam::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
void PBContractParam::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBContractParam::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBContractParam::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBContractParam::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.exchange)
}
 void PBContractParam::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractParam.exchange)
}
 void PBContractParam::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractParam.exchange)
}
 ::std::string* PBContractParam::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParam.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBContractParam::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBContractParam::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractParam.exchange)
}

// required string contract = 2;
bool PBContractParam::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBContractParam::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
void PBContractParam::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBContractParam::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBContractParam::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBContractParam::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.contract)
}
 void PBContractParam::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractParam.contract)
}
 void PBContractParam::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractParam.contract)
}
 ::std::string* PBContractParam::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParam.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBContractParam::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBContractParam::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractParam.contract)
}

// optional int32 depthVol = 3;
bool PBContractParam::has_depthvol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBContractParam::set_has_depthvol() {
  _has_bits_[0] |= 0x00000004u;
}
void PBContractParam::clear_has_depthvol() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBContractParam::clear_depthvol() {
  depthvol_ = 0;
  clear_has_depthvol();
}
 ::google::protobuf::int32 PBContractParam::depthvol() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.depthVol)
  return depthvol_;
}
 void PBContractParam::set_depthvol(::google::protobuf::int32 value) {
  set_has_depthvol();
  depthvol_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.depthVol)
}

// optional float gamma = 4;
bool PBContractParam::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBContractParam::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
void PBContractParam::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBContractParam::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float PBContractParam::gamma() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.gamma)
  return gamma_;
}
 void PBContractParam::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.gamma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBContractParamList::kParamsFieldNumber;
#endif  // !_MSC_VER

PBContractParamList::PBContractParamList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBContractParamList)
}

void PBContractParamList::InitAsDefaultInstance() {
}

PBContractParamList::PBContractParamList(const PBContractParamList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBContractParamList)
}

void PBContractParamList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBContractParamList::~PBContractParamList() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBContractParamList)
  SharedDtor();
}

void PBContractParamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBContractParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBContractParamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBContractParamList_descriptor_;
}

const PBContractParamList& PBContractParamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBContractParamList* PBContractParamList::default_instance_ = NULL;

PBContractParamList* PBContractParamList::New(::google::protobuf::Arena* arena) const {
  PBContractParamList* n = new PBContractParamList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBContractParamList::Clear() {
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBContractParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBContractParamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.PBContractParam params = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBContractParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBContractParamList)
  return false;
#undef DO_
}

void PBContractParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBContractParamList)
  // repeated .Micro.Future.Message.Business.PBContractParam params = 1;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBContractParamList)
}

::google::protobuf::uint8* PBContractParamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBContractParamList)
  // repeated .Micro.Future.Message.Business.PBContractParam params = 1;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBContractParamList)
  return target;
}

int PBContractParamList::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.PBContractParam params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBContractParamList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBContractParamList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBContractParamList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBContractParamList::MergeFrom(const PBContractParamList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  params_.MergeFrom(from.params_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBContractParamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBContractParamList::CopyFrom(const PBContractParamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBContractParamList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void PBContractParamList::Swap(PBContractParamList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBContractParamList::InternalSwap(PBContractParamList* other) {
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBContractParamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBContractParamList_descriptor_;
  metadata.reflection = PBContractParamList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBContractParamList

// repeated .Micro.Future.Message.Business.PBContractParam params = 1;
int PBContractParamList::params_size() const {
  return params_.size();
}
void PBContractParamList::clear_params() {
  params_.Clear();
}
 const ::Micro::Future::Message::Business::PBContractParam& PBContractParamList::params(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParamList.params)
  return params_.Get(index);
}
 ::Micro::Future::Message::Business::PBContractParam* PBContractParamList::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParamList.params)
  return params_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBContractParam* PBContractParamList::add_params() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBContractParamList.params)
  return params_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam >&
PBContractParamList::params() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBContractParamList.params)
  return params_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam >*
PBContractParamList::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBContractParamList.params)
  return &params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBOTCUserParam::kExchangeFieldNumber;
const int PBOTCUserParam::kContractFieldNumber;
const int PBOTCUserParam::kQuantityFieldNumber;
#endif  // !_MSC_VER

PBOTCUserParam::PBOTCUserParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBOTCUserParam)
}

void PBOTCUserParam::InitAsDefaultInstance() {
}

PBOTCUserParam::PBOTCUserParam(const PBOTCUserParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBOTCUserParam)
}

void PBOTCUserParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOTCUserParam::~PBOTCUserParam() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBOTCUserParam)
  SharedDtor();
}

void PBOTCUserParam::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBOTCUserParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBOTCUserParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOTCUserParam_descriptor_;
}

const PBOTCUserParam& PBOTCUserParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBOTCUserParam* PBOTCUserParam::default_instance_ = NULL;

PBOTCUserParam* PBOTCUserParam::New(::google::protobuf::Arena* arena) const {
  PBOTCUserParam* n = new PBOTCUserParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBOTCUserParam::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBOTCUserParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBOTCUserParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exchange = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOTCUserParam.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // required string contract = 2;
      case 2: {
        if (tag == 18) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOTCUserParam.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_quantity;
        break;
      }

      // required float quantity = 3;
      case 3: {
        if (tag == 29) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBOTCUserParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBOTCUserParam)
  return false;
#undef DO_
}

void PBOTCUserParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBOTCUserParam)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOTCUserParam.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchange(), output);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOTCUserParam.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract(), output);
  }

  // required float quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBOTCUserParam)
}

::google::protobuf::uint8* PBOTCUserParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBOTCUserParam)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOTCUserParam.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchange(), target);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOTCUserParam.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // required float quantity = 3;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBOTCUserParam)
  return target;
}

int PBOTCUserParam::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_exchange()) {
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  if (has_contract()) {
    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());
  }

  if (has_quantity()) {
    // required float quantity = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int PBOTCUserParam::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());

    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());

    // required float quantity = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBOTCUserParam::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBOTCUserParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBOTCUserParam>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOTCUserParam::MergeFrom(const PBOTCUserParam& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBOTCUserParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOTCUserParam::CopyFrom(const PBOTCUserParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBOTCUserParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBOTCUserParam::Swap(PBOTCUserParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBOTCUserParam::InternalSwap(PBOTCUserParam* other) {
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  std::swap(quantity_, other->quantity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBOTCUserParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBOTCUserParam_descriptor_;
  metadata.reflection = PBOTCUserParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBOTCUserParam

// required string exchange = 1;
bool PBOTCUserParam::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBOTCUserParam::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
void PBOTCUserParam::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBOTCUserParam::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBOTCUserParam::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParam.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOTCUserParam::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}
 void PBOTCUserParam::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}
 void PBOTCUserParam::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}
 ::std::string* PBOTCUserParam::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParam.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOTCUserParam::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOTCUserParam::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}

// required string contract = 2;
bool PBOTCUserParam::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBOTCUserParam::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
void PBOTCUserParam::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBOTCUserParam::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBOTCUserParam::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParam.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOTCUserParam::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOTCUserParam.contract)
}
 void PBOTCUserParam::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOTCUserParam.contract)
}
 void PBOTCUserParam::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOTCUserParam.contract)
}
 ::std::string* PBOTCUserParam::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParam.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOTCUserParam::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOTCUserParam::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOTCUserParam.contract)
}

// required float quantity = 3;
bool PBOTCUserParam::has_quantity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBOTCUserParam::set_has_quantity() {
  _has_bits_[0] |= 0x00000004u;
}
void PBOTCUserParam::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBOTCUserParam::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
 float PBOTCUserParam::quantity() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParam.quantity)
  return quantity_;
}
 void PBOTCUserParam::set_quantity(float value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOTCUserParam.quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBOTCUserParamList::kParamsFieldNumber;
#endif  // !_MSC_VER

PBOTCUserParamList::PBOTCUserParamList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBOTCUserParamList)
}

void PBOTCUserParamList::InitAsDefaultInstance() {
}

PBOTCUserParamList::PBOTCUserParamList(const PBOTCUserParamList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBOTCUserParamList)
}

void PBOTCUserParamList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOTCUserParamList::~PBOTCUserParamList() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBOTCUserParamList)
  SharedDtor();
}

void PBOTCUserParamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBOTCUserParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBOTCUserParamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOTCUserParamList_descriptor_;
}

const PBOTCUserParamList& PBOTCUserParamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBOTCUserParamList* PBOTCUserParamList::default_instance_ = NULL;

PBOTCUserParamList* PBOTCUserParamList::New(::google::protobuf::Arena* arena) const {
  PBOTCUserParamList* n = new PBOTCUserParamList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBOTCUserParamList::Clear() {
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBOTCUserParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBOTCUserParamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Micro.Future.Message.Business.PBOTCUserParam params = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBOTCUserParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBOTCUserParamList)
  return false;
#undef DO_
}

void PBOTCUserParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBOTCUserParamList)
  // repeated .Micro.Future.Message.Business.PBOTCUserParam params = 1;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBOTCUserParamList)
}

::google::protobuf::uint8* PBOTCUserParamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBOTCUserParamList)
  // repeated .Micro.Future.Message.Business.PBOTCUserParam params = 1;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBOTCUserParamList)
  return target;
}

int PBOTCUserParamList::ByteSize() const {
  int total_size = 0;

  // repeated .Micro.Future.Message.Business.PBOTCUserParam params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBOTCUserParamList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBOTCUserParamList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBOTCUserParamList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOTCUserParamList::MergeFrom(const PBOTCUserParamList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  params_.MergeFrom(from.params_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBOTCUserParamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOTCUserParamList::CopyFrom(const PBOTCUserParamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBOTCUserParamList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void PBOTCUserParamList::Swap(PBOTCUserParamList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBOTCUserParamList::InternalSwap(PBOTCUserParamList* other) {
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBOTCUserParamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBOTCUserParamList_descriptor_;
  metadata.reflection = PBOTCUserParamList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBOTCUserParamList

// repeated .Micro.Future.Message.Business.PBOTCUserParam params = 1;
int PBOTCUserParamList::params_size() const {
  return params_.size();
}
void PBOTCUserParamList::clear_params() {
  params_.Clear();
}
 const ::Micro::Future::Message::Business::PBOTCUserParam& PBOTCUserParamList::params(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_.Get(index);
}
 ::Micro::Future::Message::Business::PBOTCUserParam* PBOTCUserParamList::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_.Mutable(index);
}
 ::Micro::Future::Message::Business::PBOTCUserParam* PBOTCUserParamList::add_params() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam >&
PBOTCUserParamList::params() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_;
}
 ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam >*
PBOTCUserParamList::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return &params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBOrderInfo::kOrderIDFieldNumber;
const int PBOrderInfo::kOrderSysIDFieldNumber;
const int PBOrderInfo::kBrokerIDFieldNumber;
const int PBOrderInfo::kInvestorIDFieldNumber;
const int PBOrderInfo::kExchangeFieldNumber;
const int PBOrderInfo::kContractFieldNumber;
const int PBOrderInfo::kExecTypeFieldNumber;
const int PBOrderInfo::kTifFieldNumber;
const int PBOrderInfo::kTradingTypeFieldNumber;
const int PBOrderInfo::kDirectionFieldNumber;
const int PBOrderInfo::kLimitPriceFieldNumber;
const int PBOrderInfo::kStopPriceFieldNumber;
const int PBOrderInfo::kOrderStatusFieldNumber;
const int PBOrderInfo::kOrderTypeFieldNumber;
const int PBOrderInfo::kVolumeFieldNumber;
const int PBOrderInfo::kInsertTimeFieldNumber;
const int PBOrderInfo::kUpdateTimeFieldNumber;
const int PBOrderInfo::kCancelTimeFieldNumber;
const int PBOrderInfo::kVolumeTradedFieldNumber;
const int PBOrderInfo::kVolumeRemainFieldNumber;
const int PBOrderInfo::kVolumeConditionFieldNumber;
const int PBOrderInfo::kTradingDayFieldNumber;
const int PBOrderInfo::kActiveFieldNumber;
const int PBOrderInfo::kOpencloseFieldNumber;
#endif  // !_MSC_VER

PBOrderInfo::PBOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBOrderInfo)
}

void PBOrderInfo::InitAsDefaultInstance() {
}

PBOrderInfo::PBOrderInfo(const PBOrderInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBOrderInfo)
}

void PBOrderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orderid_ = GOOGLE_ULONGLONG(0);
  ordersysid_ = GOOGLE_ULONGLONG(0);
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exectype_ = 0;
  tif_ = 0;
  tradingtype_ = 0;
  direction_ = 0;
  limitprice_ = 0;
  stopprice_ = 0;
  orderstatus_ = 0;
  ordertype_ = 0;
  volume_ = 0;
  inserttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumetraded_ = 0;
  volumeremain_ = 0;
  volumecondition_ = 0;
  tradingday_ = 0;
  active_ = false;
  openclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOrderInfo::~PBOrderInfo() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBOrderInfo)
  SharedDtor();
}

void PBOrderInfo::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOrderInfo_descriptor_;
}

const PBOrderInfo& PBOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBOrderInfo* PBOrderInfo::default_instance_ = NULL;

PBOrderInfo* PBOrderInfo::New(::google::protobuf::Arena* arena) const {
  PBOrderInfo* n = new PBOrderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBOrderInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBOrderInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(orderid_, ordersysid_);
    ZR_(exectype_, tif_);
    if (has_brokerid()) {
      brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_investorid()) {
      investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(tradingtype_, ordertype_);
    volume_ = 0;
    if (has_inserttime()) {
      inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(volumeremain_, openclose_);
    if (has_updatetime()) {
      updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_canceltime()) {
      canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    volumetraded_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 orderID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orderSysID;
        break;
      }

      // optional uint64 orderSysID = 2;
      case 2: {
        if (tag == 16) {
         parse_orderSysID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ordersysid_)));
          set_has_ordersysid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brokerID;
        break;
      }

      // optional string brokerID = 3;
      case 3: {
        if (tag == 26) {
         parse_brokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.brokerID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_investorID;
        break;
      }

      // optional string investorID = 4;
      case 4: {
        if (tag == 34) {
         parse_investorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.investorID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchange;
        break;
      }

      // optional string exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_contract;
        break;
      }

      // optional string contract = 6;
      case 6: {
        if (tag == 50) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_execType;
        break;
      }

      // optional int32 execType = 7;
      case 7: {
        if (tag == 56) {
         parse_execType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exectype_)));
          set_has_exectype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tif;
        break;
      }

      // optional int32 tif = 8;
      case 8: {
        if (tag == 64) {
         parse_tif:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tif_)));
          set_has_tif();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tradingType;
        break;
      }

      // optional int32 tradingType = 9;
      case 9: {
        if (tag == 72) {
         parse_tradingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingtype_)));
          set_has_tradingtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_direction;
        break;
      }

      // optional int32 direction = 10;
      case 10: {
        if (tag == 80) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_limitPrice;
        break;
      }

      // optional double limitPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_limitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
          set_has_limitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_stopPrice;
        break;
      }

      // optional double stopPrice = 12;
      case 12: {
        if (tag == 97) {
         parse_stopPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));
          set_has_stopprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_orderStatus;
        break;
      }

      // optional int32 orderStatus = 13;
      case 13: {
        if (tag == 104) {
         parse_orderStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderstatus_)));
          set_has_orderstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_orderType;
        break;
      }

      // optional int32 orderType = 14;
      case 14: {
        if (tag == 112) {
         parse_orderType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
          set_has_ordertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_volume;
        break;
      }

      // optional int32 volume = 15;
      case 15: {
        if (tag == 120) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_insertTime;
        break;
      }

      // optional string insertTime = 17;
      case 17: {
        if (tag == 138) {
         parse_insertTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inserttime().data(), this->inserttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.insertTime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_updateTime;
        break;
      }

      // optional string updateTime = 18;
      case 18: {
        if (tag == 146) {
         parse_updateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.updateTime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_cancelTime;
        break;
      }

      // optional string cancelTime = 19;
      case 19: {
        if (tag == 154) {
         parse_cancelTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canceltime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->canceltime().data(), this->canceltime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBOrderInfo.cancelTime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_volumeTraded;
        break;
      }

      // optional int32 volumeTraded = 20;
      case 20: {
        if (tag == 160) {
         parse_volumeTraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetraded_)));
          set_has_volumetraded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_volumeRemain;
        break;
      }

      // optional int32 volumeRemain = 21;
      case 21: {
        if (tag == 168) {
         parse_volumeRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumeremain_)));
          set_has_volumeremain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_volumeCondition;
        break;
      }

      // optional int32 volumeCondition = 22;
      case 22: {
        if (tag == 176) {
         parse_volumeCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumecondition_)));
          set_has_volumecondition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_tradingDay;
        break;
      }

      // optional int32 tradingDay = 23;
      case 23: {
        if (tag == 184) {
         parse_tradingDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_active;
        break;
      }

      // optional bool active = 24;
      case 24: {
        if (tag == 192) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_openclose;
        break;
      }

      // optional int32 openclose = 25;
      case 25: {
        if (tag == 200) {
         parse_openclose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openclose_)));
          set_has_openclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBOrderInfo)
  return false;
#undef DO_
}

void PBOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBOrderInfo)
  // optional uint64 orderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->orderid(), output);
  }

  // optional uint64 orderSysID = 2;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ordersysid(), output);
  }

  // optional string brokerID = 3;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.brokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // optional string investorID = 4;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.investorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->investorid(), output);
  }

  // optional string exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string contract = 6;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->contract(), output);
  }

  // optional int32 execType = 7;
  if (has_exectype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exectype(), output);
  }

  // optional int32 tif = 8;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tif(), output);
  }

  // optional int32 tradingType = 9;
  if (has_tradingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tradingtype(), output);
  }

  // optional int32 direction = 10;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->direction(), output);
  }

  // optional double limitPrice = 11;
  if (has_limitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->limitprice(), output);
  }

  // optional double stopPrice = 12;
  if (has_stopprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->stopprice(), output);
  }

  // optional int32 orderStatus = 13;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->orderstatus(), output);
  }

  // optional int32 orderType = 14;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ordertype(), output);
  }

  // optional int32 volume = 15;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->volume(), output);
  }

  // optional string insertTime = 17;
  if (has_inserttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.insertTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->inserttime(), output);
  }

  // optional string updateTime = 18;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.updateTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->updatetime(), output);
  }

  // optional string cancelTime = 19;
  if (has_canceltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.cancelTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->canceltime(), output);
  }

  // optional int32 volumeTraded = 20;
  if (has_volumetraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->volumetraded(), output);
  }

  // optional int32 volumeRemain = 21;
  if (has_volumeremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->volumeremain(), output);
  }

  // optional int32 volumeCondition = 22;
  if (has_volumecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->volumecondition(), output);
  }

  // optional int32 tradingDay = 23;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->tradingday(), output);
  }

  // optional bool active = 24;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->active(), output);
  }

  // optional int32 openclose = 25;
  if (has_openclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->openclose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBOrderInfo)
}

::google::protobuf::uint8* PBOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBOrderInfo)
  // optional uint64 orderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->orderid(), target);
  }

  // optional uint64 orderSysID = 2;
  if (has_ordersysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ordersysid(), target);
  }

  // optional string brokerID = 3;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.brokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // optional string investorID = 4;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.investorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investorid(), target);
  }

  // optional string exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string contract = 6;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contract(), target);
  }

  // optional int32 execType = 7;
  if (has_exectype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exectype(), target);
  }

  // optional int32 tif = 8;
  if (has_tif()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tif(), target);
  }

  // optional int32 tradingType = 9;
  if (has_tradingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tradingtype(), target);
  }

  // optional int32 direction = 10;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->direction(), target);
  }

  // optional double limitPrice = 11;
  if (has_limitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->limitprice(), target);
  }

  // optional double stopPrice = 12;
  if (has_stopprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->stopprice(), target);
  }

  // optional int32 orderStatus = 13;
  if (has_orderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->orderstatus(), target);
  }

  // optional int32 orderType = 14;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ordertype(), target);
  }

  // optional int32 volume = 15;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->volume(), target);
  }

  // optional string insertTime = 17;
  if (has_inserttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.insertTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->inserttime(), target);
  }

  // optional string updateTime = 18;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.updateTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->updatetime(), target);
  }

  // optional string cancelTime = 19;
  if (has_canceltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBOrderInfo.cancelTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->canceltime(), target);
  }

  // optional int32 volumeTraded = 20;
  if (has_volumetraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->volumetraded(), target);
  }

  // optional int32 volumeRemain = 21;
  if (has_volumeremain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->volumeremain(), target);
  }

  // optional int32 volumeCondition = 22;
  if (has_volumecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->volumecondition(), target);
  }

  // optional int32 tradingDay = 23;
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->tradingday(), target);
  }

  // optional bool active = 24;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->active(), target);
  }

  // optional int32 openclose = 25;
  if (has_openclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->openclose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBOrderInfo)
  return target;
}

int PBOrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 orderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

    // optional uint64 orderSysID = 2;
    if (has_ordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ordersysid());
    }

    // optional string brokerID = 3;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // optional string investorID = 4;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // optional string exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string contract = 6;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional int32 execType = 7;
    if (has_exectype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exectype());
    }

    // optional int32 tif = 8;
    if (has_tif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tif());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 tradingType = 9;
    if (has_tradingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingtype());
    }

    // optional int32 direction = 10;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional double limitPrice = 11;
    if (has_limitprice()) {
      total_size += 1 + 8;
    }

    // optional double stopPrice = 12;
    if (has_stopprice()) {
      total_size += 1 + 8;
    }

    // optional int32 orderStatus = 13;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderstatus());
    }

    // optional int32 orderType = 14;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertype());
    }

    // optional int32 volume = 15;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional string insertTime = 17;
    if (has_inserttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inserttime());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string updateTime = 18;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

    // optional string cancelTime = 19;
    if (has_canceltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canceltime());
    }

    // optional int32 volumeTraded = 20;
    if (has_volumetraded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetraded());
    }

    // optional int32 volumeRemain = 21;
    if (has_volumeremain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumeremain());
    }

    // optional int32 volumeCondition = 22;
    if (has_volumecondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumecondition());
    }

    // optional int32 tradingDay = 23;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // optional bool active = 24;
    if (has_active()) {
      total_size += 2 + 1;
    }

    // optional int32 openclose = 25;
    if (has_openclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openclose());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBOrderInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBOrderInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOrderInfo::MergeFrom(const PBOrderInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_brokerid()) {
      set_has_brokerid();
      brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
    }
    if (from.has_investorid()) {
      set_has_investorid();
      investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
    }
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_exectype()) {
      set_exectype(from.exectype());
    }
    if (from.has_tif()) {
      set_tif(from.tif());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tradingtype()) {
      set_tradingtype(from.tradingtype());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_limitprice()) {
      set_limitprice(from.limitprice());
    }
    if (from.has_stopprice()) {
      set_stopprice(from.stopprice());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_inserttime()) {
      set_has_inserttime();
      inserttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inserttime_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_updatetime()) {
      set_has_updatetime();
      updatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatetime_);
    }
    if (from.has_canceltime()) {
      set_has_canceltime();
      canceltime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canceltime_);
    }
    if (from.has_volumetraded()) {
      set_volumetraded(from.volumetraded());
    }
    if (from.has_volumeremain()) {
      set_volumeremain(from.volumeremain());
    }
    if (from.has_volumecondition()) {
      set_volumecondition(from.volumecondition());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_openclose()) {
      set_openclose(from.openclose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOrderInfo::CopyFrom(const PBOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBOrderInfo::IsInitialized() const {

  return true;
}

void PBOrderInfo::Swap(PBOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBOrderInfo::InternalSwap(PBOrderInfo* other) {
  std::swap(orderid_, other->orderid_);
  std::swap(ordersysid_, other->ordersysid_);
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  std::swap(exectype_, other->exectype_);
  std::swap(tif_, other->tif_);
  std::swap(tradingtype_, other->tradingtype_);
  std::swap(direction_, other->direction_);
  std::swap(limitprice_, other->limitprice_);
  std::swap(stopprice_, other->stopprice_);
  std::swap(orderstatus_, other->orderstatus_);
  std::swap(ordertype_, other->ordertype_);
  std::swap(volume_, other->volume_);
  inserttime_.Swap(&other->inserttime_);
  updatetime_.Swap(&other->updatetime_);
  canceltime_.Swap(&other->canceltime_);
  std::swap(volumetraded_, other->volumetraded_);
  std::swap(volumeremain_, other->volumeremain_);
  std::swap(volumecondition_, other->volumecondition_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(active_, other->active_);
  std::swap(openclose_, other->openclose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBOrderInfo_descriptor_;
  metadata.reflection = PBOrderInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBOrderInfo

// optional uint64 orderID = 1;
bool PBOrderInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBOrderInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
void PBOrderInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBOrderInfo::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
 ::google::protobuf::uint64 PBOrderInfo::orderid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderID)
  return orderid_;
}
 void PBOrderInfo::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderID)
}

// optional uint64 orderSysID = 2;
bool PBOrderInfo::has_ordersysid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBOrderInfo::set_has_ordersysid() {
  _has_bits_[0] |= 0x00000002u;
}
void PBOrderInfo::clear_has_ordersysid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBOrderInfo::clear_ordersysid() {
  ordersysid_ = GOOGLE_ULONGLONG(0);
  clear_has_ordersysid();
}
 ::google::protobuf::uint64 PBOrderInfo::ordersysid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderSysID)
  return ordersysid_;
}
 void PBOrderInfo::set_ordersysid(::google::protobuf::uint64 value) {
  set_has_ordersysid();
  ordersysid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderSysID)
}

// optional string brokerID = 3;
bool PBOrderInfo::has_brokerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBOrderInfo::set_has_brokerid() {
  _has_bits_[0] |= 0x00000004u;
}
void PBOrderInfo::clear_has_brokerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBOrderInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokerid();
}
 const ::std::string& PBOrderInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_brokerid(const ::std::string& value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}
 void PBOrderInfo::set_brokerid(const char* value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}
 void PBOrderInfo::set_brokerid(const char* value, size_t size) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}
 ::std::string* PBOrderInfo::mutable_brokerid() {
  set_has_brokerid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_brokerid() {
  clear_has_brokerid();
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    set_has_brokerid();
  } else {
    clear_has_brokerid();
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}

// optional string investorID = 4;
bool PBOrderInfo::has_investorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBOrderInfo::set_has_investorid() {
  _has_bits_[0] |= 0x00000008u;
}
void PBOrderInfo::clear_has_investorid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBOrderInfo::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_investorid();
}
 const ::std::string& PBOrderInfo::investorid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.investorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_investorid(const ::std::string& value) {
  set_has_investorid();
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.investorID)
}
 void PBOrderInfo::set_investorid(const char* value) {
  set_has_investorid();
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.investorID)
}
 void PBOrderInfo::set_investorid(const char* value, size_t size) {
  set_has_investorid();
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.investorID)
}
 ::std::string* PBOrderInfo::mutable_investorid() {
  set_has_investorid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.investorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_investorid() {
  clear_has_investorid();
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    set_has_investorid();
  } else {
    clear_has_investorid();
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.investorID)
}

// optional string exchange = 5;
bool PBOrderInfo::has_exchange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBOrderInfo::set_has_exchange() {
  _has_bits_[0] |= 0x00000010u;
}
void PBOrderInfo::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBOrderInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBOrderInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.exchange)
}
 void PBOrderInfo::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.exchange)
}
 void PBOrderInfo::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.exchange)
}
 ::std::string* PBOrderInfo::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.exchange)
}

// optional string contract = 6;
bool PBOrderInfo::has_contract() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBOrderInfo::set_has_contract() {
  _has_bits_[0] |= 0x00000020u;
}
void PBOrderInfo::clear_has_contract() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBOrderInfo::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBOrderInfo::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.contract)
}
 void PBOrderInfo::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.contract)
}
 void PBOrderInfo::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.contract)
}
 ::std::string* PBOrderInfo::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.contract)
}

// optional int32 execType = 7;
bool PBOrderInfo::has_exectype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBOrderInfo::set_has_exectype() {
  _has_bits_[0] |= 0x00000040u;
}
void PBOrderInfo::clear_has_exectype() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBOrderInfo::clear_exectype() {
  exectype_ = 0;
  clear_has_exectype();
}
 ::google::protobuf::int32 PBOrderInfo::exectype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.execType)
  return exectype_;
}
 void PBOrderInfo::set_exectype(::google::protobuf::int32 value) {
  set_has_exectype();
  exectype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.execType)
}

// optional int32 tif = 8;
bool PBOrderInfo::has_tif() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBOrderInfo::set_has_tif() {
  _has_bits_[0] |= 0x00000080u;
}
void PBOrderInfo::clear_has_tif() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBOrderInfo::clear_tif() {
  tif_ = 0;
  clear_has_tif();
}
 ::google::protobuf::int32 PBOrderInfo::tif() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.tif)
  return tif_;
}
 void PBOrderInfo::set_tif(::google::protobuf::int32 value) {
  set_has_tif();
  tif_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.tif)
}

// optional int32 tradingType = 9;
bool PBOrderInfo::has_tradingtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBOrderInfo::set_has_tradingtype() {
  _has_bits_[0] |= 0x00000100u;
}
void PBOrderInfo::clear_has_tradingtype() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBOrderInfo::clear_tradingtype() {
  tradingtype_ = 0;
  clear_has_tradingtype();
}
 ::google::protobuf::int32 PBOrderInfo::tradingtype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.tradingType)
  return tradingtype_;
}
 void PBOrderInfo::set_tradingtype(::google::protobuf::int32 value) {
  set_has_tradingtype();
  tradingtype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.tradingType)
}

// optional int32 direction = 10;
bool PBOrderInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBOrderInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000200u;
}
void PBOrderInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBOrderInfo::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 PBOrderInfo::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.direction)
  return direction_;
}
 void PBOrderInfo::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.direction)
}

// optional double limitPrice = 11;
bool PBOrderInfo::has_limitprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PBOrderInfo::set_has_limitprice() {
  _has_bits_[0] |= 0x00000400u;
}
void PBOrderInfo::clear_has_limitprice() {
  _has_bits_[0] &= ~0x00000400u;
}
void PBOrderInfo::clear_limitprice() {
  limitprice_ = 0;
  clear_has_limitprice();
}
 double PBOrderInfo::limitprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.limitPrice)
  return limitprice_;
}
 void PBOrderInfo::set_limitprice(double value) {
  set_has_limitprice();
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.limitPrice)
}

// optional double stopPrice = 12;
bool PBOrderInfo::has_stopprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PBOrderInfo::set_has_stopprice() {
  _has_bits_[0] |= 0x00000800u;
}
void PBOrderInfo::clear_has_stopprice() {
  _has_bits_[0] &= ~0x00000800u;
}
void PBOrderInfo::clear_stopprice() {
  stopprice_ = 0;
  clear_has_stopprice();
}
 double PBOrderInfo::stopprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.stopPrice)
  return stopprice_;
}
 void PBOrderInfo::set_stopprice(double value) {
  set_has_stopprice();
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.stopPrice)
}

// optional int32 orderStatus = 13;
bool PBOrderInfo::has_orderstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PBOrderInfo::set_has_orderstatus() {
  _has_bits_[0] |= 0x00001000u;
}
void PBOrderInfo::clear_has_orderstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
void PBOrderInfo::clear_orderstatus() {
  orderstatus_ = 0;
  clear_has_orderstatus();
}
 ::google::protobuf::int32 PBOrderInfo::orderstatus() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderStatus)
  return orderstatus_;
}
 void PBOrderInfo::set_orderstatus(::google::protobuf::int32 value) {
  set_has_orderstatus();
  orderstatus_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderStatus)
}

// optional int32 orderType = 14;
bool PBOrderInfo::has_ordertype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PBOrderInfo::set_has_ordertype() {
  _has_bits_[0] |= 0x00002000u;
}
void PBOrderInfo::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00002000u;
}
void PBOrderInfo::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
 ::google::protobuf::int32 PBOrderInfo::ordertype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderType)
  return ordertype_;
}
 void PBOrderInfo::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderType)
}

// optional int32 volume = 15;
bool PBOrderInfo::has_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PBOrderInfo::set_has_volume() {
  _has_bits_[0] |= 0x00004000u;
}
void PBOrderInfo::clear_has_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
void PBOrderInfo::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 PBOrderInfo::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volume)
  return volume_;
}
 void PBOrderInfo::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volume)
}

// optional string insertTime = 17;
bool PBOrderInfo::has_inserttime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PBOrderInfo::set_has_inserttime() {
  _has_bits_[0] |= 0x00008000u;
}
void PBOrderInfo::clear_has_inserttime() {
  _has_bits_[0] &= ~0x00008000u;
}
void PBOrderInfo::clear_inserttime() {
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inserttime();
}
 const ::std::string& PBOrderInfo::inserttime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.insertTime)
  return inserttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_inserttime(const ::std::string& value) {
  set_has_inserttime();
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}
 void PBOrderInfo::set_inserttime(const char* value) {
  set_has_inserttime();
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}
 void PBOrderInfo::set_inserttime(const char* value, size_t size) {
  set_has_inserttime();
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}
 ::std::string* PBOrderInfo::mutable_inserttime() {
  set_has_inserttime();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.insertTime)
  return inserttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_inserttime() {
  clear_has_inserttime();
  return inserttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    set_has_inserttime();
  } else {
    clear_has_inserttime();
  }
  inserttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}

// optional string updateTime = 18;
bool PBOrderInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PBOrderInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00010000u;
}
void PBOrderInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00010000u;
}
void PBOrderInfo::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updatetime();
}
 const ::std::string& PBOrderInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.updateTime)
  return updatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}
 void PBOrderInfo::set_updatetime(const char* value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}
 void PBOrderInfo::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}
 ::std::string* PBOrderInfo::mutable_updatetime() {
  set_has_updatetime();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_updatetime() {
  clear_has_updatetime();
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    set_has_updatetime();
  } else {
    clear_has_updatetime();
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}

// optional string cancelTime = 19;
bool PBOrderInfo::has_canceltime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PBOrderInfo::set_has_canceltime() {
  _has_bits_[0] |= 0x00020000u;
}
void PBOrderInfo::clear_has_canceltime() {
  _has_bits_[0] &= ~0x00020000u;
}
void PBOrderInfo::clear_canceltime() {
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canceltime();
}
 const ::std::string& PBOrderInfo::canceltime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
  return canceltime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_canceltime(const ::std::string& value) {
  set_has_canceltime();
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}
 void PBOrderInfo::set_canceltime(const char* value) {
  set_has_canceltime();
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}
 void PBOrderInfo::set_canceltime(const char* value, size_t size) {
  set_has_canceltime();
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}
 ::std::string* PBOrderInfo::mutable_canceltime() {
  set_has_canceltime();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
  return canceltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBOrderInfo::release_canceltime() {
  clear_has_canceltime();
  return canceltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBOrderInfo::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    set_has_canceltime();
  } else {
    clear_has_canceltime();
  }
  canceltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}

// optional int32 volumeTraded = 20;
bool PBOrderInfo::has_volumetraded() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PBOrderInfo::set_has_volumetraded() {
  _has_bits_[0] |= 0x00040000u;
}
void PBOrderInfo::clear_has_volumetraded() {
  _has_bits_[0] &= ~0x00040000u;
}
void PBOrderInfo::clear_volumetraded() {
  volumetraded_ = 0;
  clear_has_volumetraded();
}
 ::google::protobuf::int32 PBOrderInfo::volumetraded() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volumeTraded)
  return volumetraded_;
}
 void PBOrderInfo::set_volumetraded(::google::protobuf::int32 value) {
  set_has_volumetraded();
  volumetraded_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volumeTraded)
}

// optional int32 volumeRemain = 21;
bool PBOrderInfo::has_volumeremain() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PBOrderInfo::set_has_volumeremain() {
  _has_bits_[0] |= 0x00080000u;
}
void PBOrderInfo::clear_has_volumeremain() {
  _has_bits_[0] &= ~0x00080000u;
}
void PBOrderInfo::clear_volumeremain() {
  volumeremain_ = 0;
  clear_has_volumeremain();
}
 ::google::protobuf::int32 PBOrderInfo::volumeremain() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volumeRemain)
  return volumeremain_;
}
 void PBOrderInfo::set_volumeremain(::google::protobuf::int32 value) {
  set_has_volumeremain();
  volumeremain_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volumeRemain)
}

// optional int32 volumeCondition = 22;
bool PBOrderInfo::has_volumecondition() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PBOrderInfo::set_has_volumecondition() {
  _has_bits_[0] |= 0x00100000u;
}
void PBOrderInfo::clear_has_volumecondition() {
  _has_bits_[0] &= ~0x00100000u;
}
void PBOrderInfo::clear_volumecondition() {
  volumecondition_ = 0;
  clear_has_volumecondition();
}
 ::google::protobuf::int32 PBOrderInfo::volumecondition() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volumeCondition)
  return volumecondition_;
}
 void PBOrderInfo::set_volumecondition(::google::protobuf::int32 value) {
  set_has_volumecondition();
  volumecondition_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volumeCondition)
}

// optional int32 tradingDay = 23;
bool PBOrderInfo::has_tradingday() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PBOrderInfo::set_has_tradingday() {
  _has_bits_[0] |= 0x00200000u;
}
void PBOrderInfo::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00200000u;
}
void PBOrderInfo::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
 ::google::protobuf::int32 PBOrderInfo::tradingday() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.tradingDay)
  return tradingday_;
}
 void PBOrderInfo::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.tradingDay)
}

// optional bool active = 24;
bool PBOrderInfo::has_active() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PBOrderInfo::set_has_active() {
  _has_bits_[0] |= 0x00400000u;
}
void PBOrderInfo::clear_has_active() {
  _has_bits_[0] &= ~0x00400000u;
}
void PBOrderInfo::clear_active() {
  active_ = false;
  clear_has_active();
}
 bool PBOrderInfo::active() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.active)
  return active_;
}
 void PBOrderInfo::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.active)
}

// optional int32 openclose = 25;
bool PBOrderInfo::has_openclose() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PBOrderInfo::set_has_openclose() {
  _has_bits_[0] |= 0x00800000u;
}
void PBOrderInfo::clear_has_openclose() {
  _has_bits_[0] &= ~0x00800000u;
}
void PBOrderInfo::clear_openclose() {
  openclose_ = 0;
  clear_has_openclose();
}
 ::google::protobuf::int32 PBOrderInfo::openclose() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.openclose)
  return openclose_;
}
 void PBOrderInfo::set_openclose(::google::protobuf::int32 value) {
  set_has_openclose();
  openclose_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.openclose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBTradeNotification::kOrderIDFieldNumber;
const int PBTradeNotification::kBrokerIDFieldNumber;
const int PBTradeNotification::kInvestorIDFieldNumber;
const int PBTradeNotification::kExchangeFieldNumber;
const int PBTradeNotification::kContractFieldNumber;
const int PBTradeNotification::kUserIDFieldNumber;
const int PBTradeNotification::kTradeIDFieldNumber;
const int PBTradeNotification::kDirectionFieldNumber;
const int PBTradeNotification::kOrderSysIDFieldNumber;
const int PBTradeNotification::kPriceFieldNumber;
const int PBTradeNotification::kVolumeFieldNumber;
const int PBTradeNotification::kTradeDateFieldNumber;
const int PBTradeNotification::kTradeTimeFieldNumber;
const int PBTradeNotification::kTradeTypeFieldNumber;
#endif  // !_MSC_VER

PBTradeNotification::PBTradeNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBTradeNotification)
}

void PBTradeNotification::InitAsDefaultInstance() {
}

PBTradeNotification::PBTradeNotification(const PBTradeNotification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBTradeNotification)
}

void PBTradeNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orderid_ = GOOGLE_ULONGLONG(0);
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_ = GOOGLE_ULONGLONG(0);
  direction_ = 0;
  ordersysid_ = GOOGLE_ULONGLONG(0);
  price_ = 0;
  volume_ = 0;
  tradedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTradeNotification::~PBTradeNotification() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBTradeNotification)
  SharedDtor();
}

void PBTradeNotification::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBTradeNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTradeNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTradeNotification_descriptor_;
}

const PBTradeNotification& PBTradeNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBTradeNotification* PBTradeNotification::default_instance_ = NULL;

PBTradeNotification* PBTradeNotification::New(::google::protobuf::Arena* arena) const {
  PBTradeNotification* n = new PBTradeNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBTradeNotification::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBTradeNotification*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    orderid_ = GOOGLE_ULONGLONG(0);
    if (has_brokerid()) {
      brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_investorid()) {
      investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tradeid_ = GOOGLE_ULONGLONG(0);
    direction_ = 0;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(volume_, price_);
    ordersysid_ = GOOGLE_ULONGLONG(0);
    if (has_tradedate()) {
      tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tradetime()) {
      tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tradetype_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBTradeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBTradeNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 orderID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_brokerID;
        break;
      }

      // optional string brokerID = 2;
      case 2: {
        if (tag == 18) {
         parse_brokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.brokerID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_investorID;
        break;
      }

      // optional string investorID = 3;
      case 3: {
        if (tag == 26) {
         parse_investorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.investorID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exchange;
        break;
      }

      // optional string exchange = 4;
      case 4: {
        if (tag == 34) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_contract;
        break;
      }

      // optional string contract = 5;
      case 5: {
        if (tag == 42) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_userID;
        break;
      }

      // optional string userID = 6;
      case 6: {
        if (tag == 50) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tradeID;
        break;
      }

      // optional uint64 tradeID = 7;
      case 7: {
        if (tag == 56) {
         parse_tradeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tradeid_)));
          set_has_tradeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_direction;
        break;
      }

      // optional int32 direction = 8;
      case 8: {
        if (tag == 64) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_orderSysID;
        break;
      }

      // required uint64 orderSysID = 9;
      case 9: {
        if (tag == 72) {
         parse_orderSysID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ordersysid_)));
          set_has_ordersysid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_price;
        break;
      }

      // required double price = 10;
      case 10: {
        if (tag == 81) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_volume;
        break;
      }

      // required int32 volume = 11;
      case 11: {
        if (tag == 88) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_tradeDate;
        break;
      }

      // optional string tradeDate = 12;
      case 12: {
        if (tag == 98) {
         parse_tradeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradedate().data(), this->tradedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.tradeDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tradeTime;
        break;
      }

      // optional string tradeTime = 13;
      case 13: {
        if (tag == 106) {
         parse_tradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradetime().data(), this->tradetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBTradeNotification.tradeTime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tradeType;
        break;
      }

      // optional int32 tradeType = 14;
      case 14: {
        if (tag == 112) {
         parse_tradeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradetype_)));
          set_has_tradetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBTradeNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBTradeNotification)
  return false;
#undef DO_
}

void PBTradeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBTradeNotification)
  // required uint64 orderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->orderid(), output);
  }

  // optional string brokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.brokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string investorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.investorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  // optional string contract = 5;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->contract(), output);
  }

  // optional string userID = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userid(), output);
  }

  // optional uint64 tradeID = 7;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->tradeid(), output);
  }

  // optional int32 direction = 8;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->direction(), output);
  }

  // required uint64 orderSysID = 9;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ordersysid(), output);
  }

  // required double price = 10;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->price(), output);
  }

  // required int32 volume = 11;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->volume(), output);
  }

  // optional string tradeDate = 12;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.tradeDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->tradedate(), output);
  }

  // optional string tradeTime = 13;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.tradeTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->tradetime(), output);
  }

  // optional int32 tradeType = 14;
  if (has_tradetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tradetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBTradeNotification)
}

::google::protobuf::uint8* PBTradeNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBTradeNotification)
  // required uint64 orderID = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->orderid(), target);
  }

  // optional string brokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.brokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string investorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.investorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  // optional string contract = 5;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->contract(), target);
  }

  // optional string userID = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }

  // optional uint64 tradeID = 7;
  if (has_tradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->tradeid(), target);
  }

  // optional int32 direction = 8;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->direction(), target);
  }

  // required uint64 orderSysID = 9;
  if (has_ordersysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ordersysid(), target);
  }

  // required double price = 10;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->price(), target);
  }

  // required int32 volume = 11;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->volume(), target);
  }

  // optional string tradeDate = 12;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.tradeDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tradedate(), target);
  }

  // optional string tradeTime = 13;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBTradeNotification.tradeTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tradetime(), target);
  }

  // optional int32 tradeType = 14;
  if (has_tradetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tradetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBTradeNotification)
  return target;
}

int PBTradeNotification::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_orderid()) {
    // required uint64 orderID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orderid());
  }

  if (has_ordersysid()) {
    // required uint64 orderSysID = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ordersysid());
  }

  if (has_price()) {
    // required double price = 10;
    total_size += 1 + 8;
  }

  if (has_volume()) {
    // required int32 volume = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  return total_size;
}
int PBTradeNotification::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000701) ^ 0x00000701) == 0) {  // All required fields are present.
    // required uint64 orderID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orderid());

    // required uint64 orderSysID = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ordersysid());

    // required double price = 10;
    total_size += 1 + 8;

    // required int32 volume = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string brokerID = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // optional string investorID = 3;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

    // optional string exchange = 4;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string contract = 5;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string userID = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional uint64 tradeID = 7;
    if (has_tradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tradeid());
    }

    // optional int32 direction = 8;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  if (_has_bits_[11 / 32] & 14336u) {
    // optional string tradeDate = 12;
    if (has_tradedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradedate());
    }

    // optional string tradeTime = 13;
    if (has_tradetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradetime());
    }

    // optional int32 tradeType = 14;
    if (has_tradetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradetype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTradeNotification::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBTradeNotification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBTradeNotification>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTradeNotification::MergeFrom(const PBTradeNotification& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_brokerid()) {
      set_has_brokerid();
      brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
    }
    if (from.has_investorid()) {
      set_has_investorid();
      investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
    }
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_tradedate()) {
      set_has_tradedate();
      tradedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradedate_);
    }
    if (from.has_tradetime()) {
      set_has_tradetime();
      tradetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetime_);
    }
    if (from.has_tradetype()) {
      set_tradetype(from.tradetype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBTradeNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTradeNotification::CopyFrom(const PBTradeNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTradeNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000701) != 0x00000701) return false;

  return true;
}

void PBTradeNotification::Swap(PBTradeNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBTradeNotification::InternalSwap(PBTradeNotification* other) {
  std::swap(orderid_, other->orderid_);
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  userid_.Swap(&other->userid_);
  std::swap(tradeid_, other->tradeid_);
  std::swap(direction_, other->direction_);
  std::swap(ordersysid_, other->ordersysid_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  tradedate_.Swap(&other->tradedate_);
  tradetime_.Swap(&other->tradetime_);
  std::swap(tradetype_, other->tradetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBTradeNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTradeNotification_descriptor_;
  metadata.reflection = PBTradeNotification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBTradeNotification

// required uint64 orderID = 1;
bool PBTradeNotification::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBTradeNotification::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
void PBTradeNotification::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBTradeNotification::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
 ::google::protobuf::uint64 PBTradeNotification::orderid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.orderID)
  return orderid_;
}
 void PBTradeNotification::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.orderID)
}

// optional string brokerID = 2;
bool PBTradeNotification::has_brokerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBTradeNotification::set_has_brokerid() {
  _has_bits_[0] |= 0x00000002u;
}
void PBTradeNotification::clear_has_brokerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBTradeNotification::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokerid();
}
 const ::std::string& PBTradeNotification::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_brokerid(const ::std::string& value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.brokerID)
}
 void PBTradeNotification::set_brokerid(const char* value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.brokerID)
}
 void PBTradeNotification::set_brokerid(const char* value, size_t size) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.brokerID)
}
 ::std::string* PBTradeNotification::mutable_brokerid() {
  set_has_brokerid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_brokerid() {
  clear_has_brokerid();
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    set_has_brokerid();
  } else {
    clear_has_brokerid();
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.brokerID)
}

// optional string investorID = 3;
bool PBTradeNotification::has_investorid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBTradeNotification::set_has_investorid() {
  _has_bits_[0] |= 0x00000004u;
}
void PBTradeNotification::clear_has_investorid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBTradeNotification::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_investorid();
}
 const ::std::string& PBTradeNotification::investorid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.investorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_investorid(const ::std::string& value) {
  set_has_investorid();
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.investorID)
}
 void PBTradeNotification::set_investorid(const char* value) {
  set_has_investorid();
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.investorID)
}
 void PBTradeNotification::set_investorid(const char* value, size_t size) {
  set_has_investorid();
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.investorID)
}
 ::std::string* PBTradeNotification::mutable_investorid() {
  set_has_investorid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.investorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_investorid() {
  clear_has_investorid();
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    set_has_investorid();
  } else {
    clear_has_investorid();
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.investorID)
}

// optional string exchange = 4;
bool PBTradeNotification::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBTradeNotification::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
void PBTradeNotification::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBTradeNotification::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBTradeNotification::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.exchange)
}
 void PBTradeNotification::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.exchange)
}
 void PBTradeNotification::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.exchange)
}
 ::std::string* PBTradeNotification::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.exchange)
}

// optional string contract = 5;
bool PBTradeNotification::has_contract() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBTradeNotification::set_has_contract() {
  _has_bits_[0] |= 0x00000010u;
}
void PBTradeNotification::clear_has_contract() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBTradeNotification::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBTradeNotification::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.contract)
}
 void PBTradeNotification::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.contract)
}
 void PBTradeNotification::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.contract)
}
 ::std::string* PBTradeNotification::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.contract)
}

// optional string userID = 6;
bool PBTradeNotification::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBTradeNotification::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
void PBTradeNotification::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBTradeNotification::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& PBTradeNotification::userid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.userID)
}
 void PBTradeNotification::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.userID)
}
 void PBTradeNotification::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.userID)
}
 ::std::string* PBTradeNotification::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.userID)
}

// optional uint64 tradeID = 7;
bool PBTradeNotification::has_tradeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBTradeNotification::set_has_tradeid() {
  _has_bits_[0] |= 0x00000040u;
}
void PBTradeNotification::clear_has_tradeid() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBTradeNotification::clear_tradeid() {
  tradeid_ = GOOGLE_ULONGLONG(0);
  clear_has_tradeid();
}
 ::google::protobuf::uint64 PBTradeNotification::tradeid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.tradeID)
  return tradeid_;
}
 void PBTradeNotification::set_tradeid(::google::protobuf::uint64 value) {
  set_has_tradeid();
  tradeid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.tradeID)
}

// optional int32 direction = 8;
bool PBTradeNotification::has_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBTradeNotification::set_has_direction() {
  _has_bits_[0] |= 0x00000080u;
}
void PBTradeNotification::clear_has_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBTradeNotification::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 PBTradeNotification::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.direction)
  return direction_;
}
 void PBTradeNotification::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.direction)
}

// required uint64 orderSysID = 9;
bool PBTradeNotification::has_ordersysid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBTradeNotification::set_has_ordersysid() {
  _has_bits_[0] |= 0x00000100u;
}
void PBTradeNotification::clear_has_ordersysid() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBTradeNotification::clear_ordersysid() {
  ordersysid_ = GOOGLE_ULONGLONG(0);
  clear_has_ordersysid();
}
 ::google::protobuf::uint64 PBTradeNotification::ordersysid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.orderSysID)
  return ordersysid_;
}
 void PBTradeNotification::set_ordersysid(::google::protobuf::uint64 value) {
  set_has_ordersysid();
  ordersysid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.orderSysID)
}

// required double price = 10;
bool PBTradeNotification::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBTradeNotification::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
void PBTradeNotification::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBTradeNotification::clear_price() {
  price_ = 0;
  clear_has_price();
}
 double PBTradeNotification::price() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.price)
  return price_;
}
 void PBTradeNotification::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.price)
}

// required int32 volume = 11;
bool PBTradeNotification::has_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PBTradeNotification::set_has_volume() {
  _has_bits_[0] |= 0x00000400u;
}
void PBTradeNotification::clear_has_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
void PBTradeNotification::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 ::google::protobuf::int32 PBTradeNotification::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.volume)
  return volume_;
}
 void PBTradeNotification::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.volume)
}

// optional string tradeDate = 12;
bool PBTradeNotification::has_tradedate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PBTradeNotification::set_has_tradedate() {
  _has_bits_[0] |= 0x00000800u;
}
void PBTradeNotification::clear_has_tradedate() {
  _has_bits_[0] &= ~0x00000800u;
}
void PBTradeNotification::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradedate();
}
 const ::std::string& PBTradeNotification::tradedate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.tradeDate)
  return tradedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_tradedate(const ::std::string& value) {
  set_has_tradedate();
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.tradeDate)
}
 void PBTradeNotification::set_tradedate(const char* value) {
  set_has_tradedate();
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.tradeDate)
}
 void PBTradeNotification::set_tradedate(const char* value, size_t size) {
  set_has_tradedate();
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.tradeDate)
}
 ::std::string* PBTradeNotification::mutable_tradedate() {
  set_has_tradedate();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.tradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_tradedate() {
  clear_has_tradedate();
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    set_has_tradedate();
  } else {
    clear_has_tradedate();
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.tradeDate)
}

// optional string tradeTime = 13;
bool PBTradeNotification::has_tradetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PBTradeNotification::set_has_tradetime() {
  _has_bits_[0] |= 0x00001000u;
}
void PBTradeNotification::clear_has_tradetime() {
  _has_bits_[0] &= ~0x00001000u;
}
void PBTradeNotification::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradetime();
}
 const ::std::string& PBTradeNotification::tradetime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.tradeTime)
  return tradetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_tradetime(const ::std::string& value) {
  set_has_tradetime();
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.tradeTime)
}
 void PBTradeNotification::set_tradetime(const char* value) {
  set_has_tradetime();
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeNotification.tradeTime)
}
 void PBTradeNotification::set_tradetime(const char* value, size_t size) {
  set_has_tradetime();
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeNotification.tradeTime)
}
 ::std::string* PBTradeNotification::mutable_tradetime() {
  set_has_tradetime();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeNotification.tradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBTradeNotification::release_tradetime() {
  clear_has_tradetime();
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBTradeNotification::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    set_has_tradetime();
  } else {
    clear_has_tradetime();
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeNotification.tradeTime)
}

// optional int32 tradeType = 14;
bool PBTradeNotification::has_tradetype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PBTradeNotification::set_has_tradetype() {
  _has_bits_[0] |= 0x00002000u;
}
void PBTradeNotification::clear_has_tradetype() {
  _has_bits_[0] &= ~0x00002000u;
}
void PBTradeNotification::clear_tradetype() {
  tradetype_ = 0;
  clear_has_tradetype();
}
 ::google::protobuf::int32 PBTradeNotification::tradetype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeNotification.tradeType)
  return tradetype_;
}
 void PBTradeNotification::set_tradetype(::google::protobuf::int32 value) {
  set_has_tradetype();
  tradetype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeNotification.tradeType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBPosition::kExchangeFieldNumber;
const int PBPosition::kContractFieldNumber;
const int PBPosition::kDirectionFieldNumber;
const int PBPosition::kPositionFieldNumber;
const int PBPosition::kYdPositionFieldNumber;
const int PBPosition::kPositionDateFieldNumber;
const int PBPosition::kOpenVolumeFieldNumber;
const int PBPosition::kCloseVolumeFieldNumber;
const int PBPosition::kOpenAmountFieldNumber;
const int PBPosition::kCloseAmountFieldNumber;
const int PBPosition::kCostFieldNumber;
const int PBPosition::kOpenCostFieldNumber;
const int PBPosition::kProfitFieldNumber;
const int PBPosition::kCloseProfitFieldNumber;
const int PBPosition::kUseMarginFieldNumber;
const int PBPosition::kHedgeFlagFieldNumber;
#endif  // !_MSC_VER

PBPosition::PBPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBPosition)
}

void PBPosition::InitAsDefaultInstance() {
}

PBPosition::PBPosition(const PBPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBPosition)
}

void PBPosition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  position_ = 0;
  ydposition_ = 0;
  positiondate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openvolume_ = 0;
  closevolume_ = 0;
  openamount_ = 0;
  closeamount_ = 0;
  cost_ = 0;
  opencost_ = 0;
  profit_ = 0;
  closeprofit_ = 0;
  usemargin_ = 0;
  hedgeflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPosition::~PBPosition() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBPosition)
  SharedDtor();
}

void PBPosition::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPosition_descriptor_;
}

const PBPosition& PBPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBPosition* PBPosition::default_instance_ = NULL;

PBPosition* PBPosition::New(::google::protobuf::Arena* arena) const {
  PBPosition* n = new PBPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBPosition::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBPosition*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(direction_, position_);
    ZR_(ydposition_, openvolume_);
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contract()) {
      contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_positiondate()) {
      positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    closevolume_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(openamount_, opencost_);
    ZR_(hedgeflag_, usemargin_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exchange = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBPosition.exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // required string contract = 2;
      case 2: {
        if (tag == 18) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBPosition.contract");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (tag == 24) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ydPosition;
        break;
      }

      // optional int32 ydPosition = 4;
      case 4: {
        if (tag == 32) {
         parse_ydPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));
          set_has_ydposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }

      // required int32 position = 5;
      case 5: {
        if (tag == 40) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_positionDate;
        break;
      }

      // optional string positionDate = 6;
      case 6: {
        if (tag == 50) {
         parse_positionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->positiondate().data(), this->positiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBPosition.positionDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_openVolume;
        break;
      }

      // optional int32 openVolume = 7;
      case 7: {
        if (tag == 56) {
         parse_openVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));
          set_has_openvolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_closeVolume;
        break;
      }

      // optional int32 closeVolume = 8;
      case 8: {
        if (tag == 64) {
         parse_closeVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
          set_has_closevolume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_openAmount;
        break;
      }

      // optional double openAmount = 9;
      case 9: {
        if (tag == 73) {
         parse_openAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));
          set_has_openamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_closeAmount;
        break;
      }

      // optional double closeAmount = 10;
      case 10: {
        if (tag == 81) {
         parse_closeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
          set_has_closeamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_cost;
        break;
      }

      // optional double cost = 11;
      case 11: {
        if (tag == 89) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_openCost;
        break;
      }

      // optional double openCost = 12;
      case 12: {
        if (tag == 97) {
         parse_openCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));
          set_has_opencost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_profit;
        break;
      }

      // optional double profit = 13;
      case 13: {
        if (tag == 105) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_closeProfit;
        break;
      }

      // optional double closeProfit = 14;
      case 14: {
        if (tag == 113) {
         parse_closeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_useMargin;
        break;
      }

      // optional double useMargin = 15;
      case 15: {
        if (tag == 121) {
         parse_useMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));
          set_has_usemargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hedgeFlag;
        break;
      }

      // optional int32 hedgeFlag = 16;
      case 16: {
        if (tag == 128) {
         parse_hedgeFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedgeflag_)));
          set_has_hedgeflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBPosition)
  return false;
#undef DO_
}

void PBPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBPosition)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPosition.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchange(), output);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPosition.contract");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contract(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // optional int32 ydPosition = 4;
  if (has_ydposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ydposition(), output);
  }

  // required int32 position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->position(), output);
  }

  // optional string positionDate = 6;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPosition.positionDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->positiondate(), output);
  }

  // optional int32 openVolume = 7;
  if (has_openvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->openvolume(), output);
  }

  // optional int32 closeVolume = 8;
  if (has_closevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->closevolume(), output);
  }

  // optional double openAmount = 9;
  if (has_openamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openamount(), output);
  }

  // optional double closeAmount = 10;
  if (has_closeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->closeamount(), output);
  }

  // optional double cost = 11;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->cost(), output);
  }

  // optional double openCost = 12;
  if (has_opencost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->opencost(), output);
  }

  // optional double profit = 13;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->profit(), output);
  }

  // optional double closeProfit = 14;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->closeprofit(), output);
  }

  // optional double useMargin = 15;
  if (has_usemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->usemargin(), output);
  }

  // optional int32 hedgeFlag = 16;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hedgeflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBPosition)
}

::google::protobuf::uint8* PBPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBPosition)
  // required string exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPosition.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchange(), target);
  }

  // required string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPosition.contract");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // optional int32 ydPosition = 4;
  if (has_ydposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ydposition(), target);
  }

  // required int32 position = 5;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->position(), target);
  }

  // optional string positionDate = 6;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBPosition.positionDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->positiondate(), target);
  }

  // optional int32 openVolume = 7;
  if (has_openvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->openvolume(), target);
  }

  // optional int32 closeVolume = 8;
  if (has_closevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->closevolume(), target);
  }

  // optional double openAmount = 9;
  if (has_openamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openamount(), target);
  }

  // optional double closeAmount = 10;
  if (has_closeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->closeamount(), target);
  }

  // optional double cost = 11;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->cost(), target);
  }

  // optional double openCost = 12;
  if (has_opencost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->opencost(), target);
  }

  // optional double profit = 13;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->profit(), target);
  }

  // optional double closeProfit = 14;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->closeprofit(), target);
  }

  // optional double useMargin = 15;
  if (has_usemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->usemargin(), target);
  }

  // optional int32 hedgeFlag = 16;
  if (has_hedgeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hedgeflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBPosition)
  return target;
}

int PBPosition::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_exchange()) {
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  if (has_contract()) {
    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());
  }

  if (has_direction()) {
    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  if (has_position()) {
    // required int32 position = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  return total_size;
}
int PBPosition::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string exchange = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());

    // required string contract = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract());

    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

    // required int32 position = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional int32 ydPosition = 4;
    if (has_ydposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydposition());
    }

    // optional string positionDate = 6;
    if (has_positiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positiondate());
    }

    // optional int32 openVolume = 7;
    if (has_openvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openvolume());
    }

    // optional int32 closeVolume = 8;
    if (has_closevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closevolume());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double openAmount = 9;
    if (has_openamount()) {
      total_size += 1 + 8;
    }

    // optional double closeAmount = 10;
    if (has_closeamount()) {
      total_size += 1 + 8;
    }

    // optional double cost = 11;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional double openCost = 12;
    if (has_opencost()) {
      total_size += 1 + 8;
    }

    // optional double profit = 13;
    if (has_profit()) {
      total_size += 1 + 8;
    }

    // optional double closeProfit = 14;
    if (has_closeprofit()) {
      total_size += 1 + 8;
    }

    // optional double useMargin = 15;
    if (has_usemargin()) {
      total_size += 1 + 8;
    }

    // optional int32 hedgeFlag = 16;
    if (has_hedgeflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedgeflag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPosition::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBPosition>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPosition::MergeFrom(const PBPosition& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (from.has_contract()) {
      set_has_contract();
      contract_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_);
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_ydposition()) {
      set_ydposition(from.ydposition());
    }
    if (from.has_positiondate()) {
      set_has_positiondate();
      positiondate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondate_);
    }
    if (from.has_openvolume()) {
      set_openvolume(from.openvolume());
    }
    if (from.has_closevolume()) {
      set_closevolume(from.closevolume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openamount()) {
      set_openamount(from.openamount());
    }
    if (from.has_closeamount()) {
      set_closeamount(from.closeamount());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_opencost()) {
      set_opencost(from.opencost());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_usemargin()) {
      set_usemargin(from.usemargin());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPosition::CopyFrom(const PBPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBPosition::Swap(PBPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBPosition::InternalSwap(PBPosition* other) {
  exchange_.Swap(&other->exchange_);
  contract_.Swap(&other->contract_);
  std::swap(direction_, other->direction_);
  std::swap(position_, other->position_);
  std::swap(ydposition_, other->ydposition_);
  positiondate_.Swap(&other->positiondate_);
  std::swap(openvolume_, other->openvolume_);
  std::swap(closevolume_, other->closevolume_);
  std::swap(openamount_, other->openamount_);
  std::swap(closeamount_, other->closeamount_);
  std::swap(cost_, other->cost_);
  std::swap(opencost_, other->opencost_);
  std::swap(profit_, other->profit_);
  std::swap(closeprofit_, other->closeprofit_);
  std::swap(usemargin_, other->usemargin_);
  std::swap(hedgeflag_, other->hedgeflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPosition_descriptor_;
  metadata.reflection = PBPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBPosition

// required string exchange = 1;
bool PBPosition::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBPosition::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
void PBPosition::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBPosition::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
 const ::std::string& PBPosition::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPosition::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.exchange)
}
 void PBPosition::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPosition.exchange)
}
 void PBPosition::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPosition.exchange)
}
 ::std::string* PBPosition::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPosition.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBPosition::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPosition::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPosition.exchange)
}

// required string contract = 2;
bool PBPosition::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBPosition::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
void PBPosition::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBPosition::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contract();
}
 const ::std::string& PBPosition::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPosition::set_contract(const ::std::string& value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.contract)
}
 void PBPosition::set_contract(const char* value) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPosition.contract)
}
 void PBPosition::set_contract(const char* value, size_t size) {
  set_has_contract();
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPosition.contract)
}
 ::std::string* PBPosition::mutable_contract() {
  set_has_contract();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPosition.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBPosition::release_contract() {
  clear_has_contract();
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPosition::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    set_has_contract();
  } else {
    clear_has_contract();
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPosition.contract)
}

// required int32 direction = 3;
bool PBPosition::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBPosition::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void PBPosition::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBPosition::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 PBPosition::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.direction)
  return direction_;
}
 void PBPosition::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.direction)
}

// required int32 position = 5;
bool PBPosition::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBPosition::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
void PBPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBPosition::clear_position() {
  position_ = 0;
  clear_has_position();
}
 ::google::protobuf::int32 PBPosition::position() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.position)
  return position_;
}
 void PBPosition::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.position)
}

// optional int32 ydPosition = 4;
bool PBPosition::has_ydposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBPosition::set_has_ydposition() {
  _has_bits_[0] |= 0x00000010u;
}
void PBPosition::clear_has_ydposition() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBPosition::clear_ydposition() {
  ydposition_ = 0;
  clear_has_ydposition();
}
 ::google::protobuf::int32 PBPosition::ydposition() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.ydPosition)
  return ydposition_;
}
 void PBPosition::set_ydposition(::google::protobuf::int32 value) {
  set_has_ydposition();
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.ydPosition)
}

// optional string positionDate = 6;
bool PBPosition::has_positiondate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBPosition::set_has_positiondate() {
  _has_bits_[0] |= 0x00000020u;
}
void PBPosition::clear_has_positiondate() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBPosition::clear_positiondate() {
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_positiondate();
}
 const ::std::string& PBPosition::positiondate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.positionDate)
  return positiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPosition::set_positiondate(const ::std::string& value) {
  set_has_positiondate();
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.positionDate)
}
 void PBPosition::set_positiondate(const char* value) {
  set_has_positiondate();
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPosition.positionDate)
}
 void PBPosition::set_positiondate(const char* value, size_t size) {
  set_has_positiondate();
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPosition.positionDate)
}
 ::std::string* PBPosition::mutable_positiondate() {
  set_has_positiondate();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPosition.positionDate)
  return positiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBPosition::release_positiondate() {
  clear_has_positiondate();
  return positiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBPosition::set_allocated_positiondate(::std::string* positiondate) {
  if (positiondate != NULL) {
    set_has_positiondate();
  } else {
    clear_has_positiondate();
  }
  positiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPosition.positionDate)
}

// optional int32 openVolume = 7;
bool PBPosition::has_openvolume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBPosition::set_has_openvolume() {
  _has_bits_[0] |= 0x00000040u;
}
void PBPosition::clear_has_openvolume() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBPosition::clear_openvolume() {
  openvolume_ = 0;
  clear_has_openvolume();
}
 ::google::protobuf::int32 PBPosition::openvolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.openVolume)
  return openvolume_;
}
 void PBPosition::set_openvolume(::google::protobuf::int32 value) {
  set_has_openvolume();
  openvolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.openVolume)
}

// optional int32 closeVolume = 8;
bool PBPosition::has_closevolume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBPosition::set_has_closevolume() {
  _has_bits_[0] |= 0x00000080u;
}
void PBPosition::clear_has_closevolume() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBPosition::clear_closevolume() {
  closevolume_ = 0;
  clear_has_closevolume();
}
 ::google::protobuf::int32 PBPosition::closevolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.closeVolume)
  return closevolume_;
}
 void PBPosition::set_closevolume(::google::protobuf::int32 value) {
  set_has_closevolume();
  closevolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.closeVolume)
}

// optional double openAmount = 9;
bool PBPosition::has_openamount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBPosition::set_has_openamount() {
  _has_bits_[0] |= 0x00000100u;
}
void PBPosition::clear_has_openamount() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBPosition::clear_openamount() {
  openamount_ = 0;
  clear_has_openamount();
}
 double PBPosition::openamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.openAmount)
  return openamount_;
}
 void PBPosition::set_openamount(double value) {
  set_has_openamount();
  openamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.openAmount)
}

// optional double closeAmount = 10;
bool PBPosition::has_closeamount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBPosition::set_has_closeamount() {
  _has_bits_[0] |= 0x00000200u;
}
void PBPosition::clear_has_closeamount() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBPosition::clear_closeamount() {
  closeamount_ = 0;
  clear_has_closeamount();
}
 double PBPosition::closeamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.closeAmount)
  return closeamount_;
}
 void PBPosition::set_closeamount(double value) {
  set_has_closeamount();
  closeamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.closeAmount)
}

// optional double cost = 11;
bool PBPosition::has_cost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PBPosition::set_has_cost() {
  _has_bits_[0] |= 0x00000400u;
}
void PBPosition::clear_has_cost() {
  _has_bits_[0] &= ~0x00000400u;
}
void PBPosition::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
 double PBPosition::cost() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.cost)
  return cost_;
}
 void PBPosition::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.cost)
}

// optional double openCost = 12;
bool PBPosition::has_opencost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PBPosition::set_has_opencost() {
  _has_bits_[0] |= 0x00000800u;
}
void PBPosition::clear_has_opencost() {
  _has_bits_[0] &= ~0x00000800u;
}
void PBPosition::clear_opencost() {
  opencost_ = 0;
  clear_has_opencost();
}
 double PBPosition::opencost() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.openCost)
  return opencost_;
}
 void PBPosition::set_opencost(double value) {
  set_has_opencost();
  opencost_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.openCost)
}

// optional double profit = 13;
bool PBPosition::has_profit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PBPosition::set_has_profit() {
  _has_bits_[0] |= 0x00001000u;
}
void PBPosition::clear_has_profit() {
  _has_bits_[0] &= ~0x00001000u;
}
void PBPosition::clear_profit() {
  profit_ = 0;
  clear_has_profit();
}
 double PBPosition::profit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.profit)
  return profit_;
}
 void PBPosition::set_profit(double value) {
  set_has_profit();
  profit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.profit)
}

// optional double closeProfit = 14;
bool PBPosition::has_closeprofit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PBPosition::set_has_closeprofit() {
  _has_bits_[0] |= 0x00002000u;
}
void PBPosition::clear_has_closeprofit() {
  _has_bits_[0] &= ~0x00002000u;
}
void PBPosition::clear_closeprofit() {
  closeprofit_ = 0;
  clear_has_closeprofit();
}
 double PBPosition::closeprofit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.closeProfit)
  return closeprofit_;
}
 void PBPosition::set_closeprofit(double value) {
  set_has_closeprofit();
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.closeProfit)
}

// optional double useMargin = 15;
bool PBPosition::has_usemargin() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PBPosition::set_has_usemargin() {
  _has_bits_[0] |= 0x00004000u;
}
void PBPosition::clear_has_usemargin() {
  _has_bits_[0] &= ~0x00004000u;
}
void PBPosition::clear_usemargin() {
  usemargin_ = 0;
  clear_has_usemargin();
}
 double PBPosition::usemargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.useMargin)
  return usemargin_;
}
 void PBPosition::set_usemargin(double value) {
  set_has_usemargin();
  usemargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.useMargin)
}

// optional int32 hedgeFlag = 16;
bool PBPosition::has_hedgeflag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PBPosition::set_has_hedgeflag() {
  _has_bits_[0] |= 0x00008000u;
}
void PBPosition::clear_has_hedgeflag() {
  _has_bits_[0] &= ~0x00008000u;
}
void PBPosition::clear_hedgeflag() {
  hedgeflag_ = 0;
  clear_has_hedgeflag();
}
 ::google::protobuf::int32 PBPosition::hedgeflag() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.hedgeFlag)
  return hedgeflag_;
}
 void PBPosition::set_hedgeflag(::google::protobuf::int32 value) {
  set_has_hedgeflag();
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.hedgeFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PBAccountInfo::kBrokerIDFieldNumber;
const int PBAccountInfo::kAccountIDFieldNumber;
const int PBAccountInfo::kPreMortgageFieldNumber;
const int PBAccountInfo::kPreCreditFieldNumber;
const int PBAccountInfo::kPreDepositFieldNumber;
const int PBAccountInfo::kPreBalanceFieldNumber;
const int PBAccountInfo::kPreMarginFieldNumber;
const int PBAccountInfo::kInterestBaseFieldNumber;
const int PBAccountInfo::kInterestFieldNumber;
const int PBAccountInfo::kDepositFieldNumber;
const int PBAccountInfo::kWithdrawFieldNumber;
const int PBAccountInfo::kFrozenMarginFieldNumber;
const int PBAccountInfo::kFrozenCashFieldNumber;
const int PBAccountInfo::kFrozenCommissionFieldNumber;
const int PBAccountInfo::kCurrMarginFieldNumber;
const int PBAccountInfo::kCashInFieldNumber;
const int PBAccountInfo::kCommissionFieldNumber;
const int PBAccountInfo::kCloseProfitFieldNumber;
const int PBAccountInfo::kPositionProfitFieldNumber;
const int PBAccountInfo::kBalanceFieldNumber;
const int PBAccountInfo::kAvailableFieldNumber;
const int PBAccountInfo::kWithdrawQuotaFieldNumber;
const int PBAccountInfo::kReserveFieldNumber;
const int PBAccountInfo::kTradingDayFieldNumber;
const int PBAccountInfo::kSettlementIDFieldNumber;
const int PBAccountInfo::kCreditFieldNumber;
const int PBAccountInfo::kMortgageFieldNumber;
const int PBAccountInfo::kExchangeMarginFieldNumber;
const int PBAccountInfo::kDeliveryMarginFieldNumber;
const int PBAccountInfo::kExchangeDeliveryMarginFieldNumber;
const int PBAccountInfo::kReserveBalanceFieldNumber;
#endif  // !_MSC_VER

PBAccountInfo::PBAccountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Business.PBAccountInfo)
}

void PBAccountInfo::InitAsDefaultInstance() {
}

PBAccountInfo::PBAccountInfo(const PBAccountInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Business.PBAccountInfo)
}

void PBAccountInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  premortgage_ = 0;
  precredit_ = 0;
  predeposit_ = 0;
  prebalance_ = 0;
  premargin_ = 0;
  interestbase_ = 0;
  interest_ = 0;
  deposit_ = 0;
  withdraw_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  currmargin_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  balance_ = 0;
  available_ = 0;
  withdrawquota_ = 0;
  reserve_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
  credit_ = 0;
  mortgage_ = 0;
  exchangemargin_ = 0;
  deliverymargin_ = 0;
  exchangedeliverymargin_ = 0;
  reservebalance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAccountInfo::~PBAccountInfo() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Business.PBAccountInfo)
  SharedDtor();
}

void PBAccountInfo::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAccountInfo_descriptor_;
}

const PBAccountInfo& PBAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_businessobj_2eproto();
  return *default_instance_;
}

PBAccountInfo* PBAccountInfo::default_instance_ = NULL;

PBAccountInfo* PBAccountInfo::New(::google::protobuf::Arena* arena) const {
  PBAccountInfo* n = new PBAccountInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBAccountInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBAccountInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(premortgage_, interestbase_);
    if (has_brokerid()) {
      brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_accountid()) {
      accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(interest_, cashin_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(commission_, reserve_);
    if (has_tradingday()) {
      tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    ZR_(credit_, settlementid_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PBAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Business.PBAccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBAccountInfo.BrokerID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AccountID;
        break;
      }

      // optional string AccountID = 3;
      case 3: {
        if (tag == 26) {
         parse_AccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBAccountInfo.AccountID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_PreMortgage;
        break;
      }

      // optional double PreMortgage = 4;
      case 4: {
        if (tag == 33) {
         parse_PreMortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premortgage_)));
          set_has_premortgage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_PreCredit;
        break;
      }

      // optional double PreCredit = 5;
      case 5: {
        if (tag == 41) {
         parse_PreCredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precredit_)));
          set_has_precredit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_PreDeposit;
        break;
      }

      // optional double PreDeposit = 6;
      case 6: {
        if (tag == 49) {
         parse_PreDeposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predeposit_)));
          set_has_predeposit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_PreBalance;
        break;
      }

      // optional double PreBalance = 7;
      case 7: {
        if (tag == 57) {
         parse_PreBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));
          set_has_prebalance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_PreMargin;
        break;
      }

      // optional double PreMargin = 8;
      case 8: {
        if (tag == 65) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_InterestBase;
        break;
      }

      // optional double InterestBase = 9;
      case 9: {
        if (tag == 73) {
         parse_InterestBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interestbase_)));
          set_has_interestbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Interest;
        break;
      }

      // optional double Interest = 10;
      case 10: {
        if (tag == 81) {
         parse_Interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_Deposit;
        break;
      }

      // optional double Deposit = 11;
      case 11: {
        if (tag == 89) {
         parse_Deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
          set_has_deposit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Withdraw;
        break;
      }

      // optional double Withdraw = 12;
      case 12: {
        if (tag == 97) {
         parse_Withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
          set_has_withdraw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_FrozenMargin;
        break;
      }

      // optional double FrozenMargin = 13;
      case 13: {
        if (tag == 105) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_FrozenCash;
        break;
      }

      // optional double FrozenCash = 14;
      case 14: {
        if (tag == 113) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_FrozenCommission;
        break;
      }

      // optional double FrozenCommission = 15;
      case 15: {
        if (tag == 121) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_CurrMargin;
        break;
      }

      // optional double CurrMargin = 16;
      case 16: {
        if (tag == 129) {
         parse_CurrMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));
          set_has_currmargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_CashIn;
        break;
      }

      // optional double CashIn = 17;
      case 17: {
        if (tag == 137) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_Commission;
        break;
      }

      // optional double Commission = 18;
      case 18: {
        if (tag == 145) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_CloseProfit;
        break;
      }

      // optional double CloseProfit = 19;
      case 19: {
        if (tag == 153) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_PositionProfit;
        break;
      }

      // optional double PositionProfit = 20;
      case 20: {
        if (tag == 161) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_Balance;
        break;
      }

      // optional double Balance = 21;
      case 21: {
        if (tag == 169) {
         parse_Balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_Available;
        break;
      }

      // optional double Available = 22;
      case 22: {
        if (tag == 177) {
         parse_Available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_WithdrawQuota;
        break;
      }

      // optional double WithdrawQuota = 23;
      case 23: {
        if (tag == 185) {
         parse_WithdrawQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));
          set_has_withdrawquota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_Reserve;
        break;
      }

      // optional double Reserve = 24;
      case 24: {
        if (tag == 193) {
         parse_Reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 25;
      case 25: {
        if (tag == 202) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Micro.Future.Message.Business.PBAccountInfo.TradingDay");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 26;
      case 26: {
        if (tag == 208) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_Credit;
        break;
      }

      // optional double Credit = 27;
      case 27: {
        if (tag == 217) {
         parse_Credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_Mortgage;
        break;
      }

      // optional double Mortgage = 28;
      case 28: {
        if (tag == 225) {
         parse_Mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));
          set_has_mortgage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_ExchangeMargin;
        break;
      }

      // optional double ExchangeMargin = 29;
      case 29: {
        if (tag == 233) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_DeliveryMargin;
        break;
      }

      // optional double DeliveryMargin = 30;
      case 30: {
        if (tag == 241) {
         parse_DeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deliverymargin_)));
          set_has_deliverymargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_ExchangeDeliveryMargin;
        break;
      }

      // optional double ExchangeDeliveryMargin = 31;
      case 31: {
        if (tag == 249) {
         parse_ExchangeDeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangedeliverymargin_)));
          set_has_exchangedeliverymargin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_ReserveBalance;
        break;
      }

      // optional double ReserveBalance = 32;
      case 32: {
        if (tag == 257) {
         parse_ReserveBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reservebalance_)));
          set_has_reservebalance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Business.PBAccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Business.PBAccountInfo)
  return false;
#undef DO_
}

void PBAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Business.PBAccountInfo)
  // optional string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBAccountInfo.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string AccountID = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBAccountInfo.AccountID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accountid(), output);
  }

  // optional double PreMortgage = 4;
  if (has_premortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->premortgage(), output);
  }

  // optional double PreCredit = 5;
  if (has_precredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->precredit(), output);
  }

  // optional double PreDeposit = 6;
  if (has_predeposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->predeposit(), output);
  }

  // optional double PreBalance = 7;
  if (has_prebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prebalance(), output);
  }

  // optional double PreMargin = 8;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->premargin(), output);
  }

  // optional double InterestBase = 9;
  if (has_interestbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->interestbase(), output);
  }

  // optional double Interest = 10;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->interest(), output);
  }

  // optional double Deposit = 11;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->deposit(), output);
  }

  // optional double Withdraw = 12;
  if (has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->withdraw(), output);
  }

  // optional double FrozenMargin = 13;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->frozenmargin(), output);
  }

  // optional double FrozenCash = 14;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozencash(), output);
  }

  // optional double FrozenCommission = 15;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->frozencommission(), output);
  }

  // optional double CurrMargin = 16;
  if (has_currmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->currmargin(), output);
  }

  // optional double CashIn = 17;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->cashin(), output);
  }

  // optional double Commission = 18;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->commission(), output);
  }

  // optional double CloseProfit = 19;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->closeprofit(), output);
  }

  // optional double PositionProfit = 20;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->positionprofit(), output);
  }

  // optional double Balance = 21;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->balance(), output);
  }

  // optional double Available = 22;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->available(), output);
  }

  // optional double WithdrawQuota = 23;
  if (has_withdrawquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->withdrawquota(), output);
  }

  // optional double Reserve = 24;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->reserve(), output);
  }

  // optional string TradingDay = 25;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBAccountInfo.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->tradingday(), output);
  }

  // optional int32 SettlementID = 26;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->settlementid(), output);
  }

  // optional double Credit = 27;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->credit(), output);
  }

  // optional double Mortgage = 28;
  if (has_mortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->mortgage(), output);
  }

  // optional double ExchangeMargin = 29;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->exchangemargin(), output);
  }

  // optional double DeliveryMargin = 30;
  if (has_deliverymargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->deliverymargin(), output);
  }

  // optional double ExchangeDeliveryMargin = 31;
  if (has_exchangedeliverymargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->exchangedeliverymargin(), output);
  }

  // optional double ReserveBalance = 32;
  if (has_reservebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->reservebalance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Business.PBAccountInfo)
}

::google::protobuf::uint8* PBAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Business.PBAccountInfo)
  // optional string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBAccountInfo.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string AccountID = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBAccountInfo.AccountID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountid(), target);
  }

  // optional double PreMortgage = 4;
  if (has_premortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->premortgage(), target);
  }

  // optional double PreCredit = 5;
  if (has_precredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->precredit(), target);
  }

  // optional double PreDeposit = 6;
  if (has_predeposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->predeposit(), target);
  }

  // optional double PreBalance = 7;
  if (has_prebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prebalance(), target);
  }

  // optional double PreMargin = 8;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->premargin(), target);
  }

  // optional double InterestBase = 9;
  if (has_interestbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->interestbase(), target);
  }

  // optional double Interest = 10;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->interest(), target);
  }

  // optional double Deposit = 11;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->deposit(), target);
  }

  // optional double Withdraw = 12;
  if (has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->withdraw(), target);
  }

  // optional double FrozenMargin = 13;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->frozenmargin(), target);
  }

  // optional double FrozenCash = 14;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozencash(), target);
  }

  // optional double FrozenCommission = 15;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->frozencommission(), target);
  }

  // optional double CurrMargin = 16;
  if (has_currmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->currmargin(), target);
  }

  // optional double CashIn = 17;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->cashin(), target);
  }

  // optional double Commission = 18;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->commission(), target);
  }

  // optional double CloseProfit = 19;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->closeprofit(), target);
  }

  // optional double PositionProfit = 20;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->positionprofit(), target);
  }

  // optional double Balance = 21;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->balance(), target);
  }

  // optional double Available = 22;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->available(), target);
  }

  // optional double WithdrawQuota = 23;
  if (has_withdrawquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->withdrawquota(), target);
  }

  // optional double Reserve = 24;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->reserve(), target);
  }

  // optional string TradingDay = 25;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Micro.Future.Message.Business.PBAccountInfo.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->tradingday(), target);
  }

  // optional int32 SettlementID = 26;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->settlementid(), target);
  }

  // optional double Credit = 27;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->credit(), target);
  }

  // optional double Mortgage = 28;
  if (has_mortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->mortgage(), target);
  }

  // optional double ExchangeMargin = 29;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->exchangemargin(), target);
  }

  // optional double DeliveryMargin = 30;
  if (has_deliverymargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->deliverymargin(), target);
  }

  // optional double ExchangeDeliveryMargin = 31;
  if (has_exchangedeliverymargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->exchangedeliverymargin(), target);
  }

  // optional double ReserveBalance = 32;
  if (has_reservebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->reservebalance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Business.PBAccountInfo)
  return target;
}

int PBAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string BrokerID = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // optional string AccountID = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // optional double PreMortgage = 4;
    if (has_premortgage()) {
      total_size += 1 + 8;
    }

    // optional double PreCredit = 5;
    if (has_precredit()) {
      total_size += 1 + 8;
    }

    // optional double PreDeposit = 6;
    if (has_predeposit()) {
      total_size += 1 + 8;
    }

    // optional double PreBalance = 7;
    if (has_prebalance()) {
      total_size += 1 + 8;
    }

    // optional double PreMargin = 8;
    if (has_premargin()) {
      total_size += 1 + 8;
    }

    // optional double InterestBase = 9;
    if (has_interestbase()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double Interest = 10;
    if (has_interest()) {
      total_size += 1 + 8;
    }

    // optional double Deposit = 11;
    if (has_deposit()) {
      total_size += 1 + 8;
    }

    // optional double Withdraw = 12;
    if (has_withdraw()) {
      total_size += 1 + 8;
    }

    // optional double FrozenMargin = 13;
    if (has_frozenmargin()) {
      total_size += 1 + 8;
    }

    // optional double FrozenCash = 14;
    if (has_frozencash()) {
      total_size += 1 + 8;
    }

    // optional double FrozenCommission = 15;
    if (has_frozencommission()) {
      total_size += 1 + 8;
    }

    // optional double CurrMargin = 16;
    if (has_currmargin()) {
      total_size += 2 + 8;
    }

    // optional double CashIn = 17;
    if (has_cashin()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double Commission = 18;
    if (has_commission()) {
      total_size += 2 + 8;
    }

    // optional double CloseProfit = 19;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }

    // optional double PositionProfit = 20;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }

    // optional double Balance = 21;
    if (has_balance()) {
      total_size += 2 + 8;
    }

    // optional double Available = 22;
    if (has_available()) {
      total_size += 2 + 8;
    }

    // optional double WithdrawQuota = 23;
    if (has_withdrawquota()) {
      total_size += 2 + 8;
    }

    // optional double Reserve = 24;
    if (has_reserve()) {
      total_size += 2 + 8;
    }

    // optional string TradingDay = 25;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional int32 SettlementID = 26;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // optional double Credit = 27;
    if (has_credit()) {
      total_size += 2 + 8;
    }

    // optional double Mortgage = 28;
    if (has_mortgage()) {
      total_size += 2 + 8;
    }

    // optional double ExchangeMargin = 29;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }

    // optional double DeliveryMargin = 30;
    if (has_deliverymargin()) {
      total_size += 2 + 8;
    }

    // optional double ExchangeDeliveryMargin = 31;
    if (has_exchangedeliverymargin()) {
      total_size += 2 + 8;
    }

    // optional double ReserveBalance = 32;
    if (has_reservebalance()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBAccountInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBAccountInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAccountInfo::MergeFrom(const PBAccountInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_has_brokerid();
      brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
    }
    if (from.has_accountid()) {
      set_has_accountid();
      accountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountid_);
    }
    if (from.has_premortgage()) {
      set_premortgage(from.premortgage());
    }
    if (from.has_precredit()) {
      set_precredit(from.precredit());
    }
    if (from.has_predeposit()) {
      set_predeposit(from.predeposit());
    }
    if (from.has_prebalance()) {
      set_prebalance(from.prebalance());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_interestbase()) {
      set_interestbase(from.interestbase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_deposit()) {
      set_deposit(from.deposit());
    }
    if (from.has_withdraw()) {
      set_withdraw(from.withdraw());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_currmargin()) {
      set_currmargin(from.currmargin());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_withdrawquota()) {
      set_withdrawquota(from.withdrawquota());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_tradingday()) {
      set_has_tradingday();
      tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_mortgage()) {
      set_mortgage(from.mortgage());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
    if (from.has_deliverymargin()) {
      set_deliverymargin(from.deliverymargin());
    }
    if (from.has_exchangedeliverymargin()) {
      set_exchangedeliverymargin(from.exchangedeliverymargin());
    }
    if (from.has_reservebalance()) {
      set_reservebalance(from.reservebalance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PBAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccountInfo::CopyFrom(const PBAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAccountInfo::IsInitialized() const {

  return true;
}

void PBAccountInfo::Swap(PBAccountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBAccountInfo::InternalSwap(PBAccountInfo* other) {
  brokerid_.Swap(&other->brokerid_);
  accountid_.Swap(&other->accountid_);
  std::swap(premortgage_, other->premortgage_);
  std::swap(precredit_, other->precredit_);
  std::swap(predeposit_, other->predeposit_);
  std::swap(prebalance_, other->prebalance_);
  std::swap(premargin_, other->premargin_);
  std::swap(interestbase_, other->interestbase_);
  std::swap(interest_, other->interest_);
  std::swap(deposit_, other->deposit_);
  std::swap(withdraw_, other->withdraw_);
  std::swap(frozenmargin_, other->frozenmargin_);
  std::swap(frozencash_, other->frozencash_);
  std::swap(frozencommission_, other->frozencommission_);
  std::swap(currmargin_, other->currmargin_);
  std::swap(cashin_, other->cashin_);
  std::swap(commission_, other->commission_);
  std::swap(closeprofit_, other->closeprofit_);
  std::swap(positionprofit_, other->positionprofit_);
  std::swap(balance_, other->balance_);
  std::swap(available_, other->available_);
  std::swap(withdrawquota_, other->withdrawquota_);
  std::swap(reserve_, other->reserve_);
  tradingday_.Swap(&other->tradingday_);
  std::swap(settlementid_, other->settlementid_);
  std::swap(credit_, other->credit_);
  std::swap(mortgage_, other->mortgage_);
  std::swap(exchangemargin_, other->exchangemargin_);
  std::swap(deliverymargin_, other->deliverymargin_);
  std::swap(exchangedeliverymargin_, other->exchangedeliverymargin_);
  std::swap(reservebalance_, other->reservebalance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAccountInfo_descriptor_;
  metadata.reflection = PBAccountInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBAccountInfo

// optional string BrokerID = 2;
bool PBAccountInfo::has_brokerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBAccountInfo::set_has_brokerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PBAccountInfo::clear_has_brokerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBAccountInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brokerid();
}
 const ::std::string& PBAccountInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBAccountInfo::set_brokerid(const ::std::string& value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.BrokerID)
}
 void PBAccountInfo::set_brokerid(const char* value) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBAccountInfo.BrokerID)
}
 void PBAccountInfo::set_brokerid(const char* value, size_t size) {
  set_has_brokerid();
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBAccountInfo.BrokerID)
}
 ::std::string* PBAccountInfo::mutable_brokerid() {
  set_has_brokerid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBAccountInfo.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBAccountInfo::release_brokerid() {
  clear_has_brokerid();
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBAccountInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    set_has_brokerid();
  } else {
    clear_has_brokerid();
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBAccountInfo.BrokerID)
}

// optional string AccountID = 3;
bool PBAccountInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBAccountInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
void PBAccountInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBAccountInfo::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accountid();
}
 const ::std::string& PBAccountInfo::accountid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.AccountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBAccountInfo::set_accountid(const ::std::string& value) {
  set_has_accountid();
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.AccountID)
}
 void PBAccountInfo::set_accountid(const char* value) {
  set_has_accountid();
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBAccountInfo.AccountID)
}
 void PBAccountInfo::set_accountid(const char* value, size_t size) {
  set_has_accountid();
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBAccountInfo.AccountID)
}
 ::std::string* PBAccountInfo::mutable_accountid() {
  set_has_accountid();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBAccountInfo.AccountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBAccountInfo::release_accountid() {
  clear_has_accountid();
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBAccountInfo::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    set_has_accountid();
  } else {
    clear_has_accountid();
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBAccountInfo.AccountID)
}

// optional double PreMortgage = 4;
bool PBAccountInfo::has_premortgage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBAccountInfo::set_has_premortgage() {
  _has_bits_[0] |= 0x00000004u;
}
void PBAccountInfo::clear_has_premortgage() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBAccountInfo::clear_premortgage() {
  premortgage_ = 0;
  clear_has_premortgage();
}
 double PBAccountInfo::premortgage() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.PreMortgage)
  return premortgage_;
}
 void PBAccountInfo::set_premortgage(double value) {
  set_has_premortgage();
  premortgage_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.PreMortgage)
}

// optional double PreCredit = 5;
bool PBAccountInfo::has_precredit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBAccountInfo::set_has_precredit() {
  _has_bits_[0] |= 0x00000008u;
}
void PBAccountInfo::clear_has_precredit() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBAccountInfo::clear_precredit() {
  precredit_ = 0;
  clear_has_precredit();
}
 double PBAccountInfo::precredit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.PreCredit)
  return precredit_;
}
 void PBAccountInfo::set_precredit(double value) {
  set_has_precredit();
  precredit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.PreCredit)
}

// optional double PreDeposit = 6;
bool PBAccountInfo::has_predeposit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBAccountInfo::set_has_predeposit() {
  _has_bits_[0] |= 0x00000010u;
}
void PBAccountInfo::clear_has_predeposit() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBAccountInfo::clear_predeposit() {
  predeposit_ = 0;
  clear_has_predeposit();
}
 double PBAccountInfo::predeposit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.PreDeposit)
  return predeposit_;
}
 void PBAccountInfo::set_predeposit(double value) {
  set_has_predeposit();
  predeposit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.PreDeposit)
}

// optional double PreBalance = 7;
bool PBAccountInfo::has_prebalance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBAccountInfo::set_has_prebalance() {
  _has_bits_[0] |= 0x00000020u;
}
void PBAccountInfo::clear_has_prebalance() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBAccountInfo::clear_prebalance() {
  prebalance_ = 0;
  clear_has_prebalance();
}
 double PBAccountInfo::prebalance() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.PreBalance)
  return prebalance_;
}
 void PBAccountInfo::set_prebalance(double value) {
  set_has_prebalance();
  prebalance_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.PreBalance)
}

// optional double PreMargin = 8;
bool PBAccountInfo::has_premargin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBAccountInfo::set_has_premargin() {
  _has_bits_[0] |= 0x00000040u;
}
void PBAccountInfo::clear_has_premargin() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBAccountInfo::clear_premargin() {
  premargin_ = 0;
  clear_has_premargin();
}
 double PBAccountInfo::premargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.PreMargin)
  return premargin_;
}
 void PBAccountInfo::set_premargin(double value) {
  set_has_premargin();
  premargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.PreMargin)
}

// optional double InterestBase = 9;
bool PBAccountInfo::has_interestbase() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBAccountInfo::set_has_interestbase() {
  _has_bits_[0] |= 0x00000080u;
}
void PBAccountInfo::clear_has_interestbase() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBAccountInfo::clear_interestbase() {
  interestbase_ = 0;
  clear_has_interestbase();
}
 double PBAccountInfo::interestbase() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.InterestBase)
  return interestbase_;
}
 void PBAccountInfo::set_interestbase(double value) {
  set_has_interestbase();
  interestbase_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.InterestBase)
}

// optional double Interest = 10;
bool PBAccountInfo::has_interest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBAccountInfo::set_has_interest() {
  _has_bits_[0] |= 0x00000100u;
}
void PBAccountInfo::clear_has_interest() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBAccountInfo::clear_interest() {
  interest_ = 0;
  clear_has_interest();
}
 double PBAccountInfo::interest() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Interest)
  return interest_;
}
 void PBAccountInfo::set_interest(double value) {
  set_has_interest();
  interest_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Interest)
}

// optional double Deposit = 11;
bool PBAccountInfo::has_deposit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBAccountInfo::set_has_deposit() {
  _has_bits_[0] |= 0x00000200u;
}
void PBAccountInfo::clear_has_deposit() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBAccountInfo::clear_deposit() {
  deposit_ = 0;
  clear_has_deposit();
}
 double PBAccountInfo::deposit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Deposit)
  return deposit_;
}
 void PBAccountInfo::set_deposit(double value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Deposit)
}

// optional double Withdraw = 12;
bool PBAccountInfo::has_withdraw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PBAccountInfo::set_has_withdraw() {
  _has_bits_[0] |= 0x00000400u;
}
void PBAccountInfo::clear_has_withdraw() {
  _has_bits_[0] &= ~0x00000400u;
}
void PBAccountInfo::clear_withdraw() {
  withdraw_ = 0;
  clear_has_withdraw();
}
 double PBAccountInfo::withdraw() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Withdraw)
  return withdraw_;
}
 void PBAccountInfo::set_withdraw(double value) {
  set_has_withdraw();
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Withdraw)
}

// optional double FrozenMargin = 13;
bool PBAccountInfo::has_frozenmargin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PBAccountInfo::set_has_frozenmargin() {
  _has_bits_[0] |= 0x00000800u;
}
void PBAccountInfo::clear_has_frozenmargin() {
  _has_bits_[0] &= ~0x00000800u;
}
void PBAccountInfo::clear_frozenmargin() {
  frozenmargin_ = 0;
  clear_has_frozenmargin();
}
 double PBAccountInfo::frozenmargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.FrozenMargin)
  return frozenmargin_;
}
 void PBAccountInfo::set_frozenmargin(double value) {
  set_has_frozenmargin();
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.FrozenMargin)
}

// optional double FrozenCash = 14;
bool PBAccountInfo::has_frozencash() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PBAccountInfo::set_has_frozencash() {
  _has_bits_[0] |= 0x00001000u;
}
void PBAccountInfo::clear_has_frozencash() {
  _has_bits_[0] &= ~0x00001000u;
}
void PBAccountInfo::clear_frozencash() {
  frozencash_ = 0;
  clear_has_frozencash();
}
 double PBAccountInfo::frozencash() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.FrozenCash)
  return frozencash_;
}
 void PBAccountInfo::set_frozencash(double value) {
  set_has_frozencash();
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.FrozenCash)
}

// optional double FrozenCommission = 15;
bool PBAccountInfo::has_frozencommission() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PBAccountInfo::set_has_frozencommission() {
  _has_bits_[0] |= 0x00002000u;
}
void PBAccountInfo::clear_has_frozencommission() {
  _has_bits_[0] &= ~0x00002000u;
}
void PBAccountInfo::clear_frozencommission() {
  frozencommission_ = 0;
  clear_has_frozencommission();
}
 double PBAccountInfo::frozencommission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.FrozenCommission)
  return frozencommission_;
}
 void PBAccountInfo::set_frozencommission(double value) {
  set_has_frozencommission();
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.FrozenCommission)
}

// optional double CurrMargin = 16;
bool PBAccountInfo::has_currmargin() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PBAccountInfo::set_has_currmargin() {
  _has_bits_[0] |= 0x00004000u;
}
void PBAccountInfo::clear_has_currmargin() {
  _has_bits_[0] &= ~0x00004000u;
}
void PBAccountInfo::clear_currmargin() {
  currmargin_ = 0;
  clear_has_currmargin();
}
 double PBAccountInfo::currmargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.CurrMargin)
  return currmargin_;
}
 void PBAccountInfo::set_currmargin(double value) {
  set_has_currmargin();
  currmargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.CurrMargin)
}

// optional double CashIn = 17;
bool PBAccountInfo::has_cashin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PBAccountInfo::set_has_cashin() {
  _has_bits_[0] |= 0x00008000u;
}
void PBAccountInfo::clear_has_cashin() {
  _has_bits_[0] &= ~0x00008000u;
}
void PBAccountInfo::clear_cashin() {
  cashin_ = 0;
  clear_has_cashin();
}
 double PBAccountInfo::cashin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.CashIn)
  return cashin_;
}
 void PBAccountInfo::set_cashin(double value) {
  set_has_cashin();
  cashin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.CashIn)
}

// optional double Commission = 18;
bool PBAccountInfo::has_commission() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PBAccountInfo::set_has_commission() {
  _has_bits_[0] |= 0x00010000u;
}
void PBAccountInfo::clear_has_commission() {
  _has_bits_[0] &= ~0x00010000u;
}
void PBAccountInfo::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
 double PBAccountInfo::commission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Commission)
  return commission_;
}
 void PBAccountInfo::set_commission(double value) {
  set_has_commission();
  commission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Commission)
}

// optional double CloseProfit = 19;
bool PBAccountInfo::has_closeprofit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PBAccountInfo::set_has_closeprofit() {
  _has_bits_[0] |= 0x00020000u;
}
void PBAccountInfo::clear_has_closeprofit() {
  _has_bits_[0] &= ~0x00020000u;
}
void PBAccountInfo::clear_closeprofit() {
  closeprofit_ = 0;
  clear_has_closeprofit();
}
 double PBAccountInfo::closeprofit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.CloseProfit)
  return closeprofit_;
}
 void PBAccountInfo::set_closeprofit(double value) {
  set_has_closeprofit();
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.CloseProfit)
}

// optional double PositionProfit = 20;
bool PBAccountInfo::has_positionprofit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PBAccountInfo::set_has_positionprofit() {
  _has_bits_[0] |= 0x00040000u;
}
void PBAccountInfo::clear_has_positionprofit() {
  _has_bits_[0] &= ~0x00040000u;
}
void PBAccountInfo::clear_positionprofit() {
  positionprofit_ = 0;
  clear_has_positionprofit();
}
 double PBAccountInfo::positionprofit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.PositionProfit)
  return positionprofit_;
}
 void PBAccountInfo::set_positionprofit(double value) {
  set_has_positionprofit();
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.PositionProfit)
}

// optional double Balance = 21;
bool PBAccountInfo::has_balance() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PBAccountInfo::set_has_balance() {
  _has_bits_[0] |= 0x00080000u;
}
void PBAccountInfo::clear_has_balance() {
  _has_bits_[0] &= ~0x00080000u;
}
void PBAccountInfo::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
 double PBAccountInfo::balance() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Balance)
  return balance_;
}
 void PBAccountInfo::set_balance(double value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Balance)
}

// optional double Available = 22;
bool PBAccountInfo::has_available() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PBAccountInfo::set_has_available() {
  _has_bits_[0] |= 0x00100000u;
}
void PBAccountInfo::clear_has_available() {
  _has_bits_[0] &= ~0x00100000u;
}
void PBAccountInfo::clear_available() {
  available_ = 0;
  clear_has_available();
}
 double PBAccountInfo::available() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Available)
  return available_;
}
 void PBAccountInfo::set_available(double value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Available)
}

// optional double WithdrawQuota = 23;
bool PBAccountInfo::has_withdrawquota() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PBAccountInfo::set_has_withdrawquota() {
  _has_bits_[0] |= 0x00200000u;
}
void PBAccountInfo::clear_has_withdrawquota() {
  _has_bits_[0] &= ~0x00200000u;
}
void PBAccountInfo::clear_withdrawquota() {
  withdrawquota_ = 0;
  clear_has_withdrawquota();
}
 double PBAccountInfo::withdrawquota() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.WithdrawQuota)
  return withdrawquota_;
}
 void PBAccountInfo::set_withdrawquota(double value) {
  set_has_withdrawquota();
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.WithdrawQuota)
}

// optional double Reserve = 24;
bool PBAccountInfo::has_reserve() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PBAccountInfo::set_has_reserve() {
  _has_bits_[0] |= 0x00400000u;
}
void PBAccountInfo::clear_has_reserve() {
  _has_bits_[0] &= ~0x00400000u;
}
void PBAccountInfo::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
 double PBAccountInfo::reserve() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Reserve)
  return reserve_;
}
 void PBAccountInfo::set_reserve(double value) {
  set_has_reserve();
  reserve_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Reserve)
}

// optional string TradingDay = 25;
bool PBAccountInfo::has_tradingday() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PBAccountInfo::set_has_tradingday() {
  _has_bits_[0] |= 0x00800000u;
}
void PBAccountInfo::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00800000u;
}
void PBAccountInfo::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradingday();
}
 const ::std::string& PBAccountInfo::tradingday() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBAccountInfo::set_tradingday(const ::std::string& value) {
  set_has_tradingday();
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.TradingDay)
}
 void PBAccountInfo::set_tradingday(const char* value) {
  set_has_tradingday();
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBAccountInfo.TradingDay)
}
 void PBAccountInfo::set_tradingday(const char* value, size_t size) {
  set_has_tradingday();
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBAccountInfo.TradingDay)
}
 ::std::string* PBAccountInfo::mutable_tradingday() {
  set_has_tradingday();
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBAccountInfo.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBAccountInfo::release_tradingday() {
  clear_has_tradingday();
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBAccountInfo::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    set_has_tradingday();
  } else {
    clear_has_tradingday();
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBAccountInfo.TradingDay)
}

// optional int32 SettlementID = 26;
bool PBAccountInfo::has_settlementid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PBAccountInfo::set_has_settlementid() {
  _has_bits_[0] |= 0x01000000u;
}
void PBAccountInfo::clear_has_settlementid() {
  _has_bits_[0] &= ~0x01000000u;
}
void PBAccountInfo::clear_settlementid() {
  settlementid_ = 0;
  clear_has_settlementid();
}
 ::google::protobuf::int32 PBAccountInfo::settlementid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.SettlementID)
  return settlementid_;
}
 void PBAccountInfo::set_settlementid(::google::protobuf::int32 value) {
  set_has_settlementid();
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.SettlementID)
}

// optional double Credit = 27;
bool PBAccountInfo::has_credit() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PBAccountInfo::set_has_credit() {
  _has_bits_[0] |= 0x02000000u;
}
void PBAccountInfo::clear_has_credit() {
  _has_bits_[0] &= ~0x02000000u;
}
void PBAccountInfo::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
 double PBAccountInfo::credit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Credit)
  return credit_;
}
 void PBAccountInfo::set_credit(double value) {
  set_has_credit();
  credit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Credit)
}

// optional double Mortgage = 28;
bool PBAccountInfo::has_mortgage() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PBAccountInfo::set_has_mortgage() {
  _has_bits_[0] |= 0x04000000u;
}
void PBAccountInfo::clear_has_mortgage() {
  _has_bits_[0] &= ~0x04000000u;
}
void PBAccountInfo::clear_mortgage() {
  mortgage_ = 0;
  clear_has_mortgage();
}
 double PBAccountInfo::mortgage() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.Mortgage)
  return mortgage_;
}
 void PBAccountInfo::set_mortgage(double value) {
  set_has_mortgage();
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.Mortgage)
}

// optional double ExchangeMargin = 29;
bool PBAccountInfo::has_exchangemargin() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PBAccountInfo::set_has_exchangemargin() {
  _has_bits_[0] |= 0x08000000u;
}
void PBAccountInfo::clear_has_exchangemargin() {
  _has_bits_[0] &= ~0x08000000u;
}
void PBAccountInfo::clear_exchangemargin() {
  exchangemargin_ = 0;
  clear_has_exchangemargin();
}
 double PBAccountInfo::exchangemargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.ExchangeMargin)
  return exchangemargin_;
}
 void PBAccountInfo::set_exchangemargin(double value) {
  set_has_exchangemargin();
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.ExchangeMargin)
}

// optional double DeliveryMargin = 30;
bool PBAccountInfo::has_deliverymargin() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PBAccountInfo::set_has_deliverymargin() {
  _has_bits_[0] |= 0x10000000u;
}
void PBAccountInfo::clear_has_deliverymargin() {
  _has_bits_[0] &= ~0x10000000u;
}
void PBAccountInfo::clear_deliverymargin() {
  deliverymargin_ = 0;
  clear_has_deliverymargin();
}
 double PBAccountInfo::deliverymargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.DeliveryMargin)
  return deliverymargin_;
}
 void PBAccountInfo::set_deliverymargin(double value) {
  set_has_deliverymargin();
  deliverymargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.DeliveryMargin)
}

// optional double ExchangeDeliveryMargin = 31;
bool PBAccountInfo::has_exchangedeliverymargin() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void PBAccountInfo::set_has_exchangedeliverymargin() {
  _has_bits_[0] |= 0x20000000u;
}
void PBAccountInfo::clear_has_exchangedeliverymargin() {
  _has_bits_[0] &= ~0x20000000u;
}
void PBAccountInfo::clear_exchangedeliverymargin() {
  exchangedeliverymargin_ = 0;
  clear_has_exchangedeliverymargin();
}
 double PBAccountInfo::exchangedeliverymargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.ExchangeDeliveryMargin)
  return exchangedeliverymargin_;
}
 void PBAccountInfo::set_exchangedeliverymargin(double value) {
  set_has_exchangedeliverymargin();
  exchangedeliverymargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.ExchangeDeliveryMargin)
}

// optional double ReserveBalance = 32;
bool PBAccountInfo::has_reservebalance() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void PBAccountInfo::set_has_reservebalance() {
  _has_bits_[0] |= 0x40000000u;
}
void PBAccountInfo::clear_has_reservebalance() {
  _has_bits_[0] &= ~0x40000000u;
}
void PBAccountInfo::clear_reservebalance() {
  reservebalance_ = 0;
  clear_has_reservebalance();
}
 double PBAccountInfo::reservebalance() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.ReserveBalance)
  return reservebalance_;
}
 void PBAccountInfo::set_reservebalance(double value) {
  set_has_reservebalance();
  reservebalance_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.ReserveBalance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Business
}  // namespace Message
}  // namespace Future
}  // namespace Micro

// @@protoc_insertion_point(global_scope)
