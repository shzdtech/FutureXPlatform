// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgTrader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMsgTrader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PBMsgTrader {

namespace {

const ::google::protobuf::Descriptor* PBMsgError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgError_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryReqMarketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryReqMarketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryRspMarketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryRspMarketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryReqInstrumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryReqInstrumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryRspInstrumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryRspInstrumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryReqOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryReqOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryReqTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryReqTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryReqPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryReqPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryRspPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryRspPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryReqFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryReqFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgQueryRspFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgQueryRspFund_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgOrderInsert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgOrderInsert_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgOrderAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgOrderAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgOrderRtn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgOrderRtn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgTradeRtn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgTradeRtn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgSettlementInfoConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgSettlementInfoConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgReqConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgReqConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgRspConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgRspConnect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBOrderStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMsgTrader_2eproto() {
  protobuf_AddDesc_PBMsgTrader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMsgTrader.proto");
  GOOGLE_CHECK(file != NULL);
  PBMsgError_descriptor_ = file->message_type(0);
  static const int PBMsgError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgError, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgError, errormsg_),
  };
  PBMsgError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgError_descriptor_,
      PBMsgError::default_instance_,
      PBMsgError_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgError, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgError, _is_default_instance_));
  PBMsgLoginReq_descriptor_ = file->message_type(1);
  static const int PBMsgLoginReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, userproductinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, interfaceproductinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, protocolinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, onetimepassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, clientipaddress_),
  };
  PBMsgLoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgLoginReq_descriptor_,
      PBMsgLoginReq::default_instance_,
      PBMsgLoginReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgLoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginReq, _is_default_instance_));
  PBMsgLoginRsp_descriptor_ = file->message_type(2);
  static const int PBMsgLoginRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, systemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, maxorderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, shfetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, dcetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, czcetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, ffextime_),
  };
  PBMsgLoginRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgLoginRsp_descriptor_,
      PBMsgLoginRsp::default_instance_,
      PBMsgLoginRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgLoginRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLoginRsp, _is_default_instance_));
  PBMsgLogout_descriptor_ = file->message_type(3);
  static const int PBMsgLogout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLogout, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLogout, userid_),
  };
  PBMsgLogout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgLogout_descriptor_,
      PBMsgLogout::default_instance_,
      PBMsgLogout_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgLogout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLogout, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgLogout, _is_default_instance_));
  PBMsgQueryReqMarketInfo_descriptor_ = file->message_type(4);
  static const int PBMsgQueryReqMarketInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqMarketInfo, exchangeid_),
  };
  PBMsgQueryReqMarketInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryReqMarketInfo_descriptor_,
      PBMsgQueryReqMarketInfo::default_instance_,
      PBMsgQueryReqMarketInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryReqMarketInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqMarketInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqMarketInfo, _is_default_instance_));
  PBMsgQueryRspMarketInfo_descriptor_ = file->message_type(5);
  static const int PBMsgQueryRspMarketInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspMarketInfo, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspMarketInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspMarketInfo, exchangename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspMarketInfo, exchangeproperty_),
  };
  PBMsgQueryRspMarketInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryRspMarketInfo_descriptor_,
      PBMsgQueryRspMarketInfo::default_instance_,
      PBMsgQueryRspMarketInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryRspMarketInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspMarketInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspMarketInfo, _is_default_instance_));
  PBMsgQueryReqInstrumentInfo_descriptor_ = file->message_type(6);
  static const int PBMsgQueryReqInstrumentInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqInstrumentInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqInstrumentInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqInstrumentInfo, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqInstrumentInfo, productid_),
  };
  PBMsgQueryReqInstrumentInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryReqInstrumentInfo_descriptor_,
      PBMsgQueryReqInstrumentInfo::default_instance_,
      PBMsgQueryReqInstrumentInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryReqInstrumentInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqInstrumentInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqInstrumentInfo, _is_default_instance_));
  PBMsgQueryRspInstrumentInfo_descriptor_ = file->message_type(7);
  static const int PBMsgQueryRspInstrumentInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, instrumentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, productclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, deliveryyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, deliverymonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, maxmarketordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, minmarketordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, maxlimitordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, minlimitordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, volumemultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, expiredate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, startdelivdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, enddelivdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, instlifephase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, istrading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, positiondatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, longmarginratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, shortmarginratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, maxmarginsidealgorithm_),
  };
  PBMsgQueryRspInstrumentInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryRspInstrumentInfo_descriptor_,
      PBMsgQueryRspInstrumentInfo::default_instance_,
      PBMsgQueryRspInstrumentInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryRspInstrumentInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspInstrumentInfo, _is_default_instance_));
  PBMsgQueryReqOrder_descriptor_ = file->message_type(8);
  static const int PBMsgQueryReqOrder_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, inserttimestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, inserttimeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, settlementid_),
  };
  PBMsgQueryReqOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryReqOrder_descriptor_,
      PBMsgQueryReqOrder::default_instance_,
      PBMsgQueryReqOrder_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryReqOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqOrder, _is_default_instance_));
  PBMsgQueryReqTrade_descriptor_ = file->message_type(9);
  static const int PBMsgQueryReqTrade_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, tradetimestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, tradetimeend_),
  };
  PBMsgQueryReqTrade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryReqTrade_descriptor_,
      PBMsgQueryReqTrade::default_instance_,
      PBMsgQueryReqTrade_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryReqTrade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqTrade, _is_default_instance_));
  PBMsgQueryReqPosition_descriptor_ = file->message_type(10);
  static const int PBMsgQueryReqPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqPosition, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqPosition, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqPosition, instrumentid_),
  };
  PBMsgQueryReqPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryReqPosition_descriptor_,
      PBMsgQueryReqPosition::default_instance_,
      PBMsgQueryReqPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryReqPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqPosition, _is_default_instance_));
  PBMsgQueryRspPosition_descriptor_ = file->message_type(11);
  static const int PBMsgQueryRspPosition_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, posidirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, positiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, ydposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, longfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, shortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, longfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, shortfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, openvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, openamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, closeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, positioncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, usemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, opencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, combposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, comblongfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, combshortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, closeprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, closeprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, todayposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, marginratebymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, marginratebyvolume_),
  };
  PBMsgQueryRspPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryRspPosition_descriptor_,
      PBMsgQueryRspPosition::default_instance_,
      PBMsgQueryRspPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryRspPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspPosition, _is_default_instance_));
  PBMsgQueryReqFund_descriptor_ = file->message_type(12);
  static const int PBMsgQueryReqFund_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqFund, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqFund, investorid_),
  };
  PBMsgQueryReqFund_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryReqFund_descriptor_,
      PBMsgQueryReqFund::default_instance_,
      PBMsgQueryReqFund_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryReqFund),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqFund, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryReqFund, _is_default_instance_));
  PBMsgQueryRspFund_descriptor_ = file->message_type(13);
  static const int PBMsgQueryRspFund_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, premortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, precredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, predeposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, interestbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, currmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, withdrawquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, deliverymargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, exchangedeliverymargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, reservebalance_),
  };
  PBMsgQueryRspFund_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgQueryRspFund_descriptor_,
      PBMsgQueryRspFund::default_instance_,
      PBMsgQueryRspFund_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgQueryRspFund),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgQueryRspFund, _is_default_instance_));
  PBMsgOrderInsert_descriptor_ = file->message_type(14);
  static const int PBMsgOrderInsert_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, orderpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, comboffsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, combhedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, volumetotaloriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, timecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, gtddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, volumecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, minvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, contingentcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, stopprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, forceclosereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, isautosuspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, userforceclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, isswaporder_),
  };
  PBMsgOrderInsert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgOrderInsert_descriptor_,
      PBMsgOrderInsert::default_instance_,
      PBMsgOrderInsert_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgOrderInsert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderInsert, _is_default_instance_));
  PBMsgOrderAction_descriptor_ = file->message_type(15);
  static const int PBMsgOrderAction_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, orderactionref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, actionflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, volumechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, actiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, actiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, installid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, actionlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, orderactionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, instrumentid_),
  };
  PBMsgOrderAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgOrderAction_descriptor_,
      PBMsgOrderAction::default_instance_,
      PBMsgOrderAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgOrderAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderAction, _is_default_instance_));
  PBMsgOrderRtn_descriptor_ = file->message_type(16);
  static const int PBMsgOrderRtn_offsets_[59] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, orderpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, comboffsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, combhedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, volumetotaloriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, timecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, gtddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, volumecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, minvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, contingentcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, stopprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, forceclosereason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, isautosuspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, installid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, ordersubmitstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, notifysequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, ordersource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, volumetraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, volumetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, insertdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, inserttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, suspendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, canceltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, activetraderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, clearingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, userproductinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, userforceclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, activeuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, brokerorderseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, relativeordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, zcetotaltradedvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, isswaporder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, iorderstatus_),
  };
  PBMsgOrderRtn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgOrderRtn_descriptor_,
      PBMsgOrderRtn::default_instance_,
      PBMsgOrderRtn_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgOrderRtn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgOrderRtn, _is_default_instance_));
  PBMsgTradeRtn_descriptor_ = file->message_type(17);
  static const int PBMsgTradeRtn_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradingrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, offsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, pricesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, clearingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, businessunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, brokerorderseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, tradesource_),
  };
  PBMsgTradeRtn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgTradeRtn_descriptor_,
      PBMsgTradeRtn::default_instance_,
      PBMsgTradeRtn_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgTradeRtn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgTradeRtn, _is_default_instance_));
  PBMsgSettlementInfoConfirm_descriptor_ = file->message_type(18);
  static const int PBMsgSettlementInfoConfirm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgSettlementInfoConfirm, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgSettlementInfoConfirm, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgSettlementInfoConfirm, confirmdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgSettlementInfoConfirm, confirmtime_),
  };
  PBMsgSettlementInfoConfirm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgSettlementInfoConfirm_descriptor_,
      PBMsgSettlementInfoConfirm::default_instance_,
      PBMsgSettlementInfoConfirm_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgSettlementInfoConfirm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgSettlementInfoConfirm, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgSettlementInfoConfirm, _is_default_instance_));
  PBMsgReqConnect_descriptor_ = file->message_type(19);
  static const int PBMsgReqConnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgReqConnect, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgReqConnect, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgReqConnect, tradefront_),
  };
  PBMsgReqConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgReqConnect_descriptor_,
      PBMsgReqConnect::default_instance_,
      PBMsgReqConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgReqConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgReqConnect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgReqConnect, _is_default_instance_));
  PBMsgRspConnect_descriptor_ = file->message_type(20);
  static const int PBMsgRspConnect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, tradefront_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, requri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, rspuri_),
  };
  PBMsgRspConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMsgRspConnect_descriptor_,
      PBMsgRspConnect::default_instance_,
      PBMsgRspConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMsgRspConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgRspConnect, _is_default_instance_));
  PBOrderStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMsgTrader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgError_descriptor_, &PBMsgError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgLoginReq_descriptor_, &PBMsgLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgLoginRsp_descriptor_, &PBMsgLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgLogout_descriptor_, &PBMsgLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryReqMarketInfo_descriptor_, &PBMsgQueryReqMarketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryRspMarketInfo_descriptor_, &PBMsgQueryRspMarketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryReqInstrumentInfo_descriptor_, &PBMsgQueryReqInstrumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryRspInstrumentInfo_descriptor_, &PBMsgQueryRspInstrumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryReqOrder_descriptor_, &PBMsgQueryReqOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryReqTrade_descriptor_, &PBMsgQueryReqTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryReqPosition_descriptor_, &PBMsgQueryReqPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryRspPosition_descriptor_, &PBMsgQueryRspPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryReqFund_descriptor_, &PBMsgQueryReqFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgQueryRspFund_descriptor_, &PBMsgQueryRspFund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgOrderInsert_descriptor_, &PBMsgOrderInsert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgOrderAction_descriptor_, &PBMsgOrderAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgOrderRtn_descriptor_, &PBMsgOrderRtn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgTradeRtn_descriptor_, &PBMsgTradeRtn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgSettlementInfoConfirm_descriptor_, &PBMsgSettlementInfoConfirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgReqConnect_descriptor_, &PBMsgReqConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMsgRspConnect_descriptor_, &PBMsgRspConnect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMsgTrader_2eproto() {
  delete PBMsgError::default_instance_;
  delete PBMsgError_reflection_;
  delete PBMsgLoginReq::default_instance_;
  delete PBMsgLoginReq_reflection_;
  delete PBMsgLoginRsp::default_instance_;
  delete PBMsgLoginRsp_reflection_;
  delete PBMsgLogout::default_instance_;
  delete PBMsgLogout_reflection_;
  delete PBMsgQueryReqMarketInfo::default_instance_;
  delete PBMsgQueryReqMarketInfo_reflection_;
  delete PBMsgQueryRspMarketInfo::default_instance_;
  delete PBMsgQueryRspMarketInfo_reflection_;
  delete PBMsgQueryReqInstrumentInfo::default_instance_;
  delete PBMsgQueryReqInstrumentInfo_reflection_;
  delete PBMsgQueryRspInstrumentInfo::default_instance_;
  delete PBMsgQueryRspInstrumentInfo_reflection_;
  delete PBMsgQueryReqOrder::default_instance_;
  delete PBMsgQueryReqOrder_reflection_;
  delete PBMsgQueryReqTrade::default_instance_;
  delete PBMsgQueryReqTrade_reflection_;
  delete PBMsgQueryReqPosition::default_instance_;
  delete PBMsgQueryReqPosition_reflection_;
  delete PBMsgQueryRspPosition::default_instance_;
  delete PBMsgQueryRspPosition_reflection_;
  delete PBMsgQueryReqFund::default_instance_;
  delete PBMsgQueryReqFund_reflection_;
  delete PBMsgQueryRspFund::default_instance_;
  delete PBMsgQueryRspFund_reflection_;
  delete PBMsgOrderInsert::default_instance_;
  delete PBMsgOrderInsert_reflection_;
  delete PBMsgOrderAction::default_instance_;
  delete PBMsgOrderAction_reflection_;
  delete PBMsgOrderRtn::default_instance_;
  delete PBMsgOrderRtn_reflection_;
  delete PBMsgTradeRtn::default_instance_;
  delete PBMsgTradeRtn_reflection_;
  delete PBMsgSettlementInfoConfirm::default_instance_;
  delete PBMsgSettlementInfoConfirm_reflection_;
  delete PBMsgReqConnect::default_instance_;
  delete PBMsgReqConnect_reflection_;
  delete PBMsgRspConnect::default_instance_;
  delete PBMsgRspConnect_reflection_;
}

void protobuf_AddDesc_PBMsgTrader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021PBMsgTrader.proto\022\013PBMsgTrader\"/\n\nPBMs"
    "gError\022\017\n\007ErrorID\030\002 \001(\005\022\020\n\010ErrorMsg\030\003 \001("
    "\014\"\352\001\n\rPBMsgLoginReq\022\022\n\nTradingDay\030\002 \001(\t\022"
    "\020\n\010BrokerID\030\003 \001(\t\022\016\n\006UserID\030\004 \001(\t\022\020\n\010Pas"
    "sword\030\005 \001(\t\022\027\n\017UserProductInfo\030\006 \001(\t\022\034\n\024"
    "InterfaceProductInfo\030\007 \001(\t\022\024\n\014ProtocolIn"
    "fo\030\010 \001(\t\022\022\n\nMacAddress\030\t \001(\t\022\027\n\017OneTimeP"
    "assword\030\n \001(\t\022\027\n\017ClientIPAddress\030\013 \001(\t\"\354"
    "\001\n\rPBMsgLoginRsp\022\022\n\nTradingDay\030\002 \001(\t\022\021\n\t"
    "LoginTime\030\003 \001(\t\022\020\n\010BrokerID\030\004 \001(\t\022\016\n\006Use"
    "rID\030\005 \001(\t\022\022\n\nSystemName\030\006 \001(\t\022\017\n\007FrontID"
    "\030\007 \001(\005\022\021\n\tSessionID\030\010 \001(\005\022\023\n\013MaxOrderRef"
    "\030\t \001(\t\022\020\n\010SHFETime\030\n \001(\t\022\017\n\007DCETime\030\013 \001("
    "\t\022\020\n\010CZCETime\030\014 \001(\t\022\020\n\010FFEXTime\030\r \001(\t\"/\n"
    "\013PBMsgLogout\022\020\n\010BrokerID\030\002 \001(\t\022\016\n\006UserID"
    "\030\003 \001(\t\"-\n\027PBMsgQueryReqMarketInfo\022\022\n\nExc"
    "hangeID\030\002 \001(\t\"j\n\027PBMsgQueryRspMarketInfo"
    "\022\013\n\003EOF\030\001 \001(\005\022\022\n\nExchangeID\030\002 \001(\t\022\024\n\014Exc"
    "hangeName\030\003 \001(\014\022\030\n\020ExchangeProperty\030\004 \001("
    "\t\"r\n\033PBMsgQueryReqInstrumentInfo\022\024\n\014Inst"
    "rumentID\030\002 \001(\t\022\022\n\nExchangeID\030\003 \001(\t\022\026\n\016Ex"
    "changeInstID\030\004 \001(\t\022\021\n\tProductID\030\005 \001(\t\"\220\005"
    "\n\033PBMsgQueryRspInstrumentInfo\022\013\n\003EOF\030\001 \001"
    "(\005\022\024\n\014InstrumentID\030\002 \001(\t\022\022\n\nExchangeID\030\003"
    " \001(\t\022\026\n\016InstrumentName\030\004 \001(\014\022\026\n\016Exchange"
    "InstID\030\005 \001(\t\022\021\n\tProductID\030\006 \001(\t\022\024\n\014Produ"
    "ctClass\030\007 \001(\014\022\024\n\014DeliveryYear\030\010 \001(\005\022\025\n\rD"
    "eliveryMonth\030\t \001(\005\022\034\n\024MaxMarketOrderVolu"
    "me\030\n \001(\005\022\034\n\024MinMarketOrderVolume\030\013 \001(\005\022\033"
    "\n\023MaxLimitOrderVolume\030\014 \001(\005\022\033\n\023MinLimitO"
    "rderVolume\030\r \001(\005\022\026\n\016VolumeMultiple\030\016 \001(\005"
    "\022\021\n\tPriceTick\030\017 \001(\005\022\022\n\nCreateDate\030\020 \001(\t\022"
    "\020\n\010OpenDate\030\021 \001(\t\022\022\n\nExpireDate\030\022 \001(\t\022\026\n"
    "\016StartDelivDate\030\023 \001(\t\022\024\n\014EndDelivDate\030\024 "
    "\001(\t\022\025\n\rInstLifePhase\030\025 \001(\t\022\021\n\tIsTrading\030"
    "\026 \001(\005\022\024\n\014PositionType\030\027 \001(\t\022\030\n\020PositionD"
    "ateType\030\030 \001(\t\022\027\n\017LongMarginRatio\030\031 \001(\001\022\030"
    "\n\020ShortMarginRatio\030\032 \001(\001\022\036\n\026MaxMarginSid"
    "eAlgorithm\030\033 \001(\t\"\322\001\n\022PBMsgQueryReqOrder\022"
    "\020\n\010BrokerID\030\002 \001(\t\022\022\n\nInvestorID\030\003 \001(\t\022\024\n"
    "\014InstrumentID\030\004 \001(\t\022\022\n\nExchangeID\030\005 \001(\t\022"
    "\022\n\nOrderSysID\030\006 \001(\t\022\027\n\017InsertTimeStart\030\007"
    " \001(\t\022\025\n\rInsertTimeEnd\030\010 \001(\t\022\022\n\nTradingDa"
    "y\030\t \001(\t\022\024\n\014SettlementID\030\n \001(\005\"\243\001\n\022PBMsgQ"
    "ueryReqTrade\022\020\n\010BrokerID\030\002 \001(\t\022\022\n\nInvest"
    "orID\030\003 \001(\t\022\024\n\014InstrumentID\030\004 \001(\t\022\022\n\nExch"
    "angeID\030\005 \001(\t\022\017\n\007TradeID\030\006 \001(\t\022\026\n\016TradeTi"
    "meStart\030\007 \001(\t\022\024\n\014TradeTimeEnd\030\010 \001(\t\"S\n\025P"
    "BMsgQueryReqPosition\022\020\n\010BrokerID\030\002 \001(\t\022\022"
    "\n\nInvestorID\030\003 \001(\t\022\024\n\014InstrumentID\030\004 \001(\t"
    "\"\234\007\n\025PBMsgQueryRspPosition\022\013\n\003EOF\030\001 \001(\005\022"
    "\024\n\014InstrumentID\030\002 \001(\t\022\020\n\010BrokerID\030\003 \001(\t\022"
    "\022\n\nInvestorID\030\004 \001(\t\022\025\n\rPosiDirection\030\005 \001"
    "(\t\022\021\n\tHedgeFlag\030\006 \001(\t\022\024\n\014PositionDate\030\007 "
    "\001(\t\022\022\n\nYdPosition\030\010 \001(\005\022\020\n\010Position\030\t \001("
    "\005\022\022\n\nLongFrozen\030\n \001(\005\022\023\n\013ShortFrozen\030\013 \001"
    "(\005\022\030\n\020LongFrozenAmount\030\014 \001(\001\022\031\n\021ShortFro"
    "zenAmount\030\r \001(\001\022\022\n\nOpenVolume\030\016 \001(\005\022\023\n\013C"
    "loseVolume\030\017 \001(\005\022\022\n\nOpenAmount\030\020 \001(\001\022\023\n\013"
    "CloseAmount\030\021 \001(\001\022\024\n\014PositionCost\030\022 \001(\001\022"
    "\021\n\tPreMargin\030\023 \001(\001\022\021\n\tUseMargin\030\024 \001(\001\022\024\n"
    "\014FrozenMargin\030\025 \001(\001\022\022\n\nFrozenCash\030\026 \001(\001\022"
    "\030\n\020FrozenCommission\030\027 \001(\001\022\016\n\006CashIn\030\030 \001("
    "\001\022\022\n\nCommission\030\031 \001(\001\022\023\n\013CloseProfit\030\032 \001"
    "(\001\022\026\n\016PositionProfit\030\033 \001(\001\022\032\n\022PreSettlem"
    "entPrice\030\034 \001(\001\022\027\n\017SettlementPrice\030\035 \001(\001\022"
    "\022\n\nTradingDay\030\036 \001(\t\022\024\n\014SettlementID\030\037 \001("
    "\005\022\020\n\010OpenCost\030  \001(\001\022\026\n\016ExchangeMargin\030! "
    "\001(\001\022\024\n\014CombPosition\030\" \001(\005\022\026\n\016CombLongFro"
    "zen\030# \001(\005\022\027\n\017CombShortFrozen\030$ \001(\005\022\031\n\021Cl"
    "oseProfitByDate\030% \001(\001\022\032\n\022CloseProfitByTr"
    "ade\030& \001(\001\022\025\n\rTodayPosition\030\' \001(\005\022\031\n\021Marg"
    "inRateByMoney\030( \001(\001\022\032\n\022MarginRateByVolum"
    "e\030) \001(\001\"9\n\021PBMsgQueryReqFund\022\020\n\010BrokerID"
    "\030\002 \001(\t\022\022\n\nInvestorID\030\003 \001(\t\"\234\005\n\021PBMsgQuer"
    "yRspFund\022\013\n\003EOF\030\001 \001(\005\022\020\n\010BrokerID\030\002 \001(\t\022"
    "\021\n\tAccountID\030\003 \001(\t\022\023\n\013PreMortgage\030\004 \001(\001\022"
    "\021\n\tPreCredit\030\005 \001(\001\022\022\n\nPreDeposit\030\006 \001(\001\022\022"
    "\n\nPreBalance\030\007 \001(\001\022\021\n\tPreMargin\030\010 \001(\001\022\024\n"
    "\014InterestBase\030\t \001(\001\022\020\n\010Interest\030\n \001(\001\022\017\n"
    "\007Deposit\030\013 \001(\001\022\020\n\010Withdraw\030\014 \001(\001\022\024\n\014Froz"
    "enMargin\030\r \001(\001\022\022\n\nFrozenCash\030\016 \001(\001\022\030\n\020Fr"
    "ozenCommission\030\017 \001(\001\022\022\n\nCurrMargin\030\020 \001(\001"
    "\022\016\n\006CashIn\030\021 \001(\001\022\022\n\nCommission\030\022 \001(\001\022\023\n\013"
    "CloseProfit\030\023 \001(\001\022\026\n\016PositionProfit\030\024 \001("
    "\001\022\017\n\007Balance\030\025 \001(\001\022\021\n\tAvailable\030\026 \001(\001\022\025\n"
    "\rWithdrawQuota\030\027 \001(\001\022\017\n\007Reserve\030\030 \001(\001\022\022\n"
    "\nTradingDay\030\031 \001(\t\022\024\n\014SettlementID\030\032 \001(\005\022"
    "\016\n\006Credit\030\033 \001(\001\022\020\n\010Mortgage\030\034 \001(\001\022\026\n\016Exc"
    "hangeMargin\030\035 \001(\001\022\026\n\016DeliveryMargin\030\036 \001("
    "\001\022\036\n\026ExchangeDeliveryMargin\030\037 \001(\001\022\026\n\016Res"
    "erveBalance\030  \001(\001\"\206\004\n\020PBMsgOrderInsert\022\020"
    "\n\010BrokerID\030\002 \001(\t\022\022\n\nInvestorID\030\003 \001(\t\022\024\n\014"
    "InstrumentID\030\004 \001(\t\022\020\n\010OrderRef\030\005 \001(\t\022\016\n\006"
    "UserID\030\006 \001(\t\022\026\n\016OrderPriceType\030\007 \001(\t\022\021\n\t"
    "Direction\030\010 \001(\t\022\026\n\016CombOffsetFlag\030\t \001(\t\022"
    "\025\n\rCombHedgeFlag\030\n \001(\t\022\022\n\nLimitPrice\030\013 \001"
    "(\001\022\033\n\023VolumeTotalOriginal\030\014 \001(\005\022\025\n\rTimeC"
    "ondition\030\r \001(\t\022\017\n\007GTDDate\030\016 \001(\t\022\027\n\017Volum"
    "eCondition\030\017 \001(\t\022\021\n\tMinVolume\030\020 \001(\005\022\033\n\023C"
    "ontingentCondition\030\021 \001(\t\022\021\n\tStopPrice\030\022 "
    "\001(\001\022\030\n\020ForceCloseReason\030\023 \001(\t\022\025\n\rIsAutoS"
    "uspend\030\024 \001(\005\022\024\n\014BusinessUnit\030\025 \001(\t\022\021\n\tRe"
    "questID\030\026 \001(\005\022\026\n\016UserForceClose\030\027 \001(\005\022\023\n"
    "\013IsSwapOrder\030\030 \001(\005\"\214\004\n\020PBMsgOrderAction\022"
    "\020\n\010BrokerID\030\002 \001(\t\022\022\n\nInvestorID\030\003 \001(\t\022\026\n"
    "\016OrderActionRef\030\004 \001(\005\022\020\n\010OrderRef\030\005 \001(\t\022"
    "\021\n\tRequestID\030\006 \001(\005\022\017\n\007FrontID\030\007 \001(\005\022\021\n\tS"
    "essionID\030\010 \001(\005\022\022\n\nExchangeID\030\t \001(\t\022\022\n\nOr"
    "derSysID\030\n \001(\t\022\022\n\nActionFlag\030\013 \001(\t\022\022\n\nLi"
    "mitPrice\030\014 \001(\001\022\024\n\014VolumeChange\030\r \001(\005\022\022\n\n"
    "ActionDate\030\016 \001(\t\022\022\n\nActionTime\030\017 \001(\t\022\020\n\010"
    "TraderID\030\020 \001(\t\022\021\n\tInstallID\030\021 \001(\005\022\024\n\014Ord"
    "erLocalID\030\022 \001(\t\022\025\n\rActionLocalID\030\023 \001(\t\022\025"
    "\n\rParticipantID\030\024 \001(\t\022\020\n\010ClientID\030\025 \001(\t\022"
    "\024\n\014BusinessUnit\030\026 \001(\t\022\031\n\021OrderActionStat"
    "us\030\027 \001(\t\022\016\n\006UserID\030\030 \001(\t\022\021\n\tStatusMsg\030\031 "
    "\001(\014\022\024\n\014InstrumentID\030\032 \001(\t\"\204\n\n\rPBMsgOrder"
    "Rtn\022\013\n\003EOF\030\001 \001(\005\022\020\n\010BrokerID\030\002 \001(\t\022\022\n\nIn"
    "vestorID\030\003 \001(\t\022\024\n\014InstrumentID\030\004 \001(\t\022\020\n\010"
    "OrderRef\030\005 \001(\t\022\016\n\006UserID\030\006 \001(\t\022\026\n\016OrderP"
    "riceType\030\007 \001(\t\022\021\n\tDirection\030\010 \001(\t\022\026\n\016Com"
    "bOffsetFlag\030\t \001(\t\022\025\n\rCombHedgeFlag\030\n \001(\t"
    "\022\022\n\nLimitPrice\030\013 \001(\001\022\033\n\023VolumeTotalOrigi"
    "nal\030\014 \001(\005\022\025\n\rTimeCondition\030\r \001(\t\022\017\n\007GTDD"
    "ate\030\016 \001(\t\022\027\n\017VolumeCondition\030\017 \001(\t\022\021\n\tMi"
    "nVolume\030\020 \001(\005\022\033\n\023ContingentCondition\030\021 \001"
    "(\t\022\021\n\tStopPrice\030\022 \001(\001\022\030\n\020ForceCloseReaso"
    "n\030\023 \001(\t\022\025\n\rIsAutoSuspend\030\024 \001(\005\022\024\n\014Busine"
    "ssUnit\030\025 \001(\t\022\021\n\tRequestID\030\026 \001(\005\022\024\n\014Order"
    "LocalID\030\027 \001(\t\022\022\n\nExchangeID\030\030 \001(\t\022\025\n\rPar"
    "ticipantID\030\031 \001(\t\022\020\n\010ClientID\030\032 \001(\t\022\026\n\016Ex"
    "changeInstID\030\033 \001(\t\022\020\n\010TraderID\030\034 \001(\t\022\021\n\t"
    "InstallID\030\035 \001(\005\022\031\n\021OrderSubmitStatus\030\036 \001"
    "(\t\022\026\n\016NotifySequence\030\037 \001(\005\022\022\n\nTradingDay"
    "\030  \001(\t\022\024\n\014SettlementID\030! \001(\005\022\022\n\nOrderSys"
    "ID\030\" \001(\t\022\023\n\013OrderSource\030# \001(\t\022\023\n\013OrderSt"
    "atus\030$ \001(\t\022\021\n\tOrderType\030% \001(\t\022\024\n\014VolumeT"
    "raded\030& \001(\005\022\023\n\013VolumeTotal\030\' \001(\005\022\022\n\nInse"
    "rtDate\030( \001(\t\022\022\n\nInsertTime\030) \001(\t\022\022\n\nActi"
    "veTime\030* \001(\t\022\023\n\013SuspendTime\030+ \001(\t\022\022\n\nUpd"
    "ateTime\030, \001(\t\022\022\n\nCancelTime\030- \001(\t\022\026\n\016Act"
    "iveTraderID\030. \001(\t\022\026\n\016ClearingPartID\030/ \001("
    "\t\022\022\n\nSequenceNo\0300 \001(\005\022\017\n\007FrontID\0301 \001(\005\022\021"
    "\n\tSessionID\0302 \001(\005\022\027\n\017UserProductInfo\0303 \001"
    "(\t\022\021\n\tStatusMsg\0304 \001(\014\022\026\n\016UserForceClose\030"
    "5 \001(\005\022\024\n\014ActiveUserID\0306 \001(\t\022\026\n\016BrokerOrd"
    "erSeq\0307 \001(\005\022\032\n\022RelativeOrderSysID\0308 \001(\t\022"
    "\034\n\024ZCETotalTradedVolume\0309 \001(\005\022\023\n\013IsSwapO"
    "rder\030: \001(\005\022\024\n\014IOrderStatus\030; \001(\005\"\361\004\n\rPBM"
    "sgTradeRtn\022\013\n\003EOF\030\001 \001(\005\022\020\n\010BrokerID\030\002 \001("
    "\t\022\022\n\nInvestorID\030\003 \001(\t\022\024\n\014InstrumentID\030\004 "
    "\001(\t\022\020\n\010OrderRef\030\005 \001(\t\022\016\n\006UserID\030\006 \001(\t\022\022\n"
    "\nExchangeID\030\007 \001(\t\022\017\n\007TradeID\030\010 \001(\t\022\021\n\tDi"
    "rection\030\t \001(\t\022\022\n\nOrderSysID\030\n \001(\t\022\025\n\rPar"
    "ticipantID\030\013 \001(\t\022\020\n\010ClientID\030\014 \001(\t\022\023\n\013Tr"
    "adingRole\030\r \001(\t\022\026\n\016ExchangeInstID\030\016 \001(\t\022"
    "\022\n\nOffsetFlag\030\017 \001(\t\022\021\n\tHedgeFlag\030\020 \001(\t\022\r"
    "\n\005Price\030\021 \001(\001\022\016\n\006Volume\030\022 \001(\005\022\021\n\tTradeDa"
    "te\030\023 \001(\t\022\021\n\tTradeTime\030\024 \001(\t\022\021\n\tTradeType"
    "\030\025 \001(\t\022\023\n\013PriceSource\030\026 \001(\t\022\020\n\010TraderID\030"
    "\027 \001(\t\022\024\n\014OrderLocalID\030\030 \001(\t\022\026\n\016ClearingP"
    "artID\030\031 \001(\t\022\024\n\014BusinessUnit\030\032 \001(\t\022\022\n\nSeq"
    "uenceNo\030\033 \001(\005\022\022\n\nTradingDay\030\034 \001(\t\022\024\n\014Set"
    "tlementID\030\035 \001(\005\022\026\n\016BrokerOrderSeq\030\036 \001(\005\022"
    "\023\n\013TradeSource\030\037 \001(\t\"l\n\032PBMsgSettlementI"
    "nfoConfirm\022\020\n\010BrokerID\030\002 \001(\t\022\022\n\nInvestor"
    "ID\030\003 \001(\t\022\023\n\013ConfirmDate\030\004 \001(\t\022\023\n\013Confirm"
    "Time\030\005 \001(\t\"K\n\017PBMsgReqConnect\022\020\n\010BrokerI"
    "D\030\002 \001(\t\022\022\n\nInvestorID\030\003 \001(\t\022\022\n\nTradeFron"
    "t\030\004 \001(\t\"k\n\017PBMsgRspConnect\022\020\n\010BrokerID\030\002"
    " \001(\t\022\022\n\nInvestorID\030\003 \001(\t\022\022\n\nTradeFront\030\004"
    " \001(\t\022\016\n\006ReqURI\030\005 \001(\t\022\016\n\006RspURI\030\006 \001(\t*\333\001\n"
    "\rPBOrderStatus\022\023\n\017PBOrderStatus_0\020\000\022\035\n\031T"
    "TIS_ORDER_INSERT_SUCCESS\020\001\022\034\n\030TTIS_ORDER"
    "_INSERT_FAILED\020\002\022\035\n\031TTIS_ORDER_CANCEL_SU"
    "CCESS\020\003\022\034\n\030TTIS_ORDER_CANCEL_FAILED\020\004\022\024\n"
    "\020TTIS_ORDER_OTHER\020\005\022\020\n\014ALL_FINISHED\020\n\022\023\n"
    "\017PARTLY_FINISHED\020\013B\036\n\017ProtoBufMessageB\013P"
    "BMsgTraderb\006proto3", 7178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMsgTrader.proto", &protobuf_RegisterTypes);
  PBMsgError::default_instance_ = new PBMsgError();
  PBMsgLoginReq::default_instance_ = new PBMsgLoginReq();
  PBMsgLoginRsp::default_instance_ = new PBMsgLoginRsp();
  PBMsgLogout::default_instance_ = new PBMsgLogout();
  PBMsgQueryReqMarketInfo::default_instance_ = new PBMsgQueryReqMarketInfo();
  PBMsgQueryRspMarketInfo::default_instance_ = new PBMsgQueryRspMarketInfo();
  PBMsgQueryReqInstrumentInfo::default_instance_ = new PBMsgQueryReqInstrumentInfo();
  PBMsgQueryRspInstrumentInfo::default_instance_ = new PBMsgQueryRspInstrumentInfo();
  PBMsgQueryReqOrder::default_instance_ = new PBMsgQueryReqOrder();
  PBMsgQueryReqTrade::default_instance_ = new PBMsgQueryReqTrade();
  PBMsgQueryReqPosition::default_instance_ = new PBMsgQueryReqPosition();
  PBMsgQueryRspPosition::default_instance_ = new PBMsgQueryRspPosition();
  PBMsgQueryReqFund::default_instance_ = new PBMsgQueryReqFund();
  PBMsgQueryRspFund::default_instance_ = new PBMsgQueryRspFund();
  PBMsgOrderInsert::default_instance_ = new PBMsgOrderInsert();
  PBMsgOrderAction::default_instance_ = new PBMsgOrderAction();
  PBMsgOrderRtn::default_instance_ = new PBMsgOrderRtn();
  PBMsgTradeRtn::default_instance_ = new PBMsgTradeRtn();
  PBMsgSettlementInfoConfirm::default_instance_ = new PBMsgSettlementInfoConfirm();
  PBMsgReqConnect::default_instance_ = new PBMsgReqConnect();
  PBMsgRspConnect::default_instance_ = new PBMsgRspConnect();
  PBMsgError::default_instance_->InitAsDefaultInstance();
  PBMsgLoginReq::default_instance_->InitAsDefaultInstance();
  PBMsgLoginRsp::default_instance_->InitAsDefaultInstance();
  PBMsgLogout::default_instance_->InitAsDefaultInstance();
  PBMsgQueryReqMarketInfo::default_instance_->InitAsDefaultInstance();
  PBMsgQueryRspMarketInfo::default_instance_->InitAsDefaultInstance();
  PBMsgQueryReqInstrumentInfo::default_instance_->InitAsDefaultInstance();
  PBMsgQueryRspInstrumentInfo::default_instance_->InitAsDefaultInstance();
  PBMsgQueryReqOrder::default_instance_->InitAsDefaultInstance();
  PBMsgQueryReqTrade::default_instance_->InitAsDefaultInstance();
  PBMsgQueryReqPosition::default_instance_->InitAsDefaultInstance();
  PBMsgQueryRspPosition::default_instance_->InitAsDefaultInstance();
  PBMsgQueryReqFund::default_instance_->InitAsDefaultInstance();
  PBMsgQueryRspFund::default_instance_->InitAsDefaultInstance();
  PBMsgOrderInsert::default_instance_->InitAsDefaultInstance();
  PBMsgOrderAction::default_instance_->InitAsDefaultInstance();
  PBMsgOrderRtn::default_instance_->InitAsDefaultInstance();
  PBMsgTradeRtn::default_instance_->InitAsDefaultInstance();
  PBMsgSettlementInfoConfirm::default_instance_->InitAsDefaultInstance();
  PBMsgReqConnect::default_instance_->InitAsDefaultInstance();
  PBMsgRspConnect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMsgTrader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMsgTrader_2eproto {
  StaticDescriptorInitializer_PBMsgTrader_2eproto() {
    protobuf_AddDesc_PBMsgTrader_2eproto();
  }
} static_descriptor_initializer_PBMsgTrader_2eproto_;
const ::google::protobuf::EnumDescriptor* PBOrderStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOrderStatus_descriptor_;
}
bool PBOrderStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgError::kErrorIDFieldNumber;
const int PBMsgError::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgError::PBMsgError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgError)
}

void PBMsgError::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgError::PBMsgError(const PBMsgError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgError)
}

void PBMsgError::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorid_ = 0;
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgError::~PBMsgError() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgError)
  SharedDtor();
}

void PBMsgError::SharedDtor() {
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgError_descriptor_;
}

const PBMsgError& PBMsgError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgError* PBMsgError::default_instance_ = NULL;

PBMsgError* PBMsgError::New(::google::protobuf::Arena* arena) const {
  PBMsgError* n = new PBMsgError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgError::Clear() {
  errorid_ = 0;
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ErrorID = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ErrorMsg;
        break;
      }

      // optional bytes ErrorMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_ErrorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errormsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgError)
  return false;
#undef DO_
}

void PBMsgError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgError)
  // optional int32 ErrorID = 2;
  if (this->errorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errorid(), output);
  }

  // optional bytes ErrorMsg = 3;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->errormsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgError)
}

::google::protobuf::uint8* PBMsgError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgError)
  // optional int32 ErrorID = 2;
  if (this->errorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errorid(), target);
  }

  // optional bytes ErrorMsg = 3;
  if (this->errormsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->errormsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgError)
  return target;
}

int PBMsgError::ByteSize() const {
  int total_size = 0;

  // optional int32 ErrorID = 2;
  if (this->errorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorid());
  }

  // optional bytes ErrorMsg = 3;
  if (this->errormsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->errormsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgError::MergeFrom(const PBMsgError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.errorid() != 0) {
    set_errorid(from.errorid());
  }
  if (from.errormsg().size() > 0) {

    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
}

void PBMsgError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgError::CopyFrom(const PBMsgError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgError::IsInitialized() const {

  return true;
}

void PBMsgError::Swap(PBMsgError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgError::InternalSwap(PBMsgError* other) {
  std::swap(errorid_, other->errorid_);
  errormsg_.Swap(&other->errormsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgError_descriptor_;
  metadata.reflection = PBMsgError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgError

// optional int32 ErrorID = 2;
void PBMsgError::clear_errorid() {
  errorid_ = 0;
}
 ::google::protobuf::int32 PBMsgError::errorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgError.ErrorID)
  return errorid_;
}
 void PBMsgError::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgError.ErrorID)
}

// optional bytes ErrorMsg = 3;
void PBMsgError::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgError::errormsg() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgError.ErrorMsg)
  return errormsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgError::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgError.ErrorMsg)
}
 void PBMsgError::set_errormsg(const char* value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgError.ErrorMsg)
}
 void PBMsgError::set_errormsg(const void* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgError.ErrorMsg)
}
 ::std::string* PBMsgError::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgError.ErrorMsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgError::release_errormsg() {
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgError::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgError.ErrorMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgLoginReq::kTradingDayFieldNumber;
const int PBMsgLoginReq::kBrokerIDFieldNumber;
const int PBMsgLoginReq::kUserIDFieldNumber;
const int PBMsgLoginReq::kPasswordFieldNumber;
const int PBMsgLoginReq::kUserProductInfoFieldNumber;
const int PBMsgLoginReq::kInterfaceProductInfoFieldNumber;
const int PBMsgLoginReq::kProtocolInfoFieldNumber;
const int PBMsgLoginReq::kMacAddressFieldNumber;
const int PBMsgLoginReq::kOneTimePasswordFieldNumber;
const int PBMsgLoginReq::kClientIPAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgLoginReq::PBMsgLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgLoginReq)
}

void PBMsgLoginReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgLoginReq::PBMsgLoginReq(const PBMsgLoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgLoginReq)
}

void PBMsgLoginReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceproductinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onetimepassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgLoginReq::~PBMsgLoginReq() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgLoginReq)
  SharedDtor();
}

void PBMsgLoginReq::SharedDtor() {
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceproductinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onetimepassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgLoginReq_descriptor_;
}

const PBMsgLoginReq& PBMsgLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgLoginReq* PBMsgLoginReq::default_instance_ = NULL;

PBMsgLoginReq* PBMsgLoginReq::New(::google::protobuf::Arena* arena) const {
  PBMsgLoginReq* n = new PBMsgLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgLoginReq::Clear() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onetimepassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TradingDay = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BrokerID;
        break;
      }

      // optional string BrokerID = 3;
      case 3: {
        if (tag == 26) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserID;
        break;
      }

      // optional string UserID = 4;
      case 4: {
        if (tag == 34) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Password;
        break;
      }

      // optional string Password = 5;
      case 5: {
        if (tag == 42) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.Password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UserProductInfo;
        break;
      }

      // optional string UserProductInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_UserProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userproductinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userproductinfo().data(), this->userproductinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.UserProductInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_InterfaceProductInfo;
        break;
      }

      // optional string InterfaceProductInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_InterfaceProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfaceproductinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interfaceproductinfo().data(), this->interfaceproductinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ProtocolInfo;
        break;
      }

      // optional string ProtocolInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_ProtocolInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocolinfo().data(), this->protocolinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.ProtocolInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_MacAddress;
        break;
      }

      // optional string MacAddress = 9;
      case 9: {
        if (tag == 74) {
         parse_MacAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.MacAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OneTimePassword;
        break;
      }

      // optional string OneTimePassword = 10;
      case 10: {
        if (tag == 82) {
         parse_OneTimePassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onetimepassword()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->onetimepassword().data(), this->onetimepassword().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.OneTimePassword"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ClientIPAddress;
        break;
      }

      // optional string ClientIPAddress = 11;
      case 11: {
        if (tag == 90) {
         parse_ClientIPAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientipaddress().data(), this->clientipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginReq.ClientIPAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgLoginReq)
  return false;
#undef DO_
}

void PBMsgLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgLoginReq)
  // optional string TradingDay = 2;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradingday(), output);
  }

  // optional string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // optional string UserID = 4;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userid(), output);
  }

  // optional string Password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // optional string UserProductInfo = 6;
  if (this->userproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.UserProductInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userproductinfo(), output);
  }

  // optional string InterfaceProductInfo = 7;
  if (this->interfaceproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfaceproductinfo().data(), this->interfaceproductinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->interfaceproductinfo(), output);
  }

  // optional string ProtocolInfo = 8;
  if (this->protocolinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolinfo().data(), this->protocolinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.ProtocolInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->protocolinfo(), output);
  }

  // optional string MacAddress = 9;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.MacAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->macaddress(), output);
  }

  // optional string OneTimePassword = 10;
  if (this->onetimepassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onetimepassword().data(), this->onetimepassword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.OneTimePassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->onetimepassword(), output);
  }

  // optional string ClientIPAddress = 11;
  if (this->clientipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientipaddress().data(), this->clientipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.ClientIPAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clientipaddress(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgLoginReq)
}

::google::protobuf::uint8* PBMsgLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgLoginReq)
  // optional string TradingDay = 2;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradingday(), target);
  }

  // optional string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // optional string UserID = 4;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // optional string Password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // optional string UserProductInfo = 6;
  if (this->userproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.UserProductInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userproductinfo(), target);
  }

  // optional string InterfaceProductInfo = 7;
  if (this->interfaceproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfaceproductinfo().data(), this->interfaceproductinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->interfaceproductinfo(), target);
  }

  // optional string ProtocolInfo = 8;
  if (this->protocolinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocolinfo().data(), this->protocolinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.ProtocolInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->protocolinfo(), target);
  }

  // optional string MacAddress = 9;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.MacAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->macaddress(), target);
  }

  // optional string OneTimePassword = 10;
  if (this->onetimepassword().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onetimepassword().data(), this->onetimepassword().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.OneTimePassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->onetimepassword(), target);
  }

  // optional string ClientIPAddress = 11;
  if (this->clientipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientipaddress().data(), this->clientipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginReq.ClientIPAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientipaddress(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgLoginReq)
  return target;
}

int PBMsgLoginReq::ByteSize() const {
  int total_size = 0;

  // optional string TradingDay = 2;
  if (this->tradingday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string UserID = 4;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string Password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional string UserProductInfo = 6;
  if (this->userproductinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userproductinfo());
  }

  // optional string InterfaceProductInfo = 7;
  if (this->interfaceproductinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interfaceproductinfo());
  }

  // optional string ProtocolInfo = 8;
  if (this->protocolinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocolinfo());
  }

  // optional string MacAddress = 9;
  if (this->macaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->macaddress());
  }

  // optional string OneTimePassword = 10;
  if (this->onetimepassword().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->onetimepassword());
  }

  // optional string ClientIPAddress = 11;
  if (this->clientipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientipaddress());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgLoginReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgLoginReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgLoginReq::MergeFrom(const PBMsgLoginReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.userproductinfo().size() > 0) {

    userproductinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userproductinfo_);
  }
  if (from.interfaceproductinfo().size() > 0) {

    interfaceproductinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfaceproductinfo_);
  }
  if (from.protocolinfo().size() > 0) {

    protocolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolinfo_);
  }
  if (from.macaddress().size() > 0) {

    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
  if (from.onetimepassword().size() > 0) {

    onetimepassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.onetimepassword_);
  }
  if (from.clientipaddress().size() > 0) {

    clientipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientipaddress_);
  }
}

void PBMsgLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgLoginReq::CopyFrom(const PBMsgLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgLoginReq::IsInitialized() const {

  return true;
}

void PBMsgLoginReq::Swap(PBMsgLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgLoginReq::InternalSwap(PBMsgLoginReq* other) {
  tradingday_.Swap(&other->tradingday_);
  brokerid_.Swap(&other->brokerid_);
  userid_.Swap(&other->userid_);
  password_.Swap(&other->password_);
  userproductinfo_.Swap(&other->userproductinfo_);
  interfaceproductinfo_.Swap(&other->interfaceproductinfo_);
  protocolinfo_.Swap(&other->protocolinfo_);
  macaddress_.Swap(&other->macaddress_);
  onetimepassword_.Swap(&other->onetimepassword_);
  clientipaddress_.Swap(&other->clientipaddress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgLoginReq_descriptor_;
  metadata.reflection = PBMsgLoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgLoginReq

// optional string TradingDay = 2;
void PBMsgLoginReq::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.TradingDay)
}
 void PBMsgLoginReq::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.TradingDay)
}
 void PBMsgLoginReq::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.TradingDay)
}
 ::std::string* PBMsgLoginReq::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.TradingDay)
}

// optional string BrokerID = 3;
void PBMsgLoginReq::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.BrokerID)
}
 void PBMsgLoginReq::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.BrokerID)
}
 void PBMsgLoginReq::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.BrokerID)
}
 ::std::string* PBMsgLoginReq::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.BrokerID)
}

// optional string UserID = 4;
void PBMsgLoginReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.UserID)
}
 void PBMsgLoginReq::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.UserID)
}
 void PBMsgLoginReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.UserID)
}
 ::std::string* PBMsgLoginReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.UserID)
}

// optional string Password = 5;
void PBMsgLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::password() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.Password)
}
 void PBMsgLoginReq::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.Password)
}
 void PBMsgLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.Password)
}
 ::std::string* PBMsgLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.Password)
}

// optional string UserProductInfo = 6;
void PBMsgLoginReq::clear_userproductinfo() {
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::userproductinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
  return userproductinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_userproductinfo(const ::std::string& value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}
 void PBMsgLoginReq::set_userproductinfo(const char* value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}
 void PBMsgLoginReq::set_userproductinfo(const char* value, size_t size) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}
 ::std::string* PBMsgLoginReq::mutable_userproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
  return userproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_userproductinfo() {
  
  return userproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_userproductinfo(::std::string* userproductinfo) {
  if (userproductinfo != NULL) {
    
  } else {
    
  }
  userproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userproductinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.UserProductInfo)
}

// optional string InterfaceProductInfo = 7;
void PBMsgLoginReq::clear_interfaceproductinfo() {
  interfaceproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::interfaceproductinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
  return interfaceproductinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_interfaceproductinfo(const ::std::string& value) {
  
  interfaceproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}
 void PBMsgLoginReq::set_interfaceproductinfo(const char* value) {
  
  interfaceproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}
 void PBMsgLoginReq::set_interfaceproductinfo(const char* value, size_t size) {
  
  interfaceproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}
 ::std::string* PBMsgLoginReq::mutable_interfaceproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
  return interfaceproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_interfaceproductinfo() {
  
  return interfaceproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_interfaceproductinfo(::std::string* interfaceproductinfo) {
  if (interfaceproductinfo != NULL) {
    
  } else {
    
  }
  interfaceproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfaceproductinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.InterfaceProductInfo)
}

// optional string ProtocolInfo = 8;
void PBMsgLoginReq::clear_protocolinfo() {
  protocolinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::protocolinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
  return protocolinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_protocolinfo(const ::std::string& value) {
  
  protocolinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}
 void PBMsgLoginReq::set_protocolinfo(const char* value) {
  
  protocolinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}
 void PBMsgLoginReq::set_protocolinfo(const char* value, size_t size) {
  
  protocolinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}
 ::std::string* PBMsgLoginReq::mutable_protocolinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
  return protocolinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_protocolinfo() {
  
  return protocolinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_protocolinfo(::std::string* protocolinfo) {
  if (protocolinfo != NULL) {
    
  } else {
    
  }
  protocolinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocolinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.ProtocolInfo)
}

// optional string MacAddress = 9;
void PBMsgLoginReq::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::macaddress() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.MacAddress)
  return macaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.MacAddress)
}
 void PBMsgLoginReq::set_macaddress(const char* value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.MacAddress)
}
 void PBMsgLoginReq::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.MacAddress)
}
 ::std::string* PBMsgLoginReq::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.MacAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_macaddress() {
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.MacAddress)
}

// optional string OneTimePassword = 10;
void PBMsgLoginReq::clear_onetimepassword() {
  onetimepassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::onetimepassword() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
  return onetimepassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_onetimepassword(const ::std::string& value) {
  
  onetimepassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}
 void PBMsgLoginReq::set_onetimepassword(const char* value) {
  
  onetimepassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}
 void PBMsgLoginReq::set_onetimepassword(const char* value, size_t size) {
  
  onetimepassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}
 ::std::string* PBMsgLoginReq::mutable_onetimepassword() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
  return onetimepassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_onetimepassword() {
  
  return onetimepassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_onetimepassword(::std::string* onetimepassword) {
  if (onetimepassword != NULL) {
    
  } else {
    
  }
  onetimepassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onetimepassword);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.OneTimePassword)
}

// optional string ClientIPAddress = 11;
void PBMsgLoginReq::clear_clientipaddress() {
  clientipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginReq::clientipaddress() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
  return clientipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_clientipaddress(const ::std::string& value) {
  
  clientipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}
 void PBMsgLoginReq::set_clientipaddress(const char* value) {
  
  clientipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}
 void PBMsgLoginReq::set_clientipaddress(const char* value, size_t size) {
  
  clientipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}
 ::std::string* PBMsgLoginReq::mutable_clientipaddress() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
  return clientipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginReq::release_clientipaddress() {
  
  return clientipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginReq::set_allocated_clientipaddress(::std::string* clientipaddress) {
  if (clientipaddress != NULL) {
    
  } else {
    
  }
  clientipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientipaddress);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginReq.ClientIPAddress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgLoginRsp::kTradingDayFieldNumber;
const int PBMsgLoginRsp::kLoginTimeFieldNumber;
const int PBMsgLoginRsp::kBrokerIDFieldNumber;
const int PBMsgLoginRsp::kUserIDFieldNumber;
const int PBMsgLoginRsp::kSystemNameFieldNumber;
const int PBMsgLoginRsp::kFrontIDFieldNumber;
const int PBMsgLoginRsp::kSessionIDFieldNumber;
const int PBMsgLoginRsp::kMaxOrderRefFieldNumber;
const int PBMsgLoginRsp::kSHFETimeFieldNumber;
const int PBMsgLoginRsp::kDCETimeFieldNumber;
const int PBMsgLoginRsp::kCZCETimeFieldNumber;
const int PBMsgLoginRsp::kFFEXTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgLoginRsp::PBMsgLoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgLoginRsp)
}

void PBMsgLoginRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgLoginRsp::PBMsgLoginRsp(const PBMsgLoginRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgLoginRsp)
}

void PBMsgLoginRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frontid_ = 0;
  sessionid_ = 0;
  maxorderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czcetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffextime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgLoginRsp::~PBMsgLoginRsp() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgLoginRsp)
  SharedDtor();
}

void PBMsgLoginRsp::SharedDtor() {
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxorderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czcetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffextime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgLoginRsp_descriptor_;
}

const PBMsgLoginRsp& PBMsgLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgLoginRsp* PBMsgLoginRsp::default_instance_ = NULL;

PBMsgLoginRsp* PBMsgLoginRsp::New(::google::protobuf::Arena* arena) const {
  PBMsgLoginRsp* n = new PBMsgLoginRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgLoginRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgLoginRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frontid_, sessionid_);
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxorderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czcetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ffextime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TradingDay = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LoginTime;
        break;
      }

      // optional string LoginTime = 3;
      case 3: {
        if (tag == 26) {
         parse_LoginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logintime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logintime().data(), this->logintime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.LoginTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BrokerID;
        break;
      }

      // optional string BrokerID = 4;
      case 4: {
        if (tag == 34) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserID;
        break;
      }

      // optional string UserID = 5;
      case 5: {
        if (tag == 42) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SystemName;
        break;
      }

      // optional string SystemName = 6;
      case 6: {
        if (tag == 50) {
         parse_SystemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->systemname().data(), this->systemname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.SystemName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FrontID;
        break;
      }

      // optional int32 FrontID = 7;
      case 7: {
        if (tag == 56) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SessionID;
        break;
      }

      // optional int32 SessionID = 8;
      case 8: {
        if (tag == 64) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_MaxOrderRef;
        break;
      }

      // optional string MaxOrderRef = 9;
      case 9: {
        if (tag == 74) {
         parse_MaxOrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxorderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maxorderref().data(), this->maxorderref().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.MaxOrderRef"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SHFETime;
        break;
      }

      // optional string SHFETime = 10;
      case 10: {
        if (tag == 82) {
         parse_SHFETime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shfetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shfetime().data(), this->shfetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.SHFETime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DCETime;
        break;
      }

      // optional string DCETime = 11;
      case 11: {
        if (tag == 90) {
         parse_DCETime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcetime().data(), this->dcetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.DCETime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_CZCETime;
        break;
      }

      // optional string CZCETime = 12;
      case 12: {
        if (tag == 98) {
         parse_CZCETime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_czcetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->czcetime().data(), this->czcetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.CZCETime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_FFEXTime;
        break;
      }

      // optional string FFEXTime = 13;
      case 13: {
        if (tag == 106) {
         parse_FFEXTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ffextime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ffextime().data(), this->ffextime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLoginRsp.FFEXTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgLoginRsp)
  return false;
#undef DO_
}

void PBMsgLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgLoginRsp)
  // optional string TradingDay = 2;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradingday(), output);
  }

  // optional string LoginTime = 3;
  if (this->logintime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.LoginTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->logintime(), output);
  }

  // optional string BrokerID = 4;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->brokerid(), output);
  }

  // optional string UserID = 5;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userid(), output);
  }

  // optional string SystemName = 6;
  if (this->systemname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->systemname().data(), this->systemname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.SystemName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->systemname(), output);
  }

  // optional int32 FrontID = 7;
  if (this->frontid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frontid(), output);
  }

  // optional int32 SessionID = 8;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sessionid(), output);
  }

  // optional string MaxOrderRef = 9;
  if (this->maxorderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxorderref().data(), this->maxorderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.MaxOrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->maxorderref(), output);
  }

  // optional string SHFETime = 10;
  if (this->shfetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shfetime().data(), this->shfetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.SHFETime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->shfetime(), output);
  }

  // optional string DCETime = 11;
  if (this->dcetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcetime().data(), this->dcetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.DCETime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dcetime(), output);
  }

  // optional string CZCETime = 12;
  if (this->czcetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->czcetime().data(), this->czcetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.CZCETime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->czcetime(), output);
  }

  // optional string FFEXTime = 13;
  if (this->ffextime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffextime().data(), this->ffextime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.FFEXTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ffextime(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgLoginRsp)
}

::google::protobuf::uint8* PBMsgLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgLoginRsp)
  // optional string TradingDay = 2;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradingday(), target);
  }

  // optional string LoginTime = 3;
  if (this->logintime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.LoginTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logintime(), target);
  }

  // optional string BrokerID = 4;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brokerid(), target);
  }

  // optional string UserID = 5;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // optional string SystemName = 6;
  if (this->systemname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->systemname().data(), this->systemname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.SystemName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->systemname(), target);
  }

  // optional int32 FrontID = 7;
  if (this->frontid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frontid(), target);
  }

  // optional int32 SessionID = 8;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sessionid(), target);
  }

  // optional string MaxOrderRef = 9;
  if (this->maxorderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxorderref().data(), this->maxorderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.MaxOrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->maxorderref(), target);
  }

  // optional string SHFETime = 10;
  if (this->shfetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shfetime().data(), this->shfetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.SHFETime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->shfetime(), target);
  }

  // optional string DCETime = 11;
  if (this->dcetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcetime().data(), this->dcetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.DCETime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dcetime(), target);
  }

  // optional string CZCETime = 12;
  if (this->czcetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->czcetime().data(), this->czcetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.CZCETime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->czcetime(), target);
  }

  // optional string FFEXTime = 13;
  if (this->ffextime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ffextime().data(), this->ffextime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLoginRsp.FFEXTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ffextime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgLoginRsp)
  return target;
}

int PBMsgLoginRsp::ByteSize() const {
  int total_size = 0;

  // optional string TradingDay = 2;
  if (this->tradingday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional string LoginTime = 3;
  if (this->logintime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logintime());
  }

  // optional string BrokerID = 4;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string UserID = 5;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string SystemName = 6;
  if (this->systemname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->systemname());
  }

  // optional int32 FrontID = 7;
  if (this->frontid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontid());
  }

  // optional int32 SessionID = 8;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  // optional string MaxOrderRef = 9;
  if (this->maxorderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maxorderref());
  }

  // optional string SHFETime = 10;
  if (this->shfetime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shfetime());
  }

  // optional string DCETime = 11;
  if (this->dcetime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcetime());
  }

  // optional string CZCETime = 12;
  if (this->czcetime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->czcetime());
  }

  // optional string FFEXTime = 13;
  if (this->ffextime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ffextime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgLoginRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgLoginRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgLoginRsp::MergeFrom(const PBMsgLoginRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.logintime().size() > 0) {

    logintime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logintime_);
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.systemname().size() > 0) {

    systemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.systemname_);
  }
  if (from.frontid() != 0) {
    set_frontid(from.frontid());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.maxorderref().size() > 0) {

    maxorderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxorderref_);
  }
  if (from.shfetime().size() > 0) {

    shfetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shfetime_);
  }
  if (from.dcetime().size() > 0) {

    dcetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcetime_);
  }
  if (from.czcetime().size() > 0) {

    czcetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.czcetime_);
  }
  if (from.ffextime().size() > 0) {

    ffextime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ffextime_);
  }
}

void PBMsgLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgLoginRsp::CopyFrom(const PBMsgLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgLoginRsp::IsInitialized() const {

  return true;
}

void PBMsgLoginRsp::Swap(PBMsgLoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgLoginRsp::InternalSwap(PBMsgLoginRsp* other) {
  tradingday_.Swap(&other->tradingday_);
  logintime_.Swap(&other->logintime_);
  brokerid_.Swap(&other->brokerid_);
  userid_.Swap(&other->userid_);
  systemname_.Swap(&other->systemname_);
  std::swap(frontid_, other->frontid_);
  std::swap(sessionid_, other->sessionid_);
  maxorderref_.Swap(&other->maxorderref_);
  shfetime_.Swap(&other->shfetime_);
  dcetime_.Swap(&other->dcetime_);
  czcetime_.Swap(&other->czcetime_);
  ffextime_.Swap(&other->ffextime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgLoginRsp_descriptor_;
  metadata.reflection = PBMsgLoginRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgLoginRsp

// optional string TradingDay = 2;
void PBMsgLoginRsp::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}
 void PBMsgLoginRsp::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}
 void PBMsgLoginRsp::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}
 ::std::string* PBMsgLoginRsp::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.TradingDay)
}

// optional string LoginTime = 3;
void PBMsgLoginRsp::clear_logintime() {
  logintime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::logintime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.LoginTime)
  return logintime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_logintime(const ::std::string& value) {
  
  logintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}
 void PBMsgLoginRsp::set_logintime(const char* value) {
  
  logintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}
 void PBMsgLoginRsp::set_logintime(const char* value, size_t size) {
  
  logintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}
 ::std::string* PBMsgLoginRsp::mutable_logintime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.LoginTime)
  return logintime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_logintime() {
  
  return logintime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_logintime(::std::string* logintime) {
  if (logintime != NULL) {
    
  } else {
    
  }
  logintime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logintime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.LoginTime)
}

// optional string BrokerID = 4;
void PBMsgLoginRsp::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}
 void PBMsgLoginRsp::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}
 void PBMsgLoginRsp::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}
 ::std::string* PBMsgLoginRsp::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.BrokerID)
}

// optional string UserID = 5;
void PBMsgLoginRsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.UserID)
}
 void PBMsgLoginRsp::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.UserID)
}
 void PBMsgLoginRsp::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.UserID)
}
 ::std::string* PBMsgLoginRsp::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.UserID)
}

// optional string SystemName = 6;
void PBMsgLoginRsp::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::systemname() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.SystemName)
  return systemname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_systemname(const ::std::string& value) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.SystemName)
}
 void PBMsgLoginRsp::set_systemname(const char* value) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.SystemName)
}
 void PBMsgLoginRsp::set_systemname(const char* value, size_t size) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.SystemName)
}
 ::std::string* PBMsgLoginRsp::mutable_systemname() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.SystemName)
  return systemname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_systemname() {
  
  return systemname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_systemname(::std::string* systemname) {
  if (systemname != NULL) {
    
  } else {
    
  }
  systemname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.SystemName)
}

// optional int32 FrontID = 7;
void PBMsgLoginRsp::clear_frontid() {
  frontid_ = 0;
}
 ::google::protobuf::int32 PBMsgLoginRsp::frontid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.FrontID)
  return frontid_;
}
 void PBMsgLoginRsp::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.FrontID)
}

// optional int32 SessionID = 8;
void PBMsgLoginRsp::clear_sessionid() {
  sessionid_ = 0;
}
 ::google::protobuf::int32 PBMsgLoginRsp::sessionid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.SessionID)
  return sessionid_;
}
 void PBMsgLoginRsp::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.SessionID)
}

// optional string MaxOrderRef = 9;
void PBMsgLoginRsp::clear_maxorderref() {
  maxorderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::maxorderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
  return maxorderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_maxorderref(const ::std::string& value) {
  
  maxorderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}
 void PBMsgLoginRsp::set_maxorderref(const char* value) {
  
  maxorderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}
 void PBMsgLoginRsp::set_maxorderref(const char* value, size_t size) {
  
  maxorderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}
 ::std::string* PBMsgLoginRsp::mutable_maxorderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
  return maxorderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_maxorderref() {
  
  return maxorderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_maxorderref(::std::string* maxorderref) {
  if (maxorderref != NULL) {
    
  } else {
    
  }
  maxorderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxorderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.MaxOrderRef)
}

// optional string SHFETime = 10;
void PBMsgLoginRsp::clear_shfetime() {
  shfetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::shfetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.SHFETime)
  return shfetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_shfetime(const ::std::string& value) {
  
  shfetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}
 void PBMsgLoginRsp::set_shfetime(const char* value) {
  
  shfetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}
 void PBMsgLoginRsp::set_shfetime(const char* value, size_t size) {
  
  shfetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}
 ::std::string* PBMsgLoginRsp::mutable_shfetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.SHFETime)
  return shfetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_shfetime() {
  
  return shfetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_shfetime(::std::string* shfetime) {
  if (shfetime != NULL) {
    
  } else {
    
  }
  shfetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shfetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.SHFETime)
}

// optional string DCETime = 11;
void PBMsgLoginRsp::clear_dcetime() {
  dcetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::dcetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.DCETime)
  return dcetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_dcetime(const ::std::string& value) {
  
  dcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.DCETime)
}
 void PBMsgLoginRsp::set_dcetime(const char* value) {
  
  dcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.DCETime)
}
 void PBMsgLoginRsp::set_dcetime(const char* value, size_t size) {
  
  dcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.DCETime)
}
 ::std::string* PBMsgLoginRsp::mutable_dcetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.DCETime)
  return dcetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_dcetime() {
  
  return dcetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_dcetime(::std::string* dcetime) {
  if (dcetime != NULL) {
    
  } else {
    
  }
  dcetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.DCETime)
}

// optional string CZCETime = 12;
void PBMsgLoginRsp::clear_czcetime() {
  czcetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::czcetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.CZCETime)
  return czcetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_czcetime(const ::std::string& value) {
  
  czcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}
 void PBMsgLoginRsp::set_czcetime(const char* value) {
  
  czcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}
 void PBMsgLoginRsp::set_czcetime(const char* value, size_t size) {
  
  czcetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}
 ::std::string* PBMsgLoginRsp::mutable_czcetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.CZCETime)
  return czcetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_czcetime() {
  
  return czcetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_czcetime(::std::string* czcetime) {
  if (czcetime != NULL) {
    
  } else {
    
  }
  czcetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), czcetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.CZCETime)
}

// optional string FFEXTime = 13;
void PBMsgLoginRsp::clear_ffextime() {
  ffextime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLoginRsp::ffextime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
  return ffextime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_ffextime(const ::std::string& value) {
  
  ffextime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}
 void PBMsgLoginRsp::set_ffextime(const char* value) {
  
  ffextime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}
 void PBMsgLoginRsp::set_ffextime(const char* value, size_t size) {
  
  ffextime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}
 ::std::string* PBMsgLoginRsp::mutable_ffextime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
  return ffextime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLoginRsp::release_ffextime() {
  
  return ffextime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLoginRsp::set_allocated_ffextime(::std::string* ffextime) {
  if (ffextime != NULL) {
    
  } else {
    
  }
  ffextime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ffextime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLoginRsp.FFEXTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgLogout::kBrokerIDFieldNumber;
const int PBMsgLogout::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgLogout::PBMsgLogout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgLogout)
}

void PBMsgLogout::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgLogout::PBMsgLogout(const PBMsgLogout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgLogout)
}

void PBMsgLogout::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgLogout::~PBMsgLogout() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgLogout)
  SharedDtor();
}

void PBMsgLogout::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgLogout_descriptor_;
}

const PBMsgLogout& PBMsgLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgLogout* PBMsgLogout::default_instance_ = NULL;

PBMsgLogout* PBMsgLogout::New(::google::protobuf::Arena* arena) const {
  PBMsgLogout* n = new PBMsgLogout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgLogout::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLogout.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserID;
        break;
      }

      // optional string UserID = 3;
      case 3: {
        if (tag == 26) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgLogout.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgLogout)
  return false;
#undef DO_
}

void PBMsgLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgLogout)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLogout.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string UserID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLogout.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgLogout)
}

::google::protobuf::uint8* PBMsgLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgLogout)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLogout.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string UserID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgLogout.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgLogout)
  return target;
}

int PBMsgLogout::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string UserID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgLogout::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgLogout* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgLogout>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgLogout::MergeFrom(const PBMsgLogout& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PBMsgLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgLogout::CopyFrom(const PBMsgLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgLogout::IsInitialized() const {

  return true;
}

void PBMsgLogout::Swap(PBMsgLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgLogout::InternalSwap(PBMsgLogout* other) {
  brokerid_.Swap(&other->brokerid_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgLogout_descriptor_;
  metadata.reflection = PBMsgLogout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgLogout

// optional string BrokerID = 2;
void PBMsgLogout::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLogout::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLogout.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLogout::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLogout.BrokerID)
}
 void PBMsgLogout::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLogout.BrokerID)
}
 void PBMsgLogout::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLogout.BrokerID)
}
 ::std::string* PBMsgLogout::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLogout.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLogout::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLogout::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLogout.BrokerID)
}

// optional string UserID = 3;
void PBMsgLogout::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgLogout::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgLogout.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLogout::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgLogout.UserID)
}
 void PBMsgLogout::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgLogout.UserID)
}
 void PBMsgLogout::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgLogout.UserID)
}
 ::std::string* PBMsgLogout::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgLogout.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgLogout::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgLogout::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgLogout.UserID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryReqMarketInfo::kExchangeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryReqMarketInfo::PBMsgQueryReqMarketInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryReqMarketInfo)
}

void PBMsgQueryReqMarketInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryReqMarketInfo::PBMsgQueryReqMarketInfo(const PBMsgQueryReqMarketInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryReqMarketInfo)
}

void PBMsgQueryReqMarketInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryReqMarketInfo::~PBMsgQueryReqMarketInfo() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryReqMarketInfo)
  SharedDtor();
}

void PBMsgQueryReqMarketInfo::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryReqMarketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryReqMarketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryReqMarketInfo_descriptor_;
}

const PBMsgQueryReqMarketInfo& PBMsgQueryReqMarketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryReqMarketInfo* PBMsgQueryReqMarketInfo::default_instance_ = NULL;

PBMsgQueryReqMarketInfo* PBMsgQueryReqMarketInfo::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryReqMarketInfo* n = new PBMsgQueryReqMarketInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryReqMarketInfo::Clear() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgQueryReqMarketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryReqMarketInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ExchangeID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryReqMarketInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryReqMarketInfo)
  return false;
#undef DO_
}

void PBMsgQueryReqMarketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryReqMarketInfo)
  // optional string ExchangeID = 2;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryReqMarketInfo)
}

::google::protobuf::uint8* PBMsgQueryReqMarketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryReqMarketInfo)
  // optional string ExchangeID = 2;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryReqMarketInfo)
  return target;
}

int PBMsgQueryReqMarketInfo::ByteSize() const {
  int total_size = 0;

  // optional string ExchangeID = 2;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryReqMarketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryReqMarketInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryReqMarketInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryReqMarketInfo::MergeFrom(const PBMsgQueryReqMarketInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
}

void PBMsgQueryReqMarketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryReqMarketInfo::CopyFrom(const PBMsgQueryReqMarketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryReqMarketInfo::IsInitialized() const {

  return true;
}

void PBMsgQueryReqMarketInfo::Swap(PBMsgQueryReqMarketInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryReqMarketInfo::InternalSwap(PBMsgQueryReqMarketInfo* other) {
  exchangeid_.Swap(&other->exchangeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryReqMarketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryReqMarketInfo_descriptor_;
  metadata.reflection = PBMsgQueryReqMarketInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryReqMarketInfo

// optional string ExchangeID = 2;
void PBMsgQueryReqMarketInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqMarketInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqMarketInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}
 void PBMsgQueryReqMarketInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}
 void PBMsgQueryReqMarketInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}
 ::std::string* PBMsgQueryReqMarketInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqMarketInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqMarketInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqMarketInfo.ExchangeID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryRspMarketInfo::kEOFFieldNumber;
const int PBMsgQueryRspMarketInfo::kExchangeIDFieldNumber;
const int PBMsgQueryRspMarketInfo::kExchangeNameFieldNumber;
const int PBMsgQueryRspMarketInfo::kExchangePropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryRspMarketInfo::PBMsgQueryRspMarketInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryRspMarketInfo)
}

void PBMsgQueryRspMarketInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryRspMarketInfo::PBMsgQueryRspMarketInfo(const PBMsgQueryRspMarketInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryRspMarketInfo)
}

void PBMsgQueryRspMarketInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eof_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeproperty_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryRspMarketInfo::~PBMsgQueryRspMarketInfo() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryRspMarketInfo)
  SharedDtor();
}

void PBMsgQueryRspMarketInfo::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeproperty_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryRspMarketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryRspMarketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryRspMarketInfo_descriptor_;
}

const PBMsgQueryRspMarketInfo& PBMsgQueryRspMarketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryRspMarketInfo* PBMsgQueryRspMarketInfo::default_instance_ = NULL;

PBMsgQueryRspMarketInfo* PBMsgQueryRspMarketInfo::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryRspMarketInfo* n = new PBMsgQueryRspMarketInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryRspMarketInfo::Clear() {
  eof_ = 0;
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeproperty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgQueryRspMarketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryRspMarketInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EOF = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 2;
      case 2: {
        if (tag == 18) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeName;
        break;
      }

      // optional bytes ExchangeName = 3;
      case 3: {
        if (tag == 26) {
         parse_ExchangeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchangename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeProperty;
        break;
      }

      // optional string ExchangeProperty = 4;
      case 4: {
        if (tag == 34) {
         parse_ExchangeProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeproperty()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeproperty().data(), this->exchangeproperty().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryRspMarketInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryRspMarketInfo)
  return false;
#undef DO_
}

void PBMsgQueryRspMarketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryRspMarketInfo)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eof(), output);
  }

  // optional string ExchangeID = 2;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // optional bytes ExchangeName = 3;
  if (this->exchangename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->exchangename(), output);
  }

  // optional string ExchangeProperty = 4;
  if (this->exchangeproperty().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeproperty().data(), this->exchangeproperty().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchangeproperty(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryRspMarketInfo)
}

::google::protobuf::uint8* PBMsgQueryRspMarketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryRspMarketInfo)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eof(), target);
  }

  // optional string ExchangeID = 2;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // optional bytes ExchangeName = 3;
  if (this->exchangename().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->exchangename(), target);
  }

  // optional string ExchangeProperty = 4;
  if (this->exchangeproperty().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeproperty().data(), this->exchangeproperty().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeproperty(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryRspMarketInfo)
  return target;
}

int PBMsgQueryRspMarketInfo::ByteSize() const {
  int total_size = 0;

  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  // optional string ExchangeID = 2;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional bytes ExchangeName = 3;
  if (this->exchangename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchangename());
  }

  // optional string ExchangeProperty = 4;
  if (this->exchangeproperty().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeproperty());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryRspMarketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryRspMarketInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryRspMarketInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryRspMarketInfo::MergeFrom(const PBMsgQueryRspMarketInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.exchangename().size() > 0) {

    exchangename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangename_);
  }
  if (from.exchangeproperty().size() > 0) {

    exchangeproperty_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeproperty_);
  }
}

void PBMsgQueryRspMarketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryRspMarketInfo::CopyFrom(const PBMsgQueryRspMarketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryRspMarketInfo::IsInitialized() const {

  return true;
}

void PBMsgQueryRspMarketInfo::Swap(PBMsgQueryRspMarketInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryRspMarketInfo::InternalSwap(PBMsgQueryRspMarketInfo* other) {
  std::swap(eof_, other->eof_);
  exchangeid_.Swap(&other->exchangeid_);
  exchangename_.Swap(&other->exchangename_);
  exchangeproperty_.Swap(&other->exchangeproperty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryRspMarketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryRspMarketInfo_descriptor_;
  metadata.reflection = PBMsgQueryRspMarketInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryRspMarketInfo

// optional int32 EOF = 1;
void PBMsgQueryRspMarketInfo::clear_eof() {
  eof_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspMarketInfo::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.EOF)
  return eof_;
}
 void PBMsgQueryRspMarketInfo::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.EOF)
}

// optional string ExchangeID = 2;
void PBMsgQueryRspMarketInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspMarketInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspMarketInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}
 void PBMsgQueryRspMarketInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}
 void PBMsgQueryRspMarketInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}
 ::std::string* PBMsgQueryRspMarketInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspMarketInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspMarketInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeID)
}

// optional bytes ExchangeName = 3;
void PBMsgQueryRspMarketInfo::clear_exchangename() {
  exchangename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspMarketInfo::exchangename() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
  return exchangename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspMarketInfo::set_exchangename(const ::std::string& value) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}
 void PBMsgQueryRspMarketInfo::set_exchangename(const char* value) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}
 void PBMsgQueryRspMarketInfo::set_exchangename(const void* value, size_t size) {
  
  exchangename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}
 ::std::string* PBMsgQueryRspMarketInfo::mutable_exchangename() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
  return exchangename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspMarketInfo::release_exchangename() {
  
  return exchangename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspMarketInfo::set_allocated_exchangename(::std::string* exchangename) {
  if (exchangename != NULL) {
    
  } else {
    
  }
  exchangename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangename);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeName)
}

// optional string ExchangeProperty = 4;
void PBMsgQueryRspMarketInfo::clear_exchangeproperty() {
  exchangeproperty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspMarketInfo::exchangeproperty() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
  return exchangeproperty_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspMarketInfo::set_exchangeproperty(const ::std::string& value) {
  
  exchangeproperty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}
 void PBMsgQueryRspMarketInfo::set_exchangeproperty(const char* value) {
  
  exchangeproperty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}
 void PBMsgQueryRspMarketInfo::set_exchangeproperty(const char* value, size_t size) {
  
  exchangeproperty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}
 ::std::string* PBMsgQueryRspMarketInfo::mutable_exchangeproperty() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
  return exchangeproperty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspMarketInfo::release_exchangeproperty() {
  
  return exchangeproperty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspMarketInfo::set_allocated_exchangeproperty(::std::string* exchangeproperty) {
  if (exchangeproperty != NULL) {
    
  } else {
    
  }
  exchangeproperty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeproperty);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspMarketInfo.ExchangeProperty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryReqInstrumentInfo::kInstrumentIDFieldNumber;
const int PBMsgQueryReqInstrumentInfo::kExchangeIDFieldNumber;
const int PBMsgQueryReqInstrumentInfo::kExchangeInstIDFieldNumber;
const int PBMsgQueryReqInstrumentInfo::kProductIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryReqInstrumentInfo::PBMsgQueryReqInstrumentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
}

void PBMsgQueryReqInstrumentInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryReqInstrumentInfo::PBMsgQueryReqInstrumentInfo(const PBMsgQueryReqInstrumentInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
}

void PBMsgQueryReqInstrumentInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryReqInstrumentInfo::~PBMsgQueryReqInstrumentInfo() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  SharedDtor();
}

void PBMsgQueryReqInstrumentInfo::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryReqInstrumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryReqInstrumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryReqInstrumentInfo_descriptor_;
}

const PBMsgQueryReqInstrumentInfo& PBMsgQueryReqInstrumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryReqInstrumentInfo* PBMsgQueryReqInstrumentInfo::default_instance_ = NULL;

PBMsgQueryReqInstrumentInfo* PBMsgQueryReqInstrumentInfo::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryReqInstrumentInfo* n = new PBMsgQueryReqInstrumentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryReqInstrumentInfo::Clear() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgQueryReqInstrumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string InstrumentID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 3;
      case 3: {
        if (tag == 26) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 4;
      case 4: {
        if (tag == 34) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ProductID;
        break;
      }

      // optional string ProductID = 5;
      case 5: {
        if (tag == 42) {
         parse_ProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  return false;
#undef DO_
}

void PBMsgQueryReqInstrumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional string ExchangeID = 3;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchangeid(), output);
  }

  // optional string ExchangeInstID = 4;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchangeinstid(), output);
  }

  // optional string ProductID = 5;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->productid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
}

::google::protobuf::uint8* PBMsgQueryReqInstrumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string ExchangeID = 3;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }

  // optional string ExchangeInstID = 4;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeinstid(), target);
  }

  // optional string ProductID = 5;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryReqInstrumentInfo)
  return target;
}

int PBMsgQueryReqInstrumentInfo::ByteSize() const {
  int total_size = 0;

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string ExchangeID = 3;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional string ExchangeInstID = 4;
  if (this->exchangeinstid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeinstid());
  }

  // optional string ProductID = 5;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryReqInstrumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryReqInstrumentInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryReqInstrumentInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryReqInstrumentInfo::MergeFrom(const PBMsgQueryReqInstrumentInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.exchangeinstid().size() > 0) {

    exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
}

void PBMsgQueryReqInstrumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryReqInstrumentInfo::CopyFrom(const PBMsgQueryReqInstrumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryReqInstrumentInfo::IsInitialized() const {

  return true;
}

void PBMsgQueryReqInstrumentInfo::Swap(PBMsgQueryReqInstrumentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryReqInstrumentInfo::InternalSwap(PBMsgQueryReqInstrumentInfo* other) {
  instrumentid_.Swap(&other->instrumentid_);
  exchangeid_.Swap(&other->exchangeid_);
  exchangeinstid_.Swap(&other->exchangeinstid_);
  productid_.Swap(&other->productid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryReqInstrumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryReqInstrumentInfo_descriptor_;
  metadata.reflection = PBMsgQueryReqInstrumentInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryReqInstrumentInfo

// optional string InstrumentID = 2;
void PBMsgQueryReqInstrumentInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqInstrumentInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}
 void PBMsgQueryReqInstrumentInfo::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}
 void PBMsgQueryReqInstrumentInfo::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}
 ::std::string* PBMsgQueryReqInstrumentInfo::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqInstrumentInfo::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.InstrumentID)
}

// optional string ExchangeID = 3;
void PBMsgQueryReqInstrumentInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqInstrumentInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}
 void PBMsgQueryReqInstrumentInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}
 void PBMsgQueryReqInstrumentInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}
 ::std::string* PBMsgQueryReqInstrumentInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqInstrumentInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeID)
}

// optional string ExchangeInstID = 4;
void PBMsgQueryReqInstrumentInfo::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqInstrumentInfo::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}
 void PBMsgQueryReqInstrumentInfo::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}
 void PBMsgQueryReqInstrumentInfo::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}
 ::std::string* PBMsgQueryReqInstrumentInfo::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqInstrumentInfo::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ExchangeInstID)
}

// optional string ProductID = 5;
void PBMsgQueryReqInstrumentInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqInstrumentInfo::productid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}
 void PBMsgQueryReqInstrumentInfo::set_productid(const char* value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}
 void PBMsgQueryReqInstrumentInfo::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}
 ::std::string* PBMsgQueryReqInstrumentInfo::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqInstrumentInfo::release_productid() {
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqInstrumentInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqInstrumentInfo.ProductID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryRspInstrumentInfo::kEOFFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kInstrumentIDFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kExchangeIDFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kInstrumentNameFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kExchangeInstIDFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kProductIDFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kProductClassFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kDeliveryYearFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kDeliveryMonthFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kMaxMarketOrderVolumeFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kMinMarketOrderVolumeFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kMaxLimitOrderVolumeFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kMinLimitOrderVolumeFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kVolumeMultipleFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kPriceTickFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kCreateDateFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kOpenDateFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kExpireDateFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kStartDelivDateFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kEndDelivDateFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kInstLifePhaseFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kIsTradingFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kPositionTypeFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kPositionDateTypeFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kLongMarginRatioFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kShortMarginRatioFieldNumber;
const int PBMsgQueryRspInstrumentInfo::kMaxMarginSideAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryRspInstrumentInfo::PBMsgQueryRspInstrumentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
}

void PBMsgQueryRspInstrumentInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryRspInstrumentInfo::PBMsgQueryRspInstrumentInfo(const PBMsgQueryRspInstrumentInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
}

void PBMsgQueryRspInstrumentInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eof_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deliveryyear_ = 0;
  deliverymonth_ = 0;
  maxmarketordervolume_ = 0;
  minmarketordervolume_ = 0;
  maxlimitordervolume_ = 0;
  minlimitordervolume_ = 0;
  volumemultiple_ = 0;
  pricetick_ = 0;
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instlifephase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istrading_ = 0;
  positiontype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondatetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longmarginratio_ = 0;
  shortmarginratio_ = 0;
  maxmarginsidealgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryRspInstrumentInfo::~PBMsgQueryRspInstrumentInfo() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  SharedDtor();
}

void PBMsgQueryRspInstrumentInfo::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instlifephase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiontype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondatetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryRspInstrumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryRspInstrumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryRspInstrumentInfo_descriptor_;
}

const PBMsgQueryRspInstrumentInfo& PBMsgQueryRspInstrumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryRspInstrumentInfo* PBMsgQueryRspInstrumentInfo::default_instance_ = NULL;

PBMsgQueryRspInstrumentInfo* PBMsgQueryRspInstrumentInfo::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryRspInstrumentInfo* n = new PBMsgQueryRspInstrumentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryRspInstrumentInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgQueryRspInstrumentInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(eof_, deliveryyear_);
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(deliverymonth_, volumemultiple_);
  pricetick_ = 0;
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instlifephase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istrading_ = 0;
  positiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondatetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(longmarginratio_, shortmarginratio_);
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgQueryRspInstrumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EOF = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 2;
      case 2: {
        if (tag == 18) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 3;
      case 3: {
        if (tag == 26) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentName;
        break;
      }

      // optional bytes InstrumentName = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_instrumentname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 5;
      case 5: {
        if (tag == 42) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ProductID;
        break;
      }

      // optional string ProductID = 6;
      case 6: {
        if (tag == 50) {
         parse_ProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ProductClass;
        break;
      }

      // optional bytes ProductClass = 7;
      case 7: {
        if (tag == 58) {
         parse_ProductClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_productclass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DeliveryYear;
        break;
      }

      // optional int32 DeliveryYear = 8;
      case 8: {
        if (tag == 64) {
         parse_DeliveryYear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliveryyear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DeliveryMonth;
        break;
      }

      // optional int32 DeliveryMonth = 9;
      case 9: {
        if (tag == 72) {
         parse_DeliveryMonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliverymonth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MaxMarketOrderVolume;
        break;
      }

      // optional int32 MaxMarketOrderVolume = 10;
      case 10: {
        if (tag == 80) {
         parse_MaxMarketOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmarketordervolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MinMarketOrderVolume;
        break;
      }

      // optional int32 MinMarketOrderVolume = 11;
      case 11: {
        if (tag == 88) {
         parse_MinMarketOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmarketordervolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_MaxLimitOrderVolume;
        break;
      }

      // optional int32 MaxLimitOrderVolume = 12;
      case 12: {
        if (tag == 96) {
         parse_MaxLimitOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlimitordervolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_MinLimitOrderVolume;
        break;
      }

      // optional int32 MinLimitOrderVolume = 13;
      case 13: {
        if (tag == 104) {
         parse_MinLimitOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlimitordervolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_VolumeMultiple;
        break;
      }

      // optional int32 VolumeMultiple = 14;
      case 14: {
        if (tag == 112) {
         parse_VolumeMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumemultiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PriceTick;
        break;
      }

      // optional int32 PriceTick = 15;
      case 15: {
        if (tag == 120) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetick_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_CreateDate;
        break;
      }

      // optional string CreateDate = 16;
      case 16: {
        if (tag == 130) {
         parse_CreateDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_OpenDate;
        break;
      }

      // optional string OpenDate = 17;
      case 17: {
        if (tag == 138) {
         parse_OpenDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_ExpireDate;
        break;
      }

      // optional string ExpireDate = 18;
      case 18: {
        if (tag == 146) {
         parse_ExpireDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiredate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expiredate().data(), this->expiredate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_StartDelivDate;
        break;
      }

      // optional string StartDelivDate = 19;
      case 19: {
        if (tag == 154) {
         parse_StartDelivDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdelivdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->startdelivdate().data(), this->startdelivdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_EndDelivDate;
        break;
      }

      // optional string EndDelivDate = 20;
      case 20: {
        if (tag == 162) {
         parse_EndDelivDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddelivdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enddelivdate().data(), this->enddelivdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_InstLifePhase;
        break;
      }

      // optional string InstLifePhase = 21;
      case 21: {
        if (tag == 170) {
         parse_InstLifePhase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instlifephase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instlifephase().data(), this->instlifephase().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_IsTrading;
        break;
      }

      // optional int32 IsTrading = 22;
      case 22: {
        if (tag == 176) {
         parse_IsTrading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istrading_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_PositionType;
        break;
      }

      // optional string PositionType = 23;
      case 23: {
        if (tag == 186) {
         parse_PositionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiontype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positiontype().data(), this->positiontype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_PositionDateType;
        break;
      }

      // optional string PositionDateType = 24;
      case 24: {
        if (tag == 194) {
         parse_PositionDateType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondatetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positiondatetype().data(), this->positiondatetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_LongMarginRatio;
        break;
      }

      // optional double LongMarginRatio = 25;
      case 25: {
        if (tag == 201) {
         parse_LongMarginRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longmarginratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_ShortMarginRatio;
        break;
      }

      // optional double ShortMarginRatio = 26;
      case 26: {
        if (tag == 209) {
         parse_ShortMarginRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortmarginratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_MaxMarginSideAlgorithm;
        break;
      }

      // optional string MaxMarginSideAlgorithm = 27;
      case 27: {
        if (tag == 218) {
         parse_MaxMarginSideAlgorithm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxmarginsidealgorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maxmarginsidealgorithm().data(), this->maxmarginsidealgorithm().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  return false;
#undef DO_
}

void PBMsgQueryRspInstrumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eof(), output);
  }

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional string ExchangeID = 3;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchangeid(), output);
  }

  // optional bytes InstrumentName = 4;
  if (this->instrumentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->instrumentname(), output);
  }

  // optional string ExchangeInstID = 5;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchangeinstid(), output);
  }

  // optional string ProductID = 6;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->productid(), output);
  }

  // optional bytes ProductClass = 7;
  if (this->productclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->productclass(), output);
  }

  // optional int32 DeliveryYear = 8;
  if (this->deliveryyear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->deliveryyear(), output);
  }

  // optional int32 DeliveryMonth = 9;
  if (this->deliverymonth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->deliverymonth(), output);
  }

  // optional int32 MaxMarketOrderVolume = 10;
  if (this->maxmarketordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxmarketordervolume(), output);
  }

  // optional int32 MinMarketOrderVolume = 11;
  if (this->minmarketordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->minmarketordervolume(), output);
  }

  // optional int32 MaxLimitOrderVolume = 12;
  if (this->maxlimitordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxlimitordervolume(), output);
  }

  // optional int32 MinLimitOrderVolume = 13;
  if (this->minlimitordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->minlimitordervolume(), output);
  }

  // optional int32 VolumeMultiple = 14;
  if (this->volumemultiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->volumemultiple(), output);
  }

  // optional int32 PriceTick = 15;
  if (this->pricetick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pricetick(), output);
  }

  // optional string CreateDate = 16;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->createdate(), output);
  }

  // optional string OpenDate = 17;
  if (this->opendate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->opendate(), output);
  }

  // optional string ExpireDate = 18;
  if (this->expiredate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), this->expiredate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->expiredate(), output);
  }

  // optional string StartDelivDate = 19;
  if (this->startdelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startdelivdate().data(), this->startdelivdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->startdelivdate(), output);
  }

  // optional string EndDelivDate = 20;
  if (this->enddelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enddelivdate().data(), this->enddelivdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->enddelivdate(), output);
  }

  // optional string InstLifePhase = 21;
  if (this->instlifephase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instlifephase().data(), this->instlifephase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->instlifephase(), output);
  }

  // optional int32 IsTrading = 22;
  if (this->istrading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->istrading(), output);
  }

  // optional string PositionType = 23;
  if (this->positiontype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiontype().data(), this->positiontype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->positiontype(), output);
  }

  // optional string PositionDateType = 24;
  if (this->positiondatetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondatetype().data(), this->positiondatetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->positiondatetype(), output);
  }

  // optional double LongMarginRatio = 25;
  if (this->longmarginratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->longmarginratio(), output);
  }

  // optional double ShortMarginRatio = 26;
  if (this->shortmarginratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->shortmarginratio(), output);
  }

  // optional string MaxMarginSideAlgorithm = 27;
  if (this->maxmarginsidealgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxmarginsidealgorithm().data(), this->maxmarginsidealgorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->maxmarginsidealgorithm(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
}

::google::protobuf::uint8* PBMsgQueryRspInstrumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eof(), target);
  }

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string ExchangeID = 3;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }

  // optional bytes InstrumentName = 4;
  if (this->instrumentname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->instrumentname(), target);
  }

  // optional string ExchangeInstID = 5;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchangeinstid(), target);
  }

  // optional string ProductID = 6;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->productid(), target);
  }

  // optional bytes ProductClass = 7;
  if (this->productclass().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->productclass(), target);
  }

  // optional int32 DeliveryYear = 8;
  if (this->deliveryyear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->deliveryyear(), target);
  }

  // optional int32 DeliveryMonth = 9;
  if (this->deliverymonth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->deliverymonth(), target);
  }

  // optional int32 MaxMarketOrderVolume = 10;
  if (this->maxmarketordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxmarketordervolume(), target);
  }

  // optional int32 MinMarketOrderVolume = 11;
  if (this->minmarketordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->minmarketordervolume(), target);
  }

  // optional int32 MaxLimitOrderVolume = 12;
  if (this->maxlimitordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxlimitordervolume(), target);
  }

  // optional int32 MinLimitOrderVolume = 13;
  if (this->minlimitordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->minlimitordervolume(), target);
  }

  // optional int32 VolumeMultiple = 14;
  if (this->volumemultiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->volumemultiple(), target);
  }

  // optional int32 PriceTick = 15;
  if (this->pricetick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pricetick(), target);
  }

  // optional string CreateDate = 16;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->createdate(), target);
  }

  // optional string OpenDate = 17;
  if (this->opendate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->opendate(), target);
  }

  // optional string ExpireDate = 18;
  if (this->expiredate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), this->expiredate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->expiredate(), target);
  }

  // optional string StartDelivDate = 19;
  if (this->startdelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startdelivdate().data(), this->startdelivdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->startdelivdate(), target);
  }

  // optional string EndDelivDate = 20;
  if (this->enddelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enddelivdate().data(), this->enddelivdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->enddelivdate(), target);
  }

  // optional string InstLifePhase = 21;
  if (this->instlifephase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instlifephase().data(), this->instlifephase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->instlifephase(), target);
  }

  // optional int32 IsTrading = 22;
  if (this->istrading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->istrading(), target);
  }

  // optional string PositionType = 23;
  if (this->positiontype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiontype().data(), this->positiontype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->positiontype(), target);
  }

  // optional string PositionDateType = 24;
  if (this->positiondatetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondatetype().data(), this->positiondatetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->positiondatetype(), target);
  }

  // optional double LongMarginRatio = 25;
  if (this->longmarginratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->longmarginratio(), target);
  }

  // optional double ShortMarginRatio = 26;
  if (this->shortmarginratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->shortmarginratio(), target);
  }

  // optional string MaxMarginSideAlgorithm = 27;
  if (this->maxmarginsidealgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxmarginsidealgorithm().data(), this->maxmarginsidealgorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->maxmarginsidealgorithm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryRspInstrumentInfo)
  return target;
}

int PBMsgQueryRspInstrumentInfo::ByteSize() const {
  int total_size = 0;

  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string ExchangeID = 3;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional bytes InstrumentName = 4;
  if (this->instrumentname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->instrumentname());
  }

  // optional string ExchangeInstID = 5;
  if (this->exchangeinstid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeinstid());
  }

  // optional string ProductID = 6;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  // optional bytes ProductClass = 7;
  if (this->productclass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->productclass());
  }

  // optional int32 DeliveryYear = 8;
  if (this->deliveryyear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliveryyear());
  }

  // optional int32 DeliveryMonth = 9;
  if (this->deliverymonth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliverymonth());
  }

  // optional int32 MaxMarketOrderVolume = 10;
  if (this->maxmarketordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxmarketordervolume());
  }

  // optional int32 MinMarketOrderVolume = 11;
  if (this->minmarketordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minmarketordervolume());
  }

  // optional int32 MaxLimitOrderVolume = 12;
  if (this->maxlimitordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxlimitordervolume());
  }

  // optional int32 MinLimitOrderVolume = 13;
  if (this->minlimitordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minlimitordervolume());
  }

  // optional int32 VolumeMultiple = 14;
  if (this->volumemultiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumemultiple());
  }

  // optional int32 PriceTick = 15;
  if (this->pricetick() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pricetick());
  }

  // optional string CreateDate = 16;
  if (this->createdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdate());
  }

  // optional string OpenDate = 17;
  if (this->opendate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opendate());
  }

  // optional string ExpireDate = 18;
  if (this->expiredate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expiredate());
  }

  // optional string StartDelivDate = 19;
  if (this->startdelivdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startdelivdate());
  }

  // optional string EndDelivDate = 20;
  if (this->enddelivdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enddelivdate());
  }

  // optional string InstLifePhase = 21;
  if (this->instlifephase().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instlifephase());
  }

  // optional int32 IsTrading = 22;
  if (this->istrading() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->istrading());
  }

  // optional string PositionType = 23;
  if (this->positiontype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positiontype());
  }

  // optional string PositionDateType = 24;
  if (this->positiondatetype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positiondatetype());
  }

  // optional double LongMarginRatio = 25;
  if (this->longmarginratio() != 0) {
    total_size += 2 + 8;
  }

  // optional double ShortMarginRatio = 26;
  if (this->shortmarginratio() != 0) {
    total_size += 2 + 8;
  }

  // optional string MaxMarginSideAlgorithm = 27;
  if (this->maxmarginsidealgorithm().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maxmarginsidealgorithm());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryRspInstrumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryRspInstrumentInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryRspInstrumentInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryRspInstrumentInfo::MergeFrom(const PBMsgQueryRspInstrumentInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.instrumentname().size() > 0) {

    instrumentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentname_);
  }
  if (from.exchangeinstid().size() > 0) {

    exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.productclass().size() > 0) {

    productclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productclass_);
  }
  if (from.deliveryyear() != 0) {
    set_deliveryyear(from.deliveryyear());
  }
  if (from.deliverymonth() != 0) {
    set_deliverymonth(from.deliverymonth());
  }
  if (from.maxmarketordervolume() != 0) {
    set_maxmarketordervolume(from.maxmarketordervolume());
  }
  if (from.minmarketordervolume() != 0) {
    set_minmarketordervolume(from.minmarketordervolume());
  }
  if (from.maxlimitordervolume() != 0) {
    set_maxlimitordervolume(from.maxlimitordervolume());
  }
  if (from.minlimitordervolume() != 0) {
    set_minlimitordervolume(from.minlimitordervolume());
  }
  if (from.volumemultiple() != 0) {
    set_volumemultiple(from.volumemultiple());
  }
  if (from.pricetick() != 0) {
    set_pricetick(from.pricetick());
  }
  if (from.createdate().size() > 0) {

    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  if (from.opendate().size() > 0) {

    opendate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opendate_);
  }
  if (from.expiredate().size() > 0) {

    expiredate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  if (from.startdelivdate().size() > 0) {

    startdelivdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdelivdate_);
  }
  if (from.enddelivdate().size() > 0) {

    enddelivdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddelivdate_);
  }
  if (from.instlifephase().size() > 0) {

    instlifephase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instlifephase_);
  }
  if (from.istrading() != 0) {
    set_istrading(from.istrading());
  }
  if (from.positiontype().size() > 0) {

    positiontype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiontype_);
  }
  if (from.positiondatetype().size() > 0) {

    positiondatetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondatetype_);
  }
  if (from.longmarginratio() != 0) {
    set_longmarginratio(from.longmarginratio());
  }
  if (from.shortmarginratio() != 0) {
    set_shortmarginratio(from.shortmarginratio());
  }
  if (from.maxmarginsidealgorithm().size() > 0) {

    maxmarginsidealgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxmarginsidealgorithm_);
  }
}

void PBMsgQueryRspInstrumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryRspInstrumentInfo::CopyFrom(const PBMsgQueryRspInstrumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryRspInstrumentInfo::IsInitialized() const {

  return true;
}

void PBMsgQueryRspInstrumentInfo::Swap(PBMsgQueryRspInstrumentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryRspInstrumentInfo::InternalSwap(PBMsgQueryRspInstrumentInfo* other) {
  std::swap(eof_, other->eof_);
  instrumentid_.Swap(&other->instrumentid_);
  exchangeid_.Swap(&other->exchangeid_);
  instrumentname_.Swap(&other->instrumentname_);
  exchangeinstid_.Swap(&other->exchangeinstid_);
  productid_.Swap(&other->productid_);
  productclass_.Swap(&other->productclass_);
  std::swap(deliveryyear_, other->deliveryyear_);
  std::swap(deliverymonth_, other->deliverymonth_);
  std::swap(maxmarketordervolume_, other->maxmarketordervolume_);
  std::swap(minmarketordervolume_, other->minmarketordervolume_);
  std::swap(maxlimitordervolume_, other->maxlimitordervolume_);
  std::swap(minlimitordervolume_, other->minlimitordervolume_);
  std::swap(volumemultiple_, other->volumemultiple_);
  std::swap(pricetick_, other->pricetick_);
  createdate_.Swap(&other->createdate_);
  opendate_.Swap(&other->opendate_);
  expiredate_.Swap(&other->expiredate_);
  startdelivdate_.Swap(&other->startdelivdate_);
  enddelivdate_.Swap(&other->enddelivdate_);
  instlifephase_.Swap(&other->instlifephase_);
  std::swap(istrading_, other->istrading_);
  positiontype_.Swap(&other->positiontype_);
  positiondatetype_.Swap(&other->positiondatetype_);
  std::swap(longmarginratio_, other->longmarginratio_);
  std::swap(shortmarginratio_, other->shortmarginratio_);
  maxmarginsidealgorithm_.Swap(&other->maxmarginsidealgorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryRspInstrumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryRspInstrumentInfo_descriptor_;
  metadata.reflection = PBMsgQueryRspInstrumentInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryRspInstrumentInfo

// optional int32 EOF = 1;
void PBMsgQueryRspInstrumentInfo::clear_eof() {
  eof_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EOF)
  return eof_;
}
 void PBMsgQueryRspInstrumentInfo::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EOF)
}

// optional string InstrumentID = 2;
void PBMsgQueryRspInstrumentInfo::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}
 void PBMsgQueryRspInstrumentInfo::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}
 void PBMsgQueryRspInstrumentInfo::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentID)
}

// optional string ExchangeID = 3;
void PBMsgQueryRspInstrumentInfo::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}
 void PBMsgQueryRspInstrumentInfo::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}
 void PBMsgQueryRspInstrumentInfo::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeID)
}

// optional bytes InstrumentName = 4;
void PBMsgQueryRspInstrumentInfo::clear_instrumentname() {
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::instrumentname() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
  return instrumentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_instrumentname(const ::std::string& value) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}
 void PBMsgQueryRspInstrumentInfo::set_instrumentname(const char* value) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}
 void PBMsgQueryRspInstrumentInfo::set_instrumentname(const void* value, size_t size) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_instrumentname() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
  return instrumentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_instrumentname() {
  
  return instrumentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_instrumentname(::std::string* instrumentname) {
  if (instrumentname != NULL) {
    
  } else {
    
  }
  instrumentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentname);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstrumentName)
}

// optional string ExchangeInstID = 5;
void PBMsgQueryRspInstrumentInfo::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}
 void PBMsgQueryRspInstrumentInfo::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}
 void PBMsgQueryRspInstrumentInfo::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExchangeInstID)
}

// optional string ProductID = 6;
void PBMsgQueryRspInstrumentInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::productid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}
 void PBMsgQueryRspInstrumentInfo::set_productid(const char* value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}
 void PBMsgQueryRspInstrumentInfo::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_productid() {
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductID)
}

// optional bytes ProductClass = 7;
void PBMsgQueryRspInstrumentInfo::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::productclass() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
  return productclass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}
 void PBMsgQueryRspInstrumentInfo::set_productclass(const char* value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}
 void PBMsgQueryRspInstrumentInfo::set_productclass(const void* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_productclass() {
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ProductClass)
}

// optional int32 DeliveryYear = 8;
void PBMsgQueryRspInstrumentInfo::clear_deliveryyear() {
  deliveryyear_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::deliveryyear() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryYear)
  return deliveryyear_;
}
 void PBMsgQueryRspInstrumentInfo::set_deliveryyear(::google::protobuf::int32 value) {
  
  deliveryyear_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryYear)
}

// optional int32 DeliveryMonth = 9;
void PBMsgQueryRspInstrumentInfo::clear_deliverymonth() {
  deliverymonth_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::deliverymonth() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryMonth)
  return deliverymonth_;
}
 void PBMsgQueryRspInstrumentInfo::set_deliverymonth(::google::protobuf::int32 value) {
  
  deliverymonth_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.DeliveryMonth)
}

// optional int32 MaxMarketOrderVolume = 10;
void PBMsgQueryRspInstrumentInfo::clear_maxmarketordervolume() {
  maxmarketordervolume_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarketOrderVolume)
  return maxmarketordervolume_;
}
 void PBMsgQueryRspInstrumentInfo::set_maxmarketordervolume(::google::protobuf::int32 value) {
  
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarketOrderVolume)
}

// optional int32 MinMarketOrderVolume = 11;
void PBMsgQueryRspInstrumentInfo::clear_minmarketordervolume() {
  minmarketordervolume_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinMarketOrderVolume)
  return minmarketordervolume_;
}
 void PBMsgQueryRspInstrumentInfo::set_minmarketordervolume(::google::protobuf::int32 value) {
  
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinMarketOrderVolume)
}

// optional int32 MaxLimitOrderVolume = 12;
void PBMsgQueryRspInstrumentInfo::clear_maxlimitordervolume() {
  maxlimitordervolume_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxLimitOrderVolume)
  return maxlimitordervolume_;
}
 void PBMsgQueryRspInstrumentInfo::set_maxlimitordervolume(::google::protobuf::int32 value) {
  
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxLimitOrderVolume)
}

// optional int32 MinLimitOrderVolume = 13;
void PBMsgQueryRspInstrumentInfo::clear_minlimitordervolume() {
  minlimitordervolume_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinLimitOrderVolume)
  return minlimitordervolume_;
}
 void PBMsgQueryRspInstrumentInfo::set_minlimitordervolume(::google::protobuf::int32 value) {
  
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MinLimitOrderVolume)
}

// optional int32 VolumeMultiple = 14;
void PBMsgQueryRspInstrumentInfo::clear_volumemultiple() {
  volumemultiple_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::volumemultiple() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.VolumeMultiple)
  return volumemultiple_;
}
 void PBMsgQueryRspInstrumentInfo::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.VolumeMultiple)
}

// optional int32 PriceTick = 15;
void PBMsgQueryRspInstrumentInfo::clear_pricetick() {
  pricetick_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::pricetick() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PriceTick)
  return pricetick_;
}
 void PBMsgQueryRspInstrumentInfo::set_pricetick(::google::protobuf::int32 value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PriceTick)
}

// optional string CreateDate = 16;
void PBMsgQueryRspInstrumentInfo::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::createdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
  return createdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}
 void PBMsgQueryRspInstrumentInfo::set_createdate(const char* value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}
 void PBMsgQueryRspInstrumentInfo::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_createdate() {
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.CreateDate)
}

// optional string OpenDate = 17;
void PBMsgQueryRspInstrumentInfo::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::opendate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
  return opendate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}
 void PBMsgQueryRspInstrumentInfo::set_opendate(const char* value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}
 void PBMsgQueryRspInstrumentInfo::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_opendate() {
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.OpenDate)
}

// optional string ExpireDate = 18;
void PBMsgQueryRspInstrumentInfo::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::expiredate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
  return expiredate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}
 void PBMsgQueryRspInstrumentInfo::set_expiredate(const char* value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}
 void PBMsgQueryRspInstrumentInfo::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_expiredate() {
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ExpireDate)
}

// optional string StartDelivDate = 19;
void PBMsgQueryRspInstrumentInfo::clear_startdelivdate() {
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::startdelivdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
  return startdelivdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_startdelivdate(const ::std::string& value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}
 void PBMsgQueryRspInstrumentInfo::set_startdelivdate(const char* value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}
 void PBMsgQueryRspInstrumentInfo::set_startdelivdate(const char* value, size_t size) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_startdelivdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
  return startdelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_startdelivdate() {
  
  return startdelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_startdelivdate(::std::string* startdelivdate) {
  if (startdelivdate != NULL) {
    
  } else {
    
  }
  startdelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdelivdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.StartDelivDate)
}

// optional string EndDelivDate = 20;
void PBMsgQueryRspInstrumentInfo::clear_enddelivdate() {
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::enddelivdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
  return enddelivdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_enddelivdate(const ::std::string& value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}
 void PBMsgQueryRspInstrumentInfo::set_enddelivdate(const char* value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}
 void PBMsgQueryRspInstrumentInfo::set_enddelivdate(const char* value, size_t size) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_enddelivdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
  return enddelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_enddelivdate() {
  
  return enddelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_enddelivdate(::std::string* enddelivdate) {
  if (enddelivdate != NULL) {
    
  } else {
    
  }
  enddelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddelivdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.EndDelivDate)
}

// optional string InstLifePhase = 21;
void PBMsgQueryRspInstrumentInfo::clear_instlifephase() {
  instlifephase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::instlifephase() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
  return instlifephase_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_instlifephase(const ::std::string& value) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}
 void PBMsgQueryRspInstrumentInfo::set_instlifephase(const char* value) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}
 void PBMsgQueryRspInstrumentInfo::set_instlifephase(const char* value, size_t size) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_instlifephase() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
  return instlifephase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_instlifephase() {
  
  return instlifephase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_instlifephase(::std::string* instlifephase) {
  if (instlifephase != NULL) {
    
  } else {
    
  }
  instlifephase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instlifephase);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.InstLifePhase)
}

// optional int32 IsTrading = 22;
void PBMsgQueryRspInstrumentInfo::clear_istrading() {
  istrading_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspInstrumentInfo::istrading() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.IsTrading)
  return istrading_;
}
 void PBMsgQueryRspInstrumentInfo::set_istrading(::google::protobuf::int32 value) {
  
  istrading_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.IsTrading)
}

// optional string PositionType = 23;
void PBMsgQueryRspInstrumentInfo::clear_positiontype() {
  positiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::positiontype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
  return positiontype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_positiontype(const ::std::string& value) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}
 void PBMsgQueryRspInstrumentInfo::set_positiontype(const char* value) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}
 void PBMsgQueryRspInstrumentInfo::set_positiontype(const char* value, size_t size) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_positiontype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
  return positiontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_positiontype() {
  
  return positiontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_positiontype(::std::string* positiontype) {
  if (positiontype != NULL) {
    
  } else {
    
  }
  positiontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiontype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionType)
}

// optional string PositionDateType = 24;
void PBMsgQueryRspInstrumentInfo::clear_positiondatetype() {
  positiondatetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::positiondatetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
  return positiondatetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_positiondatetype(const ::std::string& value) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}
 void PBMsgQueryRspInstrumentInfo::set_positiondatetype(const char* value) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}
 void PBMsgQueryRspInstrumentInfo::set_positiondatetype(const char* value, size_t size) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_positiondatetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
  return positiondatetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_positiondatetype() {
  
  return positiondatetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_positiondatetype(::std::string* positiondatetype) {
  if (positiondatetype != NULL) {
    
  } else {
    
  }
  positiondatetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondatetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.PositionDateType)
}

// optional double LongMarginRatio = 25;
void PBMsgQueryRspInstrumentInfo::clear_longmarginratio() {
  longmarginratio_ = 0;
}
 double PBMsgQueryRspInstrumentInfo::longmarginratio() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.LongMarginRatio)
  return longmarginratio_;
}
 void PBMsgQueryRspInstrumentInfo::set_longmarginratio(double value) {
  
  longmarginratio_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.LongMarginRatio)
}

// optional double ShortMarginRatio = 26;
void PBMsgQueryRspInstrumentInfo::clear_shortmarginratio() {
  shortmarginratio_ = 0;
}
 double PBMsgQueryRspInstrumentInfo::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ShortMarginRatio)
  return shortmarginratio_;
}
 void PBMsgQueryRspInstrumentInfo::set_shortmarginratio(double value) {
  
  shortmarginratio_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.ShortMarginRatio)
}

// optional string MaxMarginSideAlgorithm = 27;
void PBMsgQueryRspInstrumentInfo::clear_maxmarginsidealgorithm() {
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspInstrumentInfo::maxmarginsidealgorithm() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
  return maxmarginsidealgorithm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_maxmarginsidealgorithm(const ::std::string& value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}
 void PBMsgQueryRspInstrumentInfo::set_maxmarginsidealgorithm(const char* value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}
 void PBMsgQueryRspInstrumentInfo::set_maxmarginsidealgorithm(const char* value, size_t size) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}
 ::std::string* PBMsgQueryRspInstrumentInfo::mutable_maxmarginsidealgorithm() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
  return maxmarginsidealgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspInstrumentInfo::release_maxmarginsidealgorithm() {
  
  return maxmarginsidealgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspInstrumentInfo::set_allocated_maxmarginsidealgorithm(::std::string* maxmarginsidealgorithm) {
  if (maxmarginsidealgorithm != NULL) {
    
  } else {
    
  }
  maxmarginsidealgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxmarginsidealgorithm);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspInstrumentInfo.MaxMarginSideAlgorithm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryReqOrder::kBrokerIDFieldNumber;
const int PBMsgQueryReqOrder::kInvestorIDFieldNumber;
const int PBMsgQueryReqOrder::kInstrumentIDFieldNumber;
const int PBMsgQueryReqOrder::kExchangeIDFieldNumber;
const int PBMsgQueryReqOrder::kOrderSysIDFieldNumber;
const int PBMsgQueryReqOrder::kInsertTimeStartFieldNumber;
const int PBMsgQueryReqOrder::kInsertTimeEndFieldNumber;
const int PBMsgQueryReqOrder::kTradingDayFieldNumber;
const int PBMsgQueryReqOrder::kSettlementIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryReqOrder::PBMsgQueryReqOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryReqOrder)
}

void PBMsgQueryReqOrder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryReqOrder::PBMsgQueryReqOrder(const PBMsgQueryReqOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryReqOrder)
}

void PBMsgQueryReqOrder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttimestart_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttimeend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
}

PBMsgQueryReqOrder::~PBMsgQueryReqOrder() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryReqOrder)
  SharedDtor();
}

void PBMsgQueryReqOrder::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttimestart_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttimeend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryReqOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryReqOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryReqOrder_descriptor_;
}

const PBMsgQueryReqOrder& PBMsgQueryReqOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryReqOrder* PBMsgQueryReqOrder::default_instance_ = NULL;

PBMsgQueryReqOrder* PBMsgQueryReqOrder::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryReqOrder* n = new PBMsgQueryReqOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryReqOrder::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttimestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttimeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
}

bool PBMsgQueryReqOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryReqOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 5;
      case 5: {
        if (tag == 42) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_OrderSysID;
        break;
      }

      // optional string OrderSysID = 6;
      case 6: {
        if (tag == 50) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.OrderSysID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_InsertTimeStart;
        break;
      }

      // optional string InsertTimeStart = 7;
      case 7: {
        if (tag == 58) {
         parse_InsertTimeStart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttimestart()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inserttimestart().data(), this->inserttimestart().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_InsertTimeEnd;
        break;
      }

      // optional string InsertTimeEnd = 8;
      case 8: {
        if (tag == 66) {
         parse_InsertTimeEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttimeend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inserttimeend().data(), this->inserttimeend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 9;
      case 9: {
        if (tag == 74) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqOrder.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 10;
      case 10: {
        if (tag == 80) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryReqOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryReqOrder)
  return false;
#undef DO_
}

void PBMsgQueryReqOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryReqOrder)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // optional string ExchangeID = 5;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchangeid(), output);
  }

  // optional string OrderSysID = 6;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.OrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ordersysid(), output);
  }

  // optional string InsertTimeStart = 7;
  if (this->inserttimestart().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttimestart().data(), this->inserttimestart().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->inserttimestart(), output);
  }

  // optional string InsertTimeEnd = 8;
  if (this->inserttimeend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttimeend().data(), this->inserttimeend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->inserttimeend(), output);
  }

  // optional string TradingDay = 9;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradingday(), output);
  }

  // optional int32 SettlementID = 10;
  if (this->settlementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->settlementid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryReqOrder)
}

::google::protobuf::uint8* PBMsgQueryReqOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryReqOrder)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // optional string ExchangeID = 5;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchangeid(), target);
  }

  // optional string OrderSysID = 6;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.OrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ordersysid(), target);
  }

  // optional string InsertTimeStart = 7;
  if (this->inserttimestart().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttimestart().data(), this->inserttimestart().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->inserttimestart(), target);
  }

  // optional string InsertTimeEnd = 8;
  if (this->inserttimeend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttimeend().data(), this->inserttimeend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->inserttimeend(), target);
  }

  // optional string TradingDay = 9;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqOrder.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradingday(), target);
  }

  // optional int32 SettlementID = 10;
  if (this->settlementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->settlementid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryReqOrder)
  return target;
}

int PBMsgQueryReqOrder::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string ExchangeID = 5;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional string OrderSysID = 6;
  if (this->ordersysid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersysid());
  }

  // optional string InsertTimeStart = 7;
  if (this->inserttimestart().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inserttimestart());
  }

  // optional string InsertTimeEnd = 8;
  if (this->inserttimeend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inserttimeend());
  }

  // optional string TradingDay = 9;
  if (this->tradingday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional int32 SettlementID = 10;
  if (this->settlementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlementid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryReqOrder::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryReqOrder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryReqOrder>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryReqOrder::MergeFrom(const PBMsgQueryReqOrder& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.ordersysid().size() > 0) {

    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  if (from.inserttimestart().size() > 0) {

    inserttimestart_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inserttimestart_);
  }
  if (from.inserttimeend().size() > 0) {

    inserttimeend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inserttimeend_);
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.settlementid() != 0) {
    set_settlementid(from.settlementid());
  }
}

void PBMsgQueryReqOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryReqOrder::CopyFrom(const PBMsgQueryReqOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryReqOrder::IsInitialized() const {

  return true;
}

void PBMsgQueryReqOrder::Swap(PBMsgQueryReqOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryReqOrder::InternalSwap(PBMsgQueryReqOrder* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  exchangeid_.Swap(&other->exchangeid_);
  ordersysid_.Swap(&other->ordersysid_);
  inserttimestart_.Swap(&other->inserttimestart_);
  inserttimeend_.Swap(&other->inserttimeend_);
  tradingday_.Swap(&other->tradingday_);
  std::swap(settlementid_, other->settlementid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryReqOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryReqOrder_descriptor_;
  metadata.reflection = PBMsgQueryReqOrder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryReqOrder

// optional string BrokerID = 2;
void PBMsgQueryReqOrder::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}
 void PBMsgQueryReqOrder::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}
 void PBMsgQueryReqOrder::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}
 ::std::string* PBMsgQueryReqOrder::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgQueryReqOrder::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}
 void PBMsgQueryReqOrder::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}
 void PBMsgQueryReqOrder::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}
 ::std::string* PBMsgQueryReqOrder::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InvestorID)
}

// optional string InstrumentID = 4;
void PBMsgQueryReqOrder::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}
 void PBMsgQueryReqOrder::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}
 void PBMsgQueryReqOrder::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}
 ::std::string* PBMsgQueryReqOrder::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InstrumentID)
}

// optional string ExchangeID = 5;
void PBMsgQueryReqOrder::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}
 void PBMsgQueryReqOrder::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}
 void PBMsgQueryReqOrder::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}
 ::std::string* PBMsgQueryReqOrder::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.ExchangeID)
}

// optional string OrderSysID = 6;
void PBMsgQueryReqOrder::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}
 void PBMsgQueryReqOrder::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}
 void PBMsgQueryReqOrder::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}
 ::std::string* PBMsgQueryReqOrder::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.OrderSysID)
}

// optional string InsertTimeStart = 7;
void PBMsgQueryReqOrder::clear_inserttimestart() {
  inserttimestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::inserttimestart() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
  return inserttimestart_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_inserttimestart(const ::std::string& value) {
  
  inserttimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}
 void PBMsgQueryReqOrder::set_inserttimestart(const char* value) {
  
  inserttimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}
 void PBMsgQueryReqOrder::set_inserttimestart(const char* value, size_t size) {
  
  inserttimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}
 ::std::string* PBMsgQueryReqOrder::mutable_inserttimestart() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
  return inserttimestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_inserttimestart() {
  
  return inserttimestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_inserttimestart(::std::string* inserttimestart) {
  if (inserttimestart != NULL) {
    
  } else {
    
  }
  inserttimestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttimestart);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeStart)
}

// optional string InsertTimeEnd = 8;
void PBMsgQueryReqOrder::clear_inserttimeend() {
  inserttimeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::inserttimeend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
  return inserttimeend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_inserttimeend(const ::std::string& value) {
  
  inserttimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}
 void PBMsgQueryReqOrder::set_inserttimeend(const char* value) {
  
  inserttimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}
 void PBMsgQueryReqOrder::set_inserttimeend(const char* value, size_t size) {
  
  inserttimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}
 ::std::string* PBMsgQueryReqOrder::mutable_inserttimeend() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
  return inserttimeend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_inserttimeend() {
  
  return inserttimeend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_inserttimeend(::std::string* inserttimeend) {
  if (inserttimeend != NULL) {
    
  } else {
    
  }
  inserttimeend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttimeend);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.InsertTimeEnd)
}

// optional string TradingDay = 9;
void PBMsgQueryReqOrder::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqOrder::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}
 void PBMsgQueryReqOrder::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}
 void PBMsgQueryReqOrder::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}
 ::std::string* PBMsgQueryReqOrder::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqOrder::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqOrder::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqOrder.TradingDay)
}

// optional int32 SettlementID = 10;
void PBMsgQueryReqOrder::clear_settlementid() {
  settlementid_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryReqOrder::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqOrder.SettlementID)
  return settlementid_;
}
 void PBMsgQueryReqOrder::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqOrder.SettlementID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryReqTrade::kBrokerIDFieldNumber;
const int PBMsgQueryReqTrade::kInvestorIDFieldNumber;
const int PBMsgQueryReqTrade::kInstrumentIDFieldNumber;
const int PBMsgQueryReqTrade::kExchangeIDFieldNumber;
const int PBMsgQueryReqTrade::kTradeIDFieldNumber;
const int PBMsgQueryReqTrade::kTradeTimeStartFieldNumber;
const int PBMsgQueryReqTrade::kTradeTimeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryReqTrade::PBMsgQueryReqTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryReqTrade)
}

void PBMsgQueryReqTrade::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryReqTrade::PBMsgQueryReqTrade(const PBMsgQueryReqTrade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryReqTrade)
}

void PBMsgQueryReqTrade::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetimestart_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetimeend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryReqTrade::~PBMsgQueryReqTrade() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryReqTrade)
  SharedDtor();
}

void PBMsgQueryReqTrade::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetimestart_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetimeend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryReqTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryReqTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryReqTrade_descriptor_;
}

const PBMsgQueryReqTrade& PBMsgQueryReqTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryReqTrade* PBMsgQueryReqTrade::default_instance_ = NULL;

PBMsgQueryReqTrade* PBMsgQueryReqTrade::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryReqTrade* n = new PBMsgQueryReqTrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryReqTrade::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetimestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetimeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgQueryReqTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryReqTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 5;
      case 5: {
        if (tag == 42) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TradeID;
        break;
      }

      // optional string TradeID = 6;
      case 6: {
        if (tag == 50) {
         parse_TradeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeid().data(), this->tradeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.TradeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_TradeTimeStart;
        break;
      }

      // optional string TradeTimeStart = 7;
      case 7: {
        if (tag == 58) {
         parse_TradeTimeStart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetimestart()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetimestart().data(), this->tradetimestart().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TradeTimeEnd;
        break;
      }

      // optional string TradeTimeEnd = 8;
      case 8: {
        if (tag == 66) {
         parse_TradeTimeEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetimeend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetimeend().data(), this->tradetimeend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryReqTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryReqTrade)
  return false;
#undef DO_
}

void PBMsgQueryReqTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryReqTrade)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // optional string ExchangeID = 5;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchangeid(), output);
  }

  // optional string TradeID = 6;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.TradeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tradeid(), output);
  }

  // optional string TradeTimeStart = 7;
  if (this->tradetimestart().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetimestart().data(), this->tradetimestart().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tradetimestart(), output);
  }

  // optional string TradeTimeEnd = 8;
  if (this->tradetimeend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetimeend().data(), this->tradetimeend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tradetimeend(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryReqTrade)
}

::google::protobuf::uint8* PBMsgQueryReqTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryReqTrade)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // optional string ExchangeID = 5;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchangeid(), target);
  }

  // optional string TradeID = 6;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.TradeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tradeid(), target);
  }

  // optional string TradeTimeStart = 7;
  if (this->tradetimestart().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetimestart().data(), this->tradetimestart().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tradetimestart(), target);
  }

  // optional string TradeTimeEnd = 8;
  if (this->tradetimeend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetimeend().data(), this->tradetimeend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tradetimeend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryReqTrade)
  return target;
}

int PBMsgQueryReqTrade::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string ExchangeID = 5;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional string TradeID = 6;
  if (this->tradeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeid());
  }

  // optional string TradeTimeStart = 7;
  if (this->tradetimestart().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetimestart());
  }

  // optional string TradeTimeEnd = 8;
  if (this->tradetimeend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetimeend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryReqTrade::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryReqTrade* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryReqTrade>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryReqTrade::MergeFrom(const PBMsgQueryReqTrade& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.tradeid().size() > 0) {

    tradeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeid_);
  }
  if (from.tradetimestart().size() > 0) {

    tradetimestart_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetimestart_);
  }
  if (from.tradetimeend().size() > 0) {

    tradetimeend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetimeend_);
  }
}

void PBMsgQueryReqTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryReqTrade::CopyFrom(const PBMsgQueryReqTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryReqTrade::IsInitialized() const {

  return true;
}

void PBMsgQueryReqTrade::Swap(PBMsgQueryReqTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryReqTrade::InternalSwap(PBMsgQueryReqTrade* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  exchangeid_.Swap(&other->exchangeid_);
  tradeid_.Swap(&other->tradeid_);
  tradetimestart_.Swap(&other->tradetimestart_);
  tradetimeend_.Swap(&other->tradetimeend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryReqTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryReqTrade_descriptor_;
  metadata.reflection = PBMsgQueryReqTrade_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryReqTrade

// optional string BrokerID = 2;
void PBMsgQueryReqTrade::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}
 void PBMsgQueryReqTrade::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}
 void PBMsgQueryReqTrade::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}
 ::std::string* PBMsgQueryReqTrade::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgQueryReqTrade::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}
 void PBMsgQueryReqTrade::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}
 void PBMsgQueryReqTrade::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}
 ::std::string* PBMsgQueryReqTrade::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.InvestorID)
}

// optional string InstrumentID = 4;
void PBMsgQueryReqTrade::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}
 void PBMsgQueryReqTrade::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}
 void PBMsgQueryReqTrade::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}
 ::std::string* PBMsgQueryReqTrade::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.InstrumentID)
}

// optional string ExchangeID = 5;
void PBMsgQueryReqTrade::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}
 void PBMsgQueryReqTrade::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}
 void PBMsgQueryReqTrade::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}
 ::std::string* PBMsgQueryReqTrade::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.ExchangeID)
}

// optional string TradeID = 6;
void PBMsgQueryReqTrade::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::tradeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
  return tradeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}
 void PBMsgQueryReqTrade::set_tradeid(const char* value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}
 void PBMsgQueryReqTrade::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}
 ::std::string* PBMsgQueryReqTrade::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_tradeid() {
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.TradeID)
}

// optional string TradeTimeStart = 7;
void PBMsgQueryReqTrade::clear_tradetimestart() {
  tradetimestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::tradetimestart() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
  return tradetimestart_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_tradetimestart(const ::std::string& value) {
  
  tradetimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}
 void PBMsgQueryReqTrade::set_tradetimestart(const char* value) {
  
  tradetimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}
 void PBMsgQueryReqTrade::set_tradetimestart(const char* value, size_t size) {
  
  tradetimestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}
 ::std::string* PBMsgQueryReqTrade::mutable_tradetimestart() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
  return tradetimestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_tradetimestart() {
  
  return tradetimestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_tradetimestart(::std::string* tradetimestart) {
  if (tradetimestart != NULL) {
    
  } else {
    
  }
  tradetimestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetimestart);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeStart)
}

// optional string TradeTimeEnd = 8;
void PBMsgQueryReqTrade::clear_tradetimeend() {
  tradetimeend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqTrade::tradetimeend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
  return tradetimeend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_tradetimeend(const ::std::string& value) {
  
  tradetimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}
 void PBMsgQueryReqTrade::set_tradetimeend(const char* value) {
  
  tradetimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}
 void PBMsgQueryReqTrade::set_tradetimeend(const char* value, size_t size) {
  
  tradetimeend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}
 ::std::string* PBMsgQueryReqTrade::mutable_tradetimeend() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
  return tradetimeend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqTrade::release_tradetimeend() {
  
  return tradetimeend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqTrade::set_allocated_tradetimeend(::std::string* tradetimeend) {
  if (tradetimeend != NULL) {
    
  } else {
    
  }
  tradetimeend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetimeend);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqTrade.TradeTimeEnd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryReqPosition::kBrokerIDFieldNumber;
const int PBMsgQueryReqPosition::kInvestorIDFieldNumber;
const int PBMsgQueryReqPosition::kInstrumentIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryReqPosition::PBMsgQueryReqPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryReqPosition)
}

void PBMsgQueryReqPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryReqPosition::PBMsgQueryReqPosition(const PBMsgQueryReqPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryReqPosition)
}

void PBMsgQueryReqPosition::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryReqPosition::~PBMsgQueryReqPosition() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryReqPosition)
  SharedDtor();
}

void PBMsgQueryReqPosition::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryReqPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryReqPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryReqPosition_descriptor_;
}

const PBMsgQueryReqPosition& PBMsgQueryReqPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryReqPosition* PBMsgQueryReqPosition::default_instance_ = NULL;

PBMsgQueryReqPosition* PBMsgQueryReqPosition::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryReqPosition* n = new PBMsgQueryReqPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryReqPosition::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgQueryReqPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryReqPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqPosition.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqPosition.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqPosition.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryReqPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryReqPosition)
  return false;
#undef DO_
}

void PBMsgQueryReqPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryReqPosition)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqPosition.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqPosition.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqPosition.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryReqPosition)
}

::google::protobuf::uint8* PBMsgQueryReqPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryReqPosition)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqPosition.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqPosition.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqPosition.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryReqPosition)
  return target;
}

int PBMsgQueryReqPosition::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryReqPosition::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryReqPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryReqPosition>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryReqPosition::MergeFrom(const PBMsgQueryReqPosition& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
}

void PBMsgQueryReqPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryReqPosition::CopyFrom(const PBMsgQueryReqPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryReqPosition::IsInitialized() const {

  return true;
}

void PBMsgQueryReqPosition::Swap(PBMsgQueryReqPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryReqPosition::InternalSwap(PBMsgQueryReqPosition* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryReqPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryReqPosition_descriptor_;
  metadata.reflection = PBMsgQueryReqPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryReqPosition

// optional string BrokerID = 2;
void PBMsgQueryReqPosition::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqPosition::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqPosition::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}
 void PBMsgQueryReqPosition::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}
 void PBMsgQueryReqPosition::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}
 ::std::string* PBMsgQueryReqPosition::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqPosition::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqPosition::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqPosition.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgQueryReqPosition::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqPosition::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqPosition::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}
 void PBMsgQueryReqPosition::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}
 void PBMsgQueryReqPosition::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}
 ::std::string* PBMsgQueryReqPosition::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqPosition::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqPosition::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqPosition.InvestorID)
}

// optional string InstrumentID = 4;
void PBMsgQueryReqPosition::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqPosition::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqPosition::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}
 void PBMsgQueryReqPosition::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}
 void PBMsgQueryReqPosition::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}
 ::std::string* PBMsgQueryReqPosition::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqPosition::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqPosition::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqPosition.InstrumentID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryRspPosition::kEOFFieldNumber;
const int PBMsgQueryRspPosition::kInstrumentIDFieldNumber;
const int PBMsgQueryRspPosition::kBrokerIDFieldNumber;
const int PBMsgQueryRspPosition::kInvestorIDFieldNumber;
const int PBMsgQueryRspPosition::kPosiDirectionFieldNumber;
const int PBMsgQueryRspPosition::kHedgeFlagFieldNumber;
const int PBMsgQueryRspPosition::kPositionDateFieldNumber;
const int PBMsgQueryRspPosition::kYdPositionFieldNumber;
const int PBMsgQueryRspPosition::kPositionFieldNumber;
const int PBMsgQueryRspPosition::kLongFrozenFieldNumber;
const int PBMsgQueryRspPosition::kShortFrozenFieldNumber;
const int PBMsgQueryRspPosition::kLongFrozenAmountFieldNumber;
const int PBMsgQueryRspPosition::kShortFrozenAmountFieldNumber;
const int PBMsgQueryRspPosition::kOpenVolumeFieldNumber;
const int PBMsgQueryRspPosition::kCloseVolumeFieldNumber;
const int PBMsgQueryRspPosition::kOpenAmountFieldNumber;
const int PBMsgQueryRspPosition::kCloseAmountFieldNumber;
const int PBMsgQueryRspPosition::kPositionCostFieldNumber;
const int PBMsgQueryRspPosition::kPreMarginFieldNumber;
const int PBMsgQueryRspPosition::kUseMarginFieldNumber;
const int PBMsgQueryRspPosition::kFrozenMarginFieldNumber;
const int PBMsgQueryRspPosition::kFrozenCashFieldNumber;
const int PBMsgQueryRspPosition::kFrozenCommissionFieldNumber;
const int PBMsgQueryRspPosition::kCashInFieldNumber;
const int PBMsgQueryRspPosition::kCommissionFieldNumber;
const int PBMsgQueryRspPosition::kCloseProfitFieldNumber;
const int PBMsgQueryRspPosition::kPositionProfitFieldNumber;
const int PBMsgQueryRspPosition::kPreSettlementPriceFieldNumber;
const int PBMsgQueryRspPosition::kSettlementPriceFieldNumber;
const int PBMsgQueryRspPosition::kTradingDayFieldNumber;
const int PBMsgQueryRspPosition::kSettlementIDFieldNumber;
const int PBMsgQueryRspPosition::kOpenCostFieldNumber;
const int PBMsgQueryRspPosition::kExchangeMarginFieldNumber;
const int PBMsgQueryRspPosition::kCombPositionFieldNumber;
const int PBMsgQueryRspPosition::kCombLongFrozenFieldNumber;
const int PBMsgQueryRspPosition::kCombShortFrozenFieldNumber;
const int PBMsgQueryRspPosition::kCloseProfitByDateFieldNumber;
const int PBMsgQueryRspPosition::kCloseProfitByTradeFieldNumber;
const int PBMsgQueryRspPosition::kTodayPositionFieldNumber;
const int PBMsgQueryRspPosition::kMarginRateByMoneyFieldNumber;
const int PBMsgQueryRspPosition::kMarginRateByVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryRspPosition::PBMsgQueryRspPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryRspPosition)
}

void PBMsgQueryRspPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryRspPosition::PBMsgQueryRspPosition(const PBMsgQueryRspPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryRspPosition)
}

void PBMsgQueryRspPosition::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eof_ = 0;
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posidirection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ydposition_ = 0;
  position_ = 0;
  longfrozen_ = 0;
  shortfrozen_ = 0;
  longfrozenamount_ = 0;
  shortfrozenamount_ = 0;
  openvolume_ = 0;
  closevolume_ = 0;
  openamount_ = 0;
  closeamount_ = 0;
  positioncost_ = 0;
  premargin_ = 0;
  usemargin_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  presettlementprice_ = 0;
  settlementprice_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
  opencost_ = 0;
  exchangemargin_ = 0;
  combposition_ = 0;
  comblongfrozen_ = 0;
  combshortfrozen_ = 0;
  closeprofitbydate_ = 0;
  closeprofitbytrade_ = 0;
  todayposition_ = 0;
  marginratebymoney_ = 0;
  marginratebyvolume_ = 0;
}

PBMsgQueryRspPosition::~PBMsgQueryRspPosition() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryRspPosition)
  SharedDtor();
}

void PBMsgQueryRspPosition::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posidirection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryRspPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryRspPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryRspPosition_descriptor_;
}

const PBMsgQueryRspPosition& PBMsgQueryRspPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryRspPosition* PBMsgQueryRspPosition::default_instance_ = NULL;

PBMsgQueryRspPosition* PBMsgQueryRspPosition::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryRspPosition* n = new PBMsgQueryRspPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryRspPosition::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgQueryRspPosition*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(eof_, ydposition_);
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posidirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(position_, openamount_);
  closevolume_ = 0;
  ZR_(closeamount_, frozencommission_);
  cashin_ = 0;
  ZR_(commission_, settlementprice_);
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
  opencost_ = 0;
  ZR_(exchangemargin_, marginratebymoney_);
  marginratebyvolume_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgQueryRspPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryRspPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EOF = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 2;
      case 2: {
        if (tag == 18) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BrokerID;
        break;
      }

      // optional string BrokerID = 3;
      case 3: {
        if (tag == 26) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 4;
      case 4: {
        if (tag == 34) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PosiDirection;
        break;
      }

      // optional string PosiDirection = 5;
      case 5: {
        if (tag == 42) {
         parse_PosiDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posidirection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->posidirection().data(), this->posidirection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.PosiDirection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_HedgeFlag;
        break;
      }

      // optional string HedgeFlag = 6;
      case 6: {
        if (tag == 50) {
         parse_HedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedgeflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hedgeflag().data(), this->hedgeflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PositionDate;
        break;
      }

      // optional string PositionDate = 7;
      case 7: {
        if (tag == 58) {
         parse_PositionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positiondate().data(), this->positiondate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.PositionDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_YdPosition;
        break;
      }

      // optional int32 YdPosition = 8;
      case 8: {
        if (tag == 64) {
         parse_YdPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Position;
        break;
      }

      // optional int32 Position = 9;
      case 9: {
        if (tag == 72) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LongFrozen;
        break;
      }

      // optional int32 LongFrozen = 10;
      case 10: {
        if (tag == 80) {
         parse_LongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longfrozen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ShortFrozen;
        break;
      }

      // optional int32 ShortFrozen = 11;
      case 11: {
        if (tag == 88) {
         parse_ShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortfrozen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_LongFrozenAmount;
        break;
      }

      // optional double LongFrozenAmount = 12;
      case 12: {
        if (tag == 97) {
         parse_LongFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longfrozenamount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_ShortFrozenAmount;
        break;
      }

      // optional double ShortFrozenAmount = 13;
      case 13: {
        if (tag == 105) {
         parse_ShortFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortfrozenamount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_OpenVolume;
        break;
      }

      // optional int32 OpenVolume = 14;
      case 14: {
        if (tag == 112) {
         parse_OpenVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_CloseVolume;
        break;
      }

      // optional int32 CloseVolume = 15;
      case 15: {
        if (tag == 120) {
         parse_CloseVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_OpenAmount;
        break;
      }

      // optional double OpenAmount = 16;
      case 16: {
        if (tag == 129) {
         parse_OpenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_CloseAmount;
        break;
      }

      // optional double CloseAmount = 17;
      case 17: {
        if (tag == 137) {
         parse_CloseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_PositionCost;
        break;
      }

      // optional double PositionCost = 18;
      case 18: {
        if (tag == 145) {
         parse_PositionCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_PreMargin;
        break;
      }

      // optional double PreMargin = 19;
      case 19: {
        if (tag == 153) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_UseMargin;
        break;
      }

      // optional double UseMargin = 20;
      case 20: {
        if (tag == 161) {
         parse_UseMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_FrozenMargin;
        break;
      }

      // optional double FrozenMargin = 21;
      case 21: {
        if (tag == 169) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_FrozenCash;
        break;
      }

      // optional double FrozenCash = 22;
      case 22: {
        if (tag == 177) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_FrozenCommission;
        break;
      }

      // optional double FrozenCommission = 23;
      case 23: {
        if (tag == 185) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_CashIn;
        break;
      }

      // optional double CashIn = 24;
      case 24: {
        if (tag == 193) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_Commission;
        break;
      }

      // optional double Commission = 25;
      case 25: {
        if (tag == 201) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_CloseProfit;
        break;
      }

      // optional double CloseProfit = 26;
      case 26: {
        if (tag == 209) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_PositionProfit;
        break;
      }

      // optional double PositionProfit = 27;
      case 27: {
        if (tag == 217) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_PreSettlementPrice;
        break;
      }

      // optional double PreSettlementPrice = 28;
      case 28: {
        if (tag == 225) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_SettlementPrice;
        break;
      }

      // optional double SettlementPrice = 29;
      case 29: {
        if (tag == 233) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 30;
      case 30: {
        if (tag == 242) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspPosition.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 31;
      case 31: {
        if (tag == 248) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_OpenCost;
        break;
      }

      // optional double OpenCost = 32;
      case 32: {
        if (tag == 257) {
         parse_OpenCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_ExchangeMargin;
        break;
      }

      // optional double ExchangeMargin = 33;
      case 33: {
        if (tag == 265) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_CombPosition;
        break;
      }

      // optional int32 CombPosition = 34;
      case 34: {
        if (tag == 272) {
         parse_CombPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combposition_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_CombLongFrozen;
        break;
      }

      // optional int32 CombLongFrozen = 35;
      case 35: {
        if (tag == 280) {
         parse_CombLongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comblongfrozen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_CombShortFrozen;
        break;
      }

      // optional int32 CombShortFrozen = 36;
      case 36: {
        if (tag == 288) {
         parse_CombShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combshortfrozen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_CloseProfitByDate;
        break;
      }

      // optional double CloseProfitByDate = 37;
      case 37: {
        if (tag == 297) {
         parse_CloseProfitByDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_CloseProfitByTrade;
        break;
      }

      // optional double CloseProfitByTrade = 38;
      case 38: {
        if (tag == 305) {
         parse_CloseProfitByTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_TodayPosition;
        break;
      }

      // optional int32 TodayPosition = 39;
      case 39: {
        if (tag == 312) {
         parse_TodayPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayposition_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_MarginRateByMoney;
        break;
      }

      // optional double MarginRateByMoney = 40;
      case 40: {
        if (tag == 321) {
         parse_MarginRateByMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_MarginRateByVolume;
        break;
      }

      // optional double MarginRateByVolume = 41;
      case 41: {
        if (tag == 329) {
         parse_MarginRateByVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryRspPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryRspPosition)
  return false;
#undef DO_
}

void PBMsgQueryRspPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryRspPosition)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eof(), output);
  }

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // optional string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->investorid(), output);
  }

  // optional string PosiDirection = 5;
  if (this->posidirection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->posidirection().data(), this->posidirection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.PosiDirection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->posidirection(), output);
  }

  // optional string HedgeFlag = 6;
  if (this->hedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hedgeflag(), output);
  }

  // optional string PositionDate = 7;
  if (this->positiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.PositionDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->positiondate(), output);
  }

  // optional int32 YdPosition = 8;
  if (this->ydposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ydposition(), output);
  }

  // optional int32 Position = 9;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(), output);
  }

  // optional int32 LongFrozen = 10;
  if (this->longfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->longfrozen(), output);
  }

  // optional int32 ShortFrozen = 11;
  if (this->shortfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shortfrozen(), output);
  }

  // optional double LongFrozenAmount = 12;
  if (this->longfrozenamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->longfrozenamount(), output);
  }

  // optional double ShortFrozenAmount = 13;
  if (this->shortfrozenamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->shortfrozenamount(), output);
  }

  // optional int32 OpenVolume = 14;
  if (this->openvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->openvolume(), output);
  }

  // optional int32 CloseVolume = 15;
  if (this->closevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->closevolume(), output);
  }

  // optional double OpenAmount = 16;
  if (this->openamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->openamount(), output);
  }

  // optional double CloseAmount = 17;
  if (this->closeamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->closeamount(), output);
  }

  // optional double PositionCost = 18;
  if (this->positioncost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->positioncost(), output);
  }

  // optional double PreMargin = 19;
  if (this->premargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->premargin(), output);
  }

  // optional double UseMargin = 20;
  if (this->usemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->usemargin(), output);
  }

  // optional double FrozenMargin = 21;
  if (this->frozenmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->frozenmargin(), output);
  }

  // optional double FrozenCash = 22;
  if (this->frozencash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->frozencash(), output);
  }

  // optional double FrozenCommission = 23;
  if (this->frozencommission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->frozencommission(), output);
  }

  // optional double CashIn = 24;
  if (this->cashin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->cashin(), output);
  }

  // optional double Commission = 25;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->commission(), output);
  }

  // optional double CloseProfit = 26;
  if (this->closeprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->closeprofit(), output);
  }

  // optional double PositionProfit = 27;
  if (this->positionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->positionprofit(), output);
  }

  // optional double PreSettlementPrice = 28;
  if (this->presettlementprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->presettlementprice(), output);
  }

  // optional double SettlementPrice = 29;
  if (this->settlementprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->settlementprice(), output);
  }

  // optional string TradingDay = 30;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->tradingday(), output);
  }

  // optional int32 SettlementID = 31;
  if (this->settlementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->settlementid(), output);
  }

  // optional double OpenCost = 32;
  if (this->opencost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->opencost(), output);
  }

  // optional double ExchangeMargin = 33;
  if (this->exchangemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->exchangemargin(), output);
  }

  // optional int32 CombPosition = 34;
  if (this->combposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->combposition(), output);
  }

  // optional int32 CombLongFrozen = 35;
  if (this->comblongfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->comblongfrozen(), output);
  }

  // optional int32 CombShortFrozen = 36;
  if (this->combshortfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->combshortfrozen(), output);
  }

  // optional double CloseProfitByDate = 37;
  if (this->closeprofitbydate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->closeprofitbydate(), output);
  }

  // optional double CloseProfitByTrade = 38;
  if (this->closeprofitbytrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->closeprofitbytrade(), output);
  }

  // optional int32 TodayPosition = 39;
  if (this->todayposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->todayposition(), output);
  }

  // optional double MarginRateByMoney = 40;
  if (this->marginratebymoney() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->marginratebymoney(), output);
  }

  // optional double MarginRateByVolume = 41;
  if (this->marginratebyvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->marginratebyvolume(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryRspPosition)
}

::google::protobuf::uint8* PBMsgQueryRspPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryRspPosition)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eof(), target);
  }

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // optional string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investorid(), target);
  }

  // optional string PosiDirection = 5;
  if (this->posidirection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->posidirection().data(), this->posidirection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.PosiDirection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->posidirection(), target);
  }

  // optional string HedgeFlag = 6;
  if (this->hedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hedgeflag(), target);
  }

  // optional string PositionDate = 7;
  if (this->positiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.PositionDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->positiondate(), target);
  }

  // optional int32 YdPosition = 8;
  if (this->ydposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ydposition(), target);
  }

  // optional int32 Position = 9;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->position(), target);
  }

  // optional int32 LongFrozen = 10;
  if (this->longfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->longfrozen(), target);
  }

  // optional int32 ShortFrozen = 11;
  if (this->shortfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shortfrozen(), target);
  }

  // optional double LongFrozenAmount = 12;
  if (this->longfrozenamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->longfrozenamount(), target);
  }

  // optional double ShortFrozenAmount = 13;
  if (this->shortfrozenamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->shortfrozenamount(), target);
  }

  // optional int32 OpenVolume = 14;
  if (this->openvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->openvolume(), target);
  }

  // optional int32 CloseVolume = 15;
  if (this->closevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->closevolume(), target);
  }

  // optional double OpenAmount = 16;
  if (this->openamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->openamount(), target);
  }

  // optional double CloseAmount = 17;
  if (this->closeamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->closeamount(), target);
  }

  // optional double PositionCost = 18;
  if (this->positioncost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->positioncost(), target);
  }

  // optional double PreMargin = 19;
  if (this->premargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->premargin(), target);
  }

  // optional double UseMargin = 20;
  if (this->usemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->usemargin(), target);
  }

  // optional double FrozenMargin = 21;
  if (this->frozenmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->frozenmargin(), target);
  }

  // optional double FrozenCash = 22;
  if (this->frozencash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->frozencash(), target);
  }

  // optional double FrozenCommission = 23;
  if (this->frozencommission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->frozencommission(), target);
  }

  // optional double CashIn = 24;
  if (this->cashin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->cashin(), target);
  }

  // optional double Commission = 25;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->commission(), target);
  }

  // optional double CloseProfit = 26;
  if (this->closeprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->closeprofit(), target);
  }

  // optional double PositionProfit = 27;
  if (this->positionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->positionprofit(), target);
  }

  // optional double PreSettlementPrice = 28;
  if (this->presettlementprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->presettlementprice(), target);
  }

  // optional double SettlementPrice = 29;
  if (this->settlementprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->settlementprice(), target);
  }

  // optional string TradingDay = 30;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspPosition.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->tradingday(), target);
  }

  // optional int32 SettlementID = 31;
  if (this->settlementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->settlementid(), target);
  }

  // optional double OpenCost = 32;
  if (this->opencost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->opencost(), target);
  }

  // optional double ExchangeMargin = 33;
  if (this->exchangemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->exchangemargin(), target);
  }

  // optional int32 CombPosition = 34;
  if (this->combposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->combposition(), target);
  }

  // optional int32 CombLongFrozen = 35;
  if (this->comblongfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->comblongfrozen(), target);
  }

  // optional int32 CombShortFrozen = 36;
  if (this->combshortfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->combshortfrozen(), target);
  }

  // optional double CloseProfitByDate = 37;
  if (this->closeprofitbydate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->closeprofitbydate(), target);
  }

  // optional double CloseProfitByTrade = 38;
  if (this->closeprofitbytrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->closeprofitbytrade(), target);
  }

  // optional int32 TodayPosition = 39;
  if (this->todayposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->todayposition(), target);
  }

  // optional double MarginRateByMoney = 40;
  if (this->marginratebymoney() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->marginratebymoney(), target);
  }

  // optional double MarginRateByVolume = 41;
  if (this->marginratebyvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->marginratebyvolume(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryRspPosition)
  return target;
}

int PBMsgQueryRspPosition::ByteSize() const {
  int total_size = 0;

  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  // optional string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 4;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string PosiDirection = 5;
  if (this->posidirection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->posidirection());
  }

  // optional string HedgeFlag = 6;
  if (this->hedgeflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hedgeflag());
  }

  // optional string PositionDate = 7;
  if (this->positiondate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positiondate());
  }

  // optional int32 YdPosition = 8;
  if (this->ydposition() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ydposition());
  }

  // optional int32 Position = 9;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // optional int32 LongFrozen = 10;
  if (this->longfrozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longfrozen());
  }

  // optional int32 ShortFrozen = 11;
  if (this->shortfrozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shortfrozen());
  }

  // optional double LongFrozenAmount = 12;
  if (this->longfrozenamount() != 0) {
    total_size += 1 + 8;
  }

  // optional double ShortFrozenAmount = 13;
  if (this->shortfrozenamount() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 OpenVolume = 14;
  if (this->openvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->openvolume());
  }

  // optional int32 CloseVolume = 15;
  if (this->closevolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closevolume());
  }

  // optional double OpenAmount = 16;
  if (this->openamount() != 0) {
    total_size += 2 + 8;
  }

  // optional double CloseAmount = 17;
  if (this->closeamount() != 0) {
    total_size += 2 + 8;
  }

  // optional double PositionCost = 18;
  if (this->positioncost() != 0) {
    total_size += 2 + 8;
  }

  // optional double PreMargin = 19;
  if (this->premargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double UseMargin = 20;
  if (this->usemargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double FrozenMargin = 21;
  if (this->frozenmargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double FrozenCash = 22;
  if (this->frozencash() != 0) {
    total_size += 2 + 8;
  }

  // optional double FrozenCommission = 23;
  if (this->frozencommission() != 0) {
    total_size += 2 + 8;
  }

  // optional double CashIn = 24;
  if (this->cashin() != 0) {
    total_size += 2 + 8;
  }

  // optional double Commission = 25;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // optional double CloseProfit = 26;
  if (this->closeprofit() != 0) {
    total_size += 2 + 8;
  }

  // optional double PositionProfit = 27;
  if (this->positionprofit() != 0) {
    total_size += 2 + 8;
  }

  // optional double PreSettlementPrice = 28;
  if (this->presettlementprice() != 0) {
    total_size += 2 + 8;
  }

  // optional double SettlementPrice = 29;
  if (this->settlementprice() != 0) {
    total_size += 2 + 8;
  }

  // optional string TradingDay = 30;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional int32 SettlementID = 31;
  if (this->settlementid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlementid());
  }

  // optional double OpenCost = 32;
  if (this->opencost() != 0) {
    total_size += 2 + 8;
  }

  // optional double ExchangeMargin = 33;
  if (this->exchangemargin() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 CombPosition = 34;
  if (this->combposition() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combposition());
  }

  // optional int32 CombLongFrozen = 35;
  if (this->comblongfrozen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->comblongfrozen());
  }

  // optional int32 CombShortFrozen = 36;
  if (this->combshortfrozen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combshortfrozen());
  }

  // optional double CloseProfitByDate = 37;
  if (this->closeprofitbydate() != 0) {
    total_size += 2 + 8;
  }

  // optional double CloseProfitByTrade = 38;
  if (this->closeprofitbytrade() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 TodayPosition = 39;
  if (this->todayposition() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->todayposition());
  }

  // optional double MarginRateByMoney = 40;
  if (this->marginratebymoney() != 0) {
    total_size += 2 + 8;
  }

  // optional double MarginRateByVolume = 41;
  if (this->marginratebyvolume() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryRspPosition::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryRspPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryRspPosition>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryRspPosition::MergeFrom(const PBMsgQueryRspPosition& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.posidirection().size() > 0) {

    posidirection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posidirection_);
  }
  if (from.hedgeflag().size() > 0) {

    hedgeflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hedgeflag_);
  }
  if (from.positiondate().size() > 0) {

    positiondate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondate_);
  }
  if (from.ydposition() != 0) {
    set_ydposition(from.ydposition());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.longfrozen() != 0) {
    set_longfrozen(from.longfrozen());
  }
  if (from.shortfrozen() != 0) {
    set_shortfrozen(from.shortfrozen());
  }
  if (from.longfrozenamount() != 0) {
    set_longfrozenamount(from.longfrozenamount());
  }
  if (from.shortfrozenamount() != 0) {
    set_shortfrozenamount(from.shortfrozenamount());
  }
  if (from.openvolume() != 0) {
    set_openvolume(from.openvolume());
  }
  if (from.closevolume() != 0) {
    set_closevolume(from.closevolume());
  }
  if (from.openamount() != 0) {
    set_openamount(from.openamount());
  }
  if (from.closeamount() != 0) {
    set_closeamount(from.closeamount());
  }
  if (from.positioncost() != 0) {
    set_positioncost(from.positioncost());
  }
  if (from.premargin() != 0) {
    set_premargin(from.premargin());
  }
  if (from.usemargin() != 0) {
    set_usemargin(from.usemargin());
  }
  if (from.frozenmargin() != 0) {
    set_frozenmargin(from.frozenmargin());
  }
  if (from.frozencash() != 0) {
    set_frozencash(from.frozencash());
  }
  if (from.frozencommission() != 0) {
    set_frozencommission(from.frozencommission());
  }
  if (from.cashin() != 0) {
    set_cashin(from.cashin());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.closeprofit() != 0) {
    set_closeprofit(from.closeprofit());
  }
  if (from.positionprofit() != 0) {
    set_positionprofit(from.positionprofit());
  }
  if (from.presettlementprice() != 0) {
    set_presettlementprice(from.presettlementprice());
  }
  if (from.settlementprice() != 0) {
    set_settlementprice(from.settlementprice());
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.settlementid() != 0) {
    set_settlementid(from.settlementid());
  }
  if (from.opencost() != 0) {
    set_opencost(from.opencost());
  }
  if (from.exchangemargin() != 0) {
    set_exchangemargin(from.exchangemargin());
  }
  if (from.combposition() != 0) {
    set_combposition(from.combposition());
  }
  if (from.comblongfrozen() != 0) {
    set_comblongfrozen(from.comblongfrozen());
  }
  if (from.combshortfrozen() != 0) {
    set_combshortfrozen(from.combshortfrozen());
  }
  if (from.closeprofitbydate() != 0) {
    set_closeprofitbydate(from.closeprofitbydate());
  }
  if (from.closeprofitbytrade() != 0) {
    set_closeprofitbytrade(from.closeprofitbytrade());
  }
  if (from.todayposition() != 0) {
    set_todayposition(from.todayposition());
  }
  if (from.marginratebymoney() != 0) {
    set_marginratebymoney(from.marginratebymoney());
  }
  if (from.marginratebyvolume() != 0) {
    set_marginratebyvolume(from.marginratebyvolume());
  }
}

void PBMsgQueryRspPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryRspPosition::CopyFrom(const PBMsgQueryRspPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryRspPosition::IsInitialized() const {

  return true;
}

void PBMsgQueryRspPosition::Swap(PBMsgQueryRspPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryRspPosition::InternalSwap(PBMsgQueryRspPosition* other) {
  std::swap(eof_, other->eof_);
  instrumentid_.Swap(&other->instrumentid_);
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  posidirection_.Swap(&other->posidirection_);
  hedgeflag_.Swap(&other->hedgeflag_);
  positiondate_.Swap(&other->positiondate_);
  std::swap(ydposition_, other->ydposition_);
  std::swap(position_, other->position_);
  std::swap(longfrozen_, other->longfrozen_);
  std::swap(shortfrozen_, other->shortfrozen_);
  std::swap(longfrozenamount_, other->longfrozenamount_);
  std::swap(shortfrozenamount_, other->shortfrozenamount_);
  std::swap(openvolume_, other->openvolume_);
  std::swap(closevolume_, other->closevolume_);
  std::swap(openamount_, other->openamount_);
  std::swap(closeamount_, other->closeamount_);
  std::swap(positioncost_, other->positioncost_);
  std::swap(premargin_, other->premargin_);
  std::swap(usemargin_, other->usemargin_);
  std::swap(frozenmargin_, other->frozenmargin_);
  std::swap(frozencash_, other->frozencash_);
  std::swap(frozencommission_, other->frozencommission_);
  std::swap(cashin_, other->cashin_);
  std::swap(commission_, other->commission_);
  std::swap(closeprofit_, other->closeprofit_);
  std::swap(positionprofit_, other->positionprofit_);
  std::swap(presettlementprice_, other->presettlementprice_);
  std::swap(settlementprice_, other->settlementprice_);
  tradingday_.Swap(&other->tradingday_);
  std::swap(settlementid_, other->settlementid_);
  std::swap(opencost_, other->opencost_);
  std::swap(exchangemargin_, other->exchangemargin_);
  std::swap(combposition_, other->combposition_);
  std::swap(comblongfrozen_, other->comblongfrozen_);
  std::swap(combshortfrozen_, other->combshortfrozen_);
  std::swap(closeprofitbydate_, other->closeprofitbydate_);
  std::swap(closeprofitbytrade_, other->closeprofitbytrade_);
  std::swap(todayposition_, other->todayposition_);
  std::swap(marginratebymoney_, other->marginratebymoney_);
  std::swap(marginratebyvolume_, other->marginratebyvolume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryRspPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryRspPosition_descriptor_;
  metadata.reflection = PBMsgQueryRspPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryRspPosition

// optional int32 EOF = 1;
void PBMsgQueryRspPosition::clear_eof() {
  eof_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.EOF)
  return eof_;
}
 void PBMsgQueryRspPosition::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.EOF)
}

// optional string InstrumentID = 2;
void PBMsgQueryRspPosition::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}
 void PBMsgQueryRspPosition::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}
 void PBMsgQueryRspPosition::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}
 ::std::string* PBMsgQueryRspPosition::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.InstrumentID)
}

// optional string BrokerID = 3;
void PBMsgQueryRspPosition::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}
 void PBMsgQueryRspPosition::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}
 void PBMsgQueryRspPosition::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}
 ::std::string* PBMsgQueryRspPosition::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.BrokerID)
}

// optional string InvestorID = 4;
void PBMsgQueryRspPosition::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}
 void PBMsgQueryRspPosition::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}
 void PBMsgQueryRspPosition::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}
 ::std::string* PBMsgQueryRspPosition::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.InvestorID)
}

// optional string PosiDirection = 5;
void PBMsgQueryRspPosition::clear_posidirection() {
  posidirection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::posidirection() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
  return posidirection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_posidirection(const ::std::string& value) {
  
  posidirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}
 void PBMsgQueryRspPosition::set_posidirection(const char* value) {
  
  posidirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}
 void PBMsgQueryRspPosition::set_posidirection(const char* value, size_t size) {
  
  posidirection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}
 ::std::string* PBMsgQueryRspPosition::mutable_posidirection() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
  return posidirection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_posidirection() {
  
  return posidirection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_posidirection(::std::string* posidirection) {
  if (posidirection != NULL) {
    
  } else {
    
  }
  posidirection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posidirection);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.PosiDirection)
}

// optional string HedgeFlag = 6;
void PBMsgQueryRspPosition::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::hedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
  return hedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}
 void PBMsgQueryRspPosition::set_hedgeflag(const char* value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}
 void PBMsgQueryRspPosition::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}
 ::std::string* PBMsgQueryRspPosition::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_hedgeflag() {
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.HedgeFlag)
}

// optional string PositionDate = 7;
void PBMsgQueryRspPosition::clear_positiondate() {
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::positiondate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
  return positiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_positiondate(const ::std::string& value) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}
 void PBMsgQueryRspPosition::set_positiondate(const char* value) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}
 void PBMsgQueryRspPosition::set_positiondate(const char* value, size_t size) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}
 ::std::string* PBMsgQueryRspPosition::mutable_positiondate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
  return positiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_positiondate() {
  
  return positiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_positiondate(::std::string* positiondate) {
  if (positiondate != NULL) {
    
  } else {
    
  }
  positiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.PositionDate)
}

// optional int32 YdPosition = 8;
void PBMsgQueryRspPosition::clear_ydposition() {
  ydposition_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::ydposition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.YdPosition)
  return ydposition_;
}
 void PBMsgQueryRspPosition::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.YdPosition)
}

// optional int32 Position = 9;
void PBMsgQueryRspPosition::clear_position() {
  position_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::position() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.Position)
  return position_;
}
 void PBMsgQueryRspPosition::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.Position)
}

// optional int32 LongFrozen = 10;
void PBMsgQueryRspPosition::clear_longfrozen() {
  longfrozen_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::longfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.LongFrozen)
  return longfrozen_;
}
 void PBMsgQueryRspPosition::set_longfrozen(::google::protobuf::int32 value) {
  
  longfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.LongFrozen)
}

// optional int32 ShortFrozen = 11;
void PBMsgQueryRspPosition::clear_shortfrozen() {
  shortfrozen_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::shortfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozen)
  return shortfrozen_;
}
 void PBMsgQueryRspPosition::set_shortfrozen(::google::protobuf::int32 value) {
  
  shortfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozen)
}

// optional double LongFrozenAmount = 12;
void PBMsgQueryRspPosition::clear_longfrozenamount() {
  longfrozenamount_ = 0;
}
 double PBMsgQueryRspPosition::longfrozenamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.LongFrozenAmount)
  return longfrozenamount_;
}
 void PBMsgQueryRspPosition::set_longfrozenamount(double value) {
  
  longfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.LongFrozenAmount)
}

// optional double ShortFrozenAmount = 13;
void PBMsgQueryRspPosition::clear_shortfrozenamount() {
  shortfrozenamount_ = 0;
}
 double PBMsgQueryRspPosition::shortfrozenamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozenAmount)
  return shortfrozenamount_;
}
 void PBMsgQueryRspPosition::set_shortfrozenamount(double value) {
  
  shortfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.ShortFrozenAmount)
}

// optional int32 OpenVolume = 14;
void PBMsgQueryRspPosition::clear_openvolume() {
  openvolume_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::openvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.OpenVolume)
  return openvolume_;
}
 void PBMsgQueryRspPosition::set_openvolume(::google::protobuf::int32 value) {
  
  openvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.OpenVolume)
}

// optional int32 CloseVolume = 15;
void PBMsgQueryRspPosition::clear_closevolume() {
  closevolume_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::closevolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseVolume)
  return closevolume_;
}
 void PBMsgQueryRspPosition::set_closevolume(::google::protobuf::int32 value) {
  
  closevolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseVolume)
}

// optional double OpenAmount = 16;
void PBMsgQueryRspPosition::clear_openamount() {
  openamount_ = 0;
}
 double PBMsgQueryRspPosition::openamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.OpenAmount)
  return openamount_;
}
 void PBMsgQueryRspPosition::set_openamount(double value) {
  
  openamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.OpenAmount)
}

// optional double CloseAmount = 17;
void PBMsgQueryRspPosition::clear_closeamount() {
  closeamount_ = 0;
}
 double PBMsgQueryRspPosition::closeamount() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseAmount)
  return closeamount_;
}
 void PBMsgQueryRspPosition::set_closeamount(double value) {
  
  closeamount_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseAmount)
}

// optional double PositionCost = 18;
void PBMsgQueryRspPosition::clear_positioncost() {
  positioncost_ = 0;
}
 double PBMsgQueryRspPosition::positioncost() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PositionCost)
  return positioncost_;
}
 void PBMsgQueryRspPosition::set_positioncost(double value) {
  
  positioncost_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PositionCost)
}

// optional double PreMargin = 19;
void PBMsgQueryRspPosition::clear_premargin() {
  premargin_ = 0;
}
 double PBMsgQueryRspPosition::premargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PreMargin)
  return premargin_;
}
 void PBMsgQueryRspPosition::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PreMargin)
}

// optional double UseMargin = 20;
void PBMsgQueryRspPosition::clear_usemargin() {
  usemargin_ = 0;
}
 double PBMsgQueryRspPosition::usemargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.UseMargin)
  return usemargin_;
}
 void PBMsgQueryRspPosition::set_usemargin(double value) {
  
  usemargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.UseMargin)
}

// optional double FrozenMargin = 21;
void PBMsgQueryRspPosition::clear_frozenmargin() {
  frozenmargin_ = 0;
}
 double PBMsgQueryRspPosition::frozenmargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.FrozenMargin)
  return frozenmargin_;
}
 void PBMsgQueryRspPosition::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.FrozenMargin)
}

// optional double FrozenCash = 22;
void PBMsgQueryRspPosition::clear_frozencash() {
  frozencash_ = 0;
}
 double PBMsgQueryRspPosition::frozencash() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.FrozenCash)
  return frozencash_;
}
 void PBMsgQueryRspPosition::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.FrozenCash)
}

// optional double FrozenCommission = 23;
void PBMsgQueryRspPosition::clear_frozencommission() {
  frozencommission_ = 0;
}
 double PBMsgQueryRspPosition::frozencommission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.FrozenCommission)
  return frozencommission_;
}
 void PBMsgQueryRspPosition::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.FrozenCommission)
}

// optional double CashIn = 24;
void PBMsgQueryRspPosition::clear_cashin() {
  cashin_ = 0;
}
 double PBMsgQueryRspPosition::cashin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CashIn)
  return cashin_;
}
 void PBMsgQueryRspPosition::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CashIn)
}

// optional double Commission = 25;
void PBMsgQueryRspPosition::clear_commission() {
  commission_ = 0;
}
 double PBMsgQueryRspPosition::commission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.Commission)
  return commission_;
}
 void PBMsgQueryRspPosition::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.Commission)
}

// optional double CloseProfit = 26;
void PBMsgQueryRspPosition::clear_closeprofit() {
  closeprofit_ = 0;
}
 double PBMsgQueryRspPosition::closeprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseProfit)
  return closeprofit_;
}
 void PBMsgQueryRspPosition::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseProfit)
}

// optional double PositionProfit = 27;
void PBMsgQueryRspPosition::clear_positionprofit() {
  positionprofit_ = 0;
}
 double PBMsgQueryRspPosition::positionprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PositionProfit)
  return positionprofit_;
}
 void PBMsgQueryRspPosition::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PositionProfit)
}

// optional double PreSettlementPrice = 28;
void PBMsgQueryRspPosition::clear_presettlementprice() {
  presettlementprice_ = 0;
}
 double PBMsgQueryRspPosition::presettlementprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.PreSettlementPrice)
  return presettlementprice_;
}
 void PBMsgQueryRspPosition::set_presettlementprice(double value) {
  
  presettlementprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.PreSettlementPrice)
}

// optional double SettlementPrice = 29;
void PBMsgQueryRspPosition::clear_settlementprice() {
  settlementprice_ = 0;
}
 double PBMsgQueryRspPosition::settlementprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.SettlementPrice)
  return settlementprice_;
}
 void PBMsgQueryRspPosition::set_settlementprice(double value) {
  
  settlementprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.SettlementPrice)
}

// optional string TradingDay = 30;
void PBMsgQueryRspPosition::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspPosition::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}
 void PBMsgQueryRspPosition::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}
 void PBMsgQueryRspPosition::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}
 ::std::string* PBMsgQueryRspPosition::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspPosition::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspPosition::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspPosition.TradingDay)
}

// optional int32 SettlementID = 31;
void PBMsgQueryRspPosition::clear_settlementid() {
  settlementid_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.SettlementID)
  return settlementid_;
}
 void PBMsgQueryRspPosition::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.SettlementID)
}

// optional double OpenCost = 32;
void PBMsgQueryRspPosition::clear_opencost() {
  opencost_ = 0;
}
 double PBMsgQueryRspPosition::opencost() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.OpenCost)
  return opencost_;
}
 void PBMsgQueryRspPosition::set_opencost(double value) {
  
  opencost_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.OpenCost)
}

// optional double ExchangeMargin = 33;
void PBMsgQueryRspPosition::clear_exchangemargin() {
  exchangemargin_ = 0;
}
 double PBMsgQueryRspPosition::exchangemargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.ExchangeMargin)
  return exchangemargin_;
}
 void PBMsgQueryRspPosition::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.ExchangeMargin)
}

// optional int32 CombPosition = 34;
void PBMsgQueryRspPosition::clear_combposition() {
  combposition_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::combposition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CombPosition)
  return combposition_;
}
 void PBMsgQueryRspPosition::set_combposition(::google::protobuf::int32 value) {
  
  combposition_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CombPosition)
}

// optional int32 CombLongFrozen = 35;
void PBMsgQueryRspPosition::clear_comblongfrozen() {
  comblongfrozen_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::comblongfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CombLongFrozen)
  return comblongfrozen_;
}
 void PBMsgQueryRspPosition::set_comblongfrozen(::google::protobuf::int32 value) {
  
  comblongfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CombLongFrozen)
}

// optional int32 CombShortFrozen = 36;
void PBMsgQueryRspPosition::clear_combshortfrozen() {
  combshortfrozen_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::combshortfrozen() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CombShortFrozen)
  return combshortfrozen_;
}
 void PBMsgQueryRspPosition::set_combshortfrozen(::google::protobuf::int32 value) {
  
  combshortfrozen_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CombShortFrozen)
}

// optional double CloseProfitByDate = 37;
void PBMsgQueryRspPosition::clear_closeprofitbydate() {
  closeprofitbydate_ = 0;
}
 double PBMsgQueryRspPosition::closeprofitbydate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByDate)
  return closeprofitbydate_;
}
 void PBMsgQueryRspPosition::set_closeprofitbydate(double value) {
  
  closeprofitbydate_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByDate)
}

// optional double CloseProfitByTrade = 38;
void PBMsgQueryRspPosition::clear_closeprofitbytrade() {
  closeprofitbytrade_ = 0;
}
 double PBMsgQueryRspPosition::closeprofitbytrade() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByTrade)
  return closeprofitbytrade_;
}
 void PBMsgQueryRspPosition::set_closeprofitbytrade(double value) {
  
  closeprofitbytrade_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.CloseProfitByTrade)
}

// optional int32 TodayPosition = 39;
void PBMsgQueryRspPosition::clear_todayposition() {
  todayposition_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspPosition::todayposition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.TodayPosition)
  return todayposition_;
}
 void PBMsgQueryRspPosition::set_todayposition(::google::protobuf::int32 value) {
  
  todayposition_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.TodayPosition)
}

// optional double MarginRateByMoney = 40;
void PBMsgQueryRspPosition::clear_marginratebymoney() {
  marginratebymoney_ = 0;
}
 double PBMsgQueryRspPosition::marginratebymoney() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByMoney)
  return marginratebymoney_;
}
 void PBMsgQueryRspPosition::set_marginratebymoney(double value) {
  
  marginratebymoney_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByMoney)
}

// optional double MarginRateByVolume = 41;
void PBMsgQueryRspPosition::clear_marginratebyvolume() {
  marginratebyvolume_ = 0;
}
 double PBMsgQueryRspPosition::marginratebyvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByVolume)
  return marginratebyvolume_;
}
 void PBMsgQueryRspPosition::set_marginratebyvolume(double value) {
  
  marginratebyvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspPosition.MarginRateByVolume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryReqFund::kBrokerIDFieldNumber;
const int PBMsgQueryReqFund::kInvestorIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryReqFund::PBMsgQueryReqFund()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryReqFund)
}

void PBMsgQueryReqFund::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryReqFund::PBMsgQueryReqFund(const PBMsgQueryReqFund& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryReqFund)
}

void PBMsgQueryReqFund::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgQueryReqFund::~PBMsgQueryReqFund() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryReqFund)
  SharedDtor();
}

void PBMsgQueryReqFund::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryReqFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryReqFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryReqFund_descriptor_;
}

const PBMsgQueryReqFund& PBMsgQueryReqFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryReqFund* PBMsgQueryReqFund::default_instance_ = NULL;

PBMsgQueryReqFund* PBMsgQueryReqFund::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryReqFund* n = new PBMsgQueryReqFund;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryReqFund::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgQueryReqFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryReqFund)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqFund.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryReqFund.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryReqFund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryReqFund)
  return false;
#undef DO_
}

void PBMsgQueryReqFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryReqFund)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqFund.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqFund.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryReqFund)
}

::google::protobuf::uint8* PBMsgQueryReqFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryReqFund)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqFund.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryReqFund.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryReqFund)
  return target;
}

int PBMsgQueryReqFund::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryReqFund::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryReqFund* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryReqFund>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryReqFund::MergeFrom(const PBMsgQueryReqFund& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
}

void PBMsgQueryReqFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryReqFund::CopyFrom(const PBMsgQueryReqFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryReqFund::IsInitialized() const {

  return true;
}

void PBMsgQueryReqFund::Swap(PBMsgQueryReqFund* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryReqFund::InternalSwap(PBMsgQueryReqFund* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryReqFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryReqFund_descriptor_;
  metadata.reflection = PBMsgQueryReqFund_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryReqFund

// optional string BrokerID = 2;
void PBMsgQueryReqFund::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqFund::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqFund::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}
 void PBMsgQueryReqFund::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}
 void PBMsgQueryReqFund::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}
 ::std::string* PBMsgQueryReqFund::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqFund::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqFund::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqFund.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgQueryReqFund::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryReqFund::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqFund::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}
 void PBMsgQueryReqFund::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}
 void PBMsgQueryReqFund::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}
 ::std::string* PBMsgQueryReqFund::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryReqFund::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryReqFund::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryReqFund.InvestorID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgQueryRspFund::kEOFFieldNumber;
const int PBMsgQueryRspFund::kBrokerIDFieldNumber;
const int PBMsgQueryRspFund::kAccountIDFieldNumber;
const int PBMsgQueryRspFund::kPreMortgageFieldNumber;
const int PBMsgQueryRspFund::kPreCreditFieldNumber;
const int PBMsgQueryRspFund::kPreDepositFieldNumber;
const int PBMsgQueryRspFund::kPreBalanceFieldNumber;
const int PBMsgQueryRspFund::kPreMarginFieldNumber;
const int PBMsgQueryRspFund::kInterestBaseFieldNumber;
const int PBMsgQueryRspFund::kInterestFieldNumber;
const int PBMsgQueryRspFund::kDepositFieldNumber;
const int PBMsgQueryRspFund::kWithdrawFieldNumber;
const int PBMsgQueryRspFund::kFrozenMarginFieldNumber;
const int PBMsgQueryRspFund::kFrozenCashFieldNumber;
const int PBMsgQueryRspFund::kFrozenCommissionFieldNumber;
const int PBMsgQueryRspFund::kCurrMarginFieldNumber;
const int PBMsgQueryRspFund::kCashInFieldNumber;
const int PBMsgQueryRspFund::kCommissionFieldNumber;
const int PBMsgQueryRspFund::kCloseProfitFieldNumber;
const int PBMsgQueryRspFund::kPositionProfitFieldNumber;
const int PBMsgQueryRspFund::kBalanceFieldNumber;
const int PBMsgQueryRspFund::kAvailableFieldNumber;
const int PBMsgQueryRspFund::kWithdrawQuotaFieldNumber;
const int PBMsgQueryRspFund::kReserveFieldNumber;
const int PBMsgQueryRspFund::kTradingDayFieldNumber;
const int PBMsgQueryRspFund::kSettlementIDFieldNumber;
const int PBMsgQueryRspFund::kCreditFieldNumber;
const int PBMsgQueryRspFund::kMortgageFieldNumber;
const int PBMsgQueryRspFund::kExchangeMarginFieldNumber;
const int PBMsgQueryRspFund::kDeliveryMarginFieldNumber;
const int PBMsgQueryRspFund::kExchangeDeliveryMarginFieldNumber;
const int PBMsgQueryRspFund::kReserveBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgQueryRspFund::PBMsgQueryRspFund()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgQueryRspFund)
}

void PBMsgQueryRspFund::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgQueryRspFund::PBMsgQueryRspFund(const PBMsgQueryRspFund& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgQueryRspFund)
}

void PBMsgQueryRspFund::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eof_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  premortgage_ = 0;
  precredit_ = 0;
  predeposit_ = 0;
  prebalance_ = 0;
  premargin_ = 0;
  interestbase_ = 0;
  interest_ = 0;
  deposit_ = 0;
  withdraw_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  currmargin_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  balance_ = 0;
  available_ = 0;
  withdrawquota_ = 0;
  reserve_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
  credit_ = 0;
  mortgage_ = 0;
  exchangemargin_ = 0;
  deliverymargin_ = 0;
  exchangedeliverymargin_ = 0;
  reservebalance_ = 0;
}

PBMsgQueryRspFund::~PBMsgQueryRspFund() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgQueryRspFund)
  SharedDtor();
}

void PBMsgQueryRspFund::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgQueryRspFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgQueryRspFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgQueryRspFund_descriptor_;
}

const PBMsgQueryRspFund& PBMsgQueryRspFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgQueryRspFund* PBMsgQueryRspFund::default_instance_ = NULL;

PBMsgQueryRspFund* PBMsgQueryRspFund::New(::google::protobuf::Arena* arena) const {
  PBMsgQueryRspFund* n = new PBMsgQueryRspFund;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgQueryRspFund::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgQueryRspFund*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(premortgage_, premargin_);
  eof_ = 0;
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(interestbase_, frozenmargin_);
  ZR_(frozencash_, currmargin_);
  ZR_(cashin_, reserve_);
  ZR_(credit_, reservebalance_);
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgQueryRspFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgQueryRspFund)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EOF = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }

      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspFund.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AccountID;
        break;
      }

      // optional string AccountID = 3;
      case 3: {
        if (tag == 26) {
         parse_AccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspFund.AccountID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_PreMortgage;
        break;
      }

      // optional double PreMortgage = 4;
      case 4: {
        if (tag == 33) {
         parse_PreMortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premortgage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_PreCredit;
        break;
      }

      // optional double PreCredit = 5;
      case 5: {
        if (tag == 41) {
         parse_PreCredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precredit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_PreDeposit;
        break;
      }

      // optional double PreDeposit = 6;
      case 6: {
        if (tag == 49) {
         parse_PreDeposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predeposit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_PreBalance;
        break;
      }

      // optional double PreBalance = 7;
      case 7: {
        if (tag == 57) {
         parse_PreBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_PreMargin;
        break;
      }

      // optional double PreMargin = 8;
      case 8: {
        if (tag == 65) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_InterestBase;
        break;
      }

      // optional double InterestBase = 9;
      case 9: {
        if (tag == 73) {
         parse_InterestBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interestbase_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Interest;
        break;
      }

      // optional double Interest = 10;
      case 10: {
        if (tag == 81) {
         parse_Interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_Deposit;
        break;
      }

      // optional double Deposit = 11;
      case 11: {
        if (tag == 89) {
         parse_Deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Withdraw;
        break;
      }

      // optional double Withdraw = 12;
      case 12: {
        if (tag == 97) {
         parse_Withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_FrozenMargin;
        break;
      }

      // optional double FrozenMargin = 13;
      case 13: {
        if (tag == 105) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_FrozenCash;
        break;
      }

      // optional double FrozenCash = 14;
      case 14: {
        if (tag == 113) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_FrozenCommission;
        break;
      }

      // optional double FrozenCommission = 15;
      case 15: {
        if (tag == 121) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_CurrMargin;
        break;
      }

      // optional double CurrMargin = 16;
      case 16: {
        if (tag == 129) {
         parse_CurrMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_CashIn;
        break;
      }

      // optional double CashIn = 17;
      case 17: {
        if (tag == 137) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_Commission;
        break;
      }

      // optional double Commission = 18;
      case 18: {
        if (tag == 145) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_CloseProfit;
        break;
      }

      // optional double CloseProfit = 19;
      case 19: {
        if (tag == 153) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_PositionProfit;
        break;
      }

      // optional double PositionProfit = 20;
      case 20: {
        if (tag == 161) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_Balance;
        break;
      }

      // optional double Balance = 21;
      case 21: {
        if (tag == 169) {
         parse_Balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_Available;
        break;
      }

      // optional double Available = 22;
      case 22: {
        if (tag == 177) {
         parse_Available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_WithdrawQuota;
        break;
      }

      // optional double WithdrawQuota = 23;
      case 23: {
        if (tag == 185) {
         parse_WithdrawQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_Reserve;
        break;
      }

      // optional double Reserve = 24;
      case 24: {
        if (tag == 193) {
         parse_Reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 25;
      case 25: {
        if (tag == 202) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgQueryRspFund.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 26;
      case 26: {
        if (tag == 208) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_Credit;
        break;
      }

      // optional double Credit = 27;
      case 27: {
        if (tag == 217) {
         parse_Credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_Mortgage;
        break;
      }

      // optional double Mortgage = 28;
      case 28: {
        if (tag == 225) {
         parse_Mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_ExchangeMargin;
        break;
      }

      // optional double ExchangeMargin = 29;
      case 29: {
        if (tag == 233) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_DeliveryMargin;
        break;
      }

      // optional double DeliveryMargin = 30;
      case 30: {
        if (tag == 241) {
         parse_DeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deliverymargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_ExchangeDeliveryMargin;
        break;
      }

      // optional double ExchangeDeliveryMargin = 31;
      case 31: {
        if (tag == 249) {
         parse_ExchangeDeliveryMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangedeliverymargin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_ReserveBalance;
        break;
      }

      // optional double ReserveBalance = 32;
      case 32: {
        if (tag == 257) {
         parse_ReserveBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reservebalance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgQueryRspFund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgQueryRspFund)
  return false;
#undef DO_
}

void PBMsgQueryRspFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgQueryRspFund)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eof(), output);
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspFund.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string AccountID = 3;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspFund.AccountID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->accountid(), output);
  }

  // optional double PreMortgage = 4;
  if (this->premortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->premortgage(), output);
  }

  // optional double PreCredit = 5;
  if (this->precredit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->precredit(), output);
  }

  // optional double PreDeposit = 6;
  if (this->predeposit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->predeposit(), output);
  }

  // optional double PreBalance = 7;
  if (this->prebalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prebalance(), output);
  }

  // optional double PreMargin = 8;
  if (this->premargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->premargin(), output);
  }

  // optional double InterestBase = 9;
  if (this->interestbase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->interestbase(), output);
  }

  // optional double Interest = 10;
  if (this->interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->interest(), output);
  }

  // optional double Deposit = 11;
  if (this->deposit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->deposit(), output);
  }

  // optional double Withdraw = 12;
  if (this->withdraw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->withdraw(), output);
  }

  // optional double FrozenMargin = 13;
  if (this->frozenmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->frozenmargin(), output);
  }

  // optional double FrozenCash = 14;
  if (this->frozencash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozencash(), output);
  }

  // optional double FrozenCommission = 15;
  if (this->frozencommission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->frozencommission(), output);
  }

  // optional double CurrMargin = 16;
  if (this->currmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->currmargin(), output);
  }

  // optional double CashIn = 17;
  if (this->cashin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->cashin(), output);
  }

  // optional double Commission = 18;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->commission(), output);
  }

  // optional double CloseProfit = 19;
  if (this->closeprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->closeprofit(), output);
  }

  // optional double PositionProfit = 20;
  if (this->positionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->positionprofit(), output);
  }

  // optional double Balance = 21;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->balance(), output);
  }

  // optional double Available = 22;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->available(), output);
  }

  // optional double WithdrawQuota = 23;
  if (this->withdrawquota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->withdrawquota(), output);
  }

  // optional double Reserve = 24;
  if (this->reserve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->reserve(), output);
  }

  // optional string TradingDay = 25;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspFund.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->tradingday(), output);
  }

  // optional int32 SettlementID = 26;
  if (this->settlementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->settlementid(), output);
  }

  // optional double Credit = 27;
  if (this->credit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->credit(), output);
  }

  // optional double Mortgage = 28;
  if (this->mortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->mortgage(), output);
  }

  // optional double ExchangeMargin = 29;
  if (this->exchangemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->exchangemargin(), output);
  }

  // optional double DeliveryMargin = 30;
  if (this->deliverymargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->deliverymargin(), output);
  }

  // optional double ExchangeDeliveryMargin = 31;
  if (this->exchangedeliverymargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->exchangedeliverymargin(), output);
  }

  // optional double ReserveBalance = 32;
  if (this->reservebalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->reservebalance(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgQueryRspFund)
}

::google::protobuf::uint8* PBMsgQueryRspFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgQueryRspFund)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eof(), target);
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspFund.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string AccountID = 3;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspFund.AccountID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountid(), target);
  }

  // optional double PreMortgage = 4;
  if (this->premortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->premortgage(), target);
  }

  // optional double PreCredit = 5;
  if (this->precredit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->precredit(), target);
  }

  // optional double PreDeposit = 6;
  if (this->predeposit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->predeposit(), target);
  }

  // optional double PreBalance = 7;
  if (this->prebalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prebalance(), target);
  }

  // optional double PreMargin = 8;
  if (this->premargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->premargin(), target);
  }

  // optional double InterestBase = 9;
  if (this->interestbase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->interestbase(), target);
  }

  // optional double Interest = 10;
  if (this->interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->interest(), target);
  }

  // optional double Deposit = 11;
  if (this->deposit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->deposit(), target);
  }

  // optional double Withdraw = 12;
  if (this->withdraw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->withdraw(), target);
  }

  // optional double FrozenMargin = 13;
  if (this->frozenmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->frozenmargin(), target);
  }

  // optional double FrozenCash = 14;
  if (this->frozencash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozencash(), target);
  }

  // optional double FrozenCommission = 15;
  if (this->frozencommission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->frozencommission(), target);
  }

  // optional double CurrMargin = 16;
  if (this->currmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->currmargin(), target);
  }

  // optional double CashIn = 17;
  if (this->cashin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->cashin(), target);
  }

  // optional double Commission = 18;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->commission(), target);
  }

  // optional double CloseProfit = 19;
  if (this->closeprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->closeprofit(), target);
  }

  // optional double PositionProfit = 20;
  if (this->positionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->positionprofit(), target);
  }

  // optional double Balance = 21;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->balance(), target);
  }

  // optional double Available = 22;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->available(), target);
  }

  // optional double WithdrawQuota = 23;
  if (this->withdrawquota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->withdrawquota(), target);
  }

  // optional double Reserve = 24;
  if (this->reserve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->reserve(), target);
  }

  // optional string TradingDay = 25;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgQueryRspFund.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->tradingday(), target);
  }

  // optional int32 SettlementID = 26;
  if (this->settlementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->settlementid(), target);
  }

  // optional double Credit = 27;
  if (this->credit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->credit(), target);
  }

  // optional double Mortgage = 28;
  if (this->mortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->mortgage(), target);
  }

  // optional double ExchangeMargin = 29;
  if (this->exchangemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->exchangemargin(), target);
  }

  // optional double DeliveryMargin = 30;
  if (this->deliverymargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->deliverymargin(), target);
  }

  // optional double ExchangeDeliveryMargin = 31;
  if (this->exchangedeliverymargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->exchangedeliverymargin(), target);
  }

  // optional double ReserveBalance = 32;
  if (this->reservebalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->reservebalance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgQueryRspFund)
  return target;
}

int PBMsgQueryRspFund::ByteSize() const {
  int total_size = 0;

  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string AccountID = 3;
  if (this->accountid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountid());
  }

  // optional double PreMortgage = 4;
  if (this->premortgage() != 0) {
    total_size += 1 + 8;
  }

  // optional double PreCredit = 5;
  if (this->precredit() != 0) {
    total_size += 1 + 8;
  }

  // optional double PreDeposit = 6;
  if (this->predeposit() != 0) {
    total_size += 1 + 8;
  }

  // optional double PreBalance = 7;
  if (this->prebalance() != 0) {
    total_size += 1 + 8;
  }

  // optional double PreMargin = 8;
  if (this->premargin() != 0) {
    total_size += 1 + 8;
  }

  // optional double InterestBase = 9;
  if (this->interestbase() != 0) {
    total_size += 1 + 8;
  }

  // optional double Interest = 10;
  if (this->interest() != 0) {
    total_size += 1 + 8;
  }

  // optional double Deposit = 11;
  if (this->deposit() != 0) {
    total_size += 1 + 8;
  }

  // optional double Withdraw = 12;
  if (this->withdraw() != 0) {
    total_size += 1 + 8;
  }

  // optional double FrozenMargin = 13;
  if (this->frozenmargin() != 0) {
    total_size += 1 + 8;
  }

  // optional double FrozenCash = 14;
  if (this->frozencash() != 0) {
    total_size += 1 + 8;
  }

  // optional double FrozenCommission = 15;
  if (this->frozencommission() != 0) {
    total_size += 1 + 8;
  }

  // optional double CurrMargin = 16;
  if (this->currmargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double CashIn = 17;
  if (this->cashin() != 0) {
    total_size += 2 + 8;
  }

  // optional double Commission = 18;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // optional double CloseProfit = 19;
  if (this->closeprofit() != 0) {
    total_size += 2 + 8;
  }

  // optional double PositionProfit = 20;
  if (this->positionprofit() != 0) {
    total_size += 2 + 8;
  }

  // optional double Balance = 21;
  if (this->balance() != 0) {
    total_size += 2 + 8;
  }

  // optional double Available = 22;
  if (this->available() != 0) {
    total_size += 2 + 8;
  }

  // optional double WithdrawQuota = 23;
  if (this->withdrawquota() != 0) {
    total_size += 2 + 8;
  }

  // optional double Reserve = 24;
  if (this->reserve() != 0) {
    total_size += 2 + 8;
  }

  // optional string TradingDay = 25;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional int32 SettlementID = 26;
  if (this->settlementid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlementid());
  }

  // optional double Credit = 27;
  if (this->credit() != 0) {
    total_size += 2 + 8;
  }

  // optional double Mortgage = 28;
  if (this->mortgage() != 0) {
    total_size += 2 + 8;
  }

  // optional double ExchangeMargin = 29;
  if (this->exchangemargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double DeliveryMargin = 30;
  if (this->deliverymargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double ExchangeDeliveryMargin = 31;
  if (this->exchangedeliverymargin() != 0) {
    total_size += 2 + 8;
  }

  // optional double ReserveBalance = 32;
  if (this->reservebalance() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgQueryRspFund::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgQueryRspFund* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgQueryRspFund>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgQueryRspFund::MergeFrom(const PBMsgQueryRspFund& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.accountid().size() > 0) {

    accountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountid_);
  }
  if (from.premortgage() != 0) {
    set_premortgage(from.premortgage());
  }
  if (from.precredit() != 0) {
    set_precredit(from.precredit());
  }
  if (from.predeposit() != 0) {
    set_predeposit(from.predeposit());
  }
  if (from.prebalance() != 0) {
    set_prebalance(from.prebalance());
  }
  if (from.premargin() != 0) {
    set_premargin(from.premargin());
  }
  if (from.interestbase() != 0) {
    set_interestbase(from.interestbase());
  }
  if (from.interest() != 0) {
    set_interest(from.interest());
  }
  if (from.deposit() != 0) {
    set_deposit(from.deposit());
  }
  if (from.withdraw() != 0) {
    set_withdraw(from.withdraw());
  }
  if (from.frozenmargin() != 0) {
    set_frozenmargin(from.frozenmargin());
  }
  if (from.frozencash() != 0) {
    set_frozencash(from.frozencash());
  }
  if (from.frozencommission() != 0) {
    set_frozencommission(from.frozencommission());
  }
  if (from.currmargin() != 0) {
    set_currmargin(from.currmargin());
  }
  if (from.cashin() != 0) {
    set_cashin(from.cashin());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.closeprofit() != 0) {
    set_closeprofit(from.closeprofit());
  }
  if (from.positionprofit() != 0) {
    set_positionprofit(from.positionprofit());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.withdrawquota() != 0) {
    set_withdrawquota(from.withdrawquota());
  }
  if (from.reserve() != 0) {
    set_reserve(from.reserve());
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.settlementid() != 0) {
    set_settlementid(from.settlementid());
  }
  if (from.credit() != 0) {
    set_credit(from.credit());
  }
  if (from.mortgage() != 0) {
    set_mortgage(from.mortgage());
  }
  if (from.exchangemargin() != 0) {
    set_exchangemargin(from.exchangemargin());
  }
  if (from.deliverymargin() != 0) {
    set_deliverymargin(from.deliverymargin());
  }
  if (from.exchangedeliverymargin() != 0) {
    set_exchangedeliverymargin(from.exchangedeliverymargin());
  }
  if (from.reservebalance() != 0) {
    set_reservebalance(from.reservebalance());
  }
}

void PBMsgQueryRspFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgQueryRspFund::CopyFrom(const PBMsgQueryRspFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgQueryRspFund::IsInitialized() const {

  return true;
}

void PBMsgQueryRspFund::Swap(PBMsgQueryRspFund* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgQueryRspFund::InternalSwap(PBMsgQueryRspFund* other) {
  std::swap(eof_, other->eof_);
  brokerid_.Swap(&other->brokerid_);
  accountid_.Swap(&other->accountid_);
  std::swap(premortgage_, other->premortgage_);
  std::swap(precredit_, other->precredit_);
  std::swap(predeposit_, other->predeposit_);
  std::swap(prebalance_, other->prebalance_);
  std::swap(premargin_, other->premargin_);
  std::swap(interestbase_, other->interestbase_);
  std::swap(interest_, other->interest_);
  std::swap(deposit_, other->deposit_);
  std::swap(withdraw_, other->withdraw_);
  std::swap(frozenmargin_, other->frozenmargin_);
  std::swap(frozencash_, other->frozencash_);
  std::swap(frozencommission_, other->frozencommission_);
  std::swap(currmargin_, other->currmargin_);
  std::swap(cashin_, other->cashin_);
  std::swap(commission_, other->commission_);
  std::swap(closeprofit_, other->closeprofit_);
  std::swap(positionprofit_, other->positionprofit_);
  std::swap(balance_, other->balance_);
  std::swap(available_, other->available_);
  std::swap(withdrawquota_, other->withdrawquota_);
  std::swap(reserve_, other->reserve_);
  tradingday_.Swap(&other->tradingday_);
  std::swap(settlementid_, other->settlementid_);
  std::swap(credit_, other->credit_);
  std::swap(mortgage_, other->mortgage_);
  std::swap(exchangemargin_, other->exchangemargin_);
  std::swap(deliverymargin_, other->deliverymargin_);
  std::swap(exchangedeliverymargin_, other->exchangedeliverymargin_);
  std::swap(reservebalance_, other->reservebalance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgQueryRspFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgQueryRspFund_descriptor_;
  metadata.reflection = PBMsgQueryRspFund_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgQueryRspFund

// optional int32 EOF = 1;
void PBMsgQueryRspFund::clear_eof() {
  eof_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspFund::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.EOF)
  return eof_;
}
 void PBMsgQueryRspFund::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.EOF)
}

// optional string BrokerID = 2;
void PBMsgQueryRspFund::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspFund::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspFund::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}
 void PBMsgQueryRspFund::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}
 void PBMsgQueryRspFund::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}
 ::std::string* PBMsgQueryRspFund::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspFund::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspFund::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspFund.BrokerID)
}

// optional string AccountID = 3;
void PBMsgQueryRspFund::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspFund::accountid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.AccountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspFund::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}
 void PBMsgQueryRspFund::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}
 void PBMsgQueryRspFund::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}
 ::std::string* PBMsgQueryRspFund::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspFund.AccountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspFund::release_accountid() {
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspFund::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspFund.AccountID)
}

// optional double PreMortgage = 4;
void PBMsgQueryRspFund::clear_premortgage() {
  premortgage_ = 0;
}
 double PBMsgQueryRspFund::premortgage() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreMortgage)
  return premortgage_;
}
 void PBMsgQueryRspFund::set_premortgage(double value) {
  
  premortgage_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreMortgage)
}

// optional double PreCredit = 5;
void PBMsgQueryRspFund::clear_precredit() {
  precredit_ = 0;
}
 double PBMsgQueryRspFund::precredit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreCredit)
  return precredit_;
}
 void PBMsgQueryRspFund::set_precredit(double value) {
  
  precredit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreCredit)
}

// optional double PreDeposit = 6;
void PBMsgQueryRspFund::clear_predeposit() {
  predeposit_ = 0;
}
 double PBMsgQueryRspFund::predeposit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreDeposit)
  return predeposit_;
}
 void PBMsgQueryRspFund::set_predeposit(double value) {
  
  predeposit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreDeposit)
}

// optional double PreBalance = 7;
void PBMsgQueryRspFund::clear_prebalance() {
  prebalance_ = 0;
}
 double PBMsgQueryRspFund::prebalance() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreBalance)
  return prebalance_;
}
 void PBMsgQueryRspFund::set_prebalance(double value) {
  
  prebalance_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreBalance)
}

// optional double PreMargin = 8;
void PBMsgQueryRspFund::clear_premargin() {
  premargin_ = 0;
}
 double PBMsgQueryRspFund::premargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PreMargin)
  return premargin_;
}
 void PBMsgQueryRspFund::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PreMargin)
}

// optional double InterestBase = 9;
void PBMsgQueryRspFund::clear_interestbase() {
  interestbase_ = 0;
}
 double PBMsgQueryRspFund::interestbase() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.InterestBase)
  return interestbase_;
}
 void PBMsgQueryRspFund::set_interestbase(double value) {
  
  interestbase_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.InterestBase)
}

// optional double Interest = 10;
void PBMsgQueryRspFund::clear_interest() {
  interest_ = 0;
}
 double PBMsgQueryRspFund::interest() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Interest)
  return interest_;
}
 void PBMsgQueryRspFund::set_interest(double value) {
  
  interest_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Interest)
}

// optional double Deposit = 11;
void PBMsgQueryRspFund::clear_deposit() {
  deposit_ = 0;
}
 double PBMsgQueryRspFund::deposit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Deposit)
  return deposit_;
}
 void PBMsgQueryRspFund::set_deposit(double value) {
  
  deposit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Deposit)
}

// optional double Withdraw = 12;
void PBMsgQueryRspFund::clear_withdraw() {
  withdraw_ = 0;
}
 double PBMsgQueryRspFund::withdraw() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Withdraw)
  return withdraw_;
}
 void PBMsgQueryRspFund::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Withdraw)
}

// optional double FrozenMargin = 13;
void PBMsgQueryRspFund::clear_frozenmargin() {
  frozenmargin_ = 0;
}
 double PBMsgQueryRspFund::frozenmargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.FrozenMargin)
  return frozenmargin_;
}
 void PBMsgQueryRspFund::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.FrozenMargin)
}

// optional double FrozenCash = 14;
void PBMsgQueryRspFund::clear_frozencash() {
  frozencash_ = 0;
}
 double PBMsgQueryRspFund::frozencash() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.FrozenCash)
  return frozencash_;
}
 void PBMsgQueryRspFund::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.FrozenCash)
}

// optional double FrozenCommission = 15;
void PBMsgQueryRspFund::clear_frozencommission() {
  frozencommission_ = 0;
}
 double PBMsgQueryRspFund::frozencommission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.FrozenCommission)
  return frozencommission_;
}
 void PBMsgQueryRspFund::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.FrozenCommission)
}

// optional double CurrMargin = 16;
void PBMsgQueryRspFund::clear_currmargin() {
  currmargin_ = 0;
}
 double PBMsgQueryRspFund::currmargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.CurrMargin)
  return currmargin_;
}
 void PBMsgQueryRspFund::set_currmargin(double value) {
  
  currmargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.CurrMargin)
}

// optional double CashIn = 17;
void PBMsgQueryRspFund::clear_cashin() {
  cashin_ = 0;
}
 double PBMsgQueryRspFund::cashin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.CashIn)
  return cashin_;
}
 void PBMsgQueryRspFund::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.CashIn)
}

// optional double Commission = 18;
void PBMsgQueryRspFund::clear_commission() {
  commission_ = 0;
}
 double PBMsgQueryRspFund::commission() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Commission)
  return commission_;
}
 void PBMsgQueryRspFund::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Commission)
}

// optional double CloseProfit = 19;
void PBMsgQueryRspFund::clear_closeprofit() {
  closeprofit_ = 0;
}
 double PBMsgQueryRspFund::closeprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.CloseProfit)
  return closeprofit_;
}
 void PBMsgQueryRspFund::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.CloseProfit)
}

// optional double PositionProfit = 20;
void PBMsgQueryRspFund::clear_positionprofit() {
  positionprofit_ = 0;
}
 double PBMsgQueryRspFund::positionprofit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.PositionProfit)
  return positionprofit_;
}
 void PBMsgQueryRspFund::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.PositionProfit)
}

// optional double Balance = 21;
void PBMsgQueryRspFund::clear_balance() {
  balance_ = 0;
}
 double PBMsgQueryRspFund::balance() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Balance)
  return balance_;
}
 void PBMsgQueryRspFund::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Balance)
}

// optional double Available = 22;
void PBMsgQueryRspFund::clear_available() {
  available_ = 0;
}
 double PBMsgQueryRspFund::available() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Available)
  return available_;
}
 void PBMsgQueryRspFund::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Available)
}

// optional double WithdrawQuota = 23;
void PBMsgQueryRspFund::clear_withdrawquota() {
  withdrawquota_ = 0;
}
 double PBMsgQueryRspFund::withdrawquota() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.WithdrawQuota)
  return withdrawquota_;
}
 void PBMsgQueryRspFund::set_withdrawquota(double value) {
  
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.WithdrawQuota)
}

// optional double Reserve = 24;
void PBMsgQueryRspFund::clear_reserve() {
  reserve_ = 0;
}
 double PBMsgQueryRspFund::reserve() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Reserve)
  return reserve_;
}
 void PBMsgQueryRspFund::set_reserve(double value) {
  
  reserve_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Reserve)
}

// optional string TradingDay = 25;
void PBMsgQueryRspFund::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgQueryRspFund::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspFund::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}
 void PBMsgQueryRspFund::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}
 void PBMsgQueryRspFund::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}
 ::std::string* PBMsgQueryRspFund::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgQueryRspFund::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgQueryRspFund::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgQueryRspFund.TradingDay)
}

// optional int32 SettlementID = 26;
void PBMsgQueryRspFund::clear_settlementid() {
  settlementid_ = 0;
}
 ::google::protobuf::int32 PBMsgQueryRspFund::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.SettlementID)
  return settlementid_;
}
 void PBMsgQueryRspFund::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.SettlementID)
}

// optional double Credit = 27;
void PBMsgQueryRspFund::clear_credit() {
  credit_ = 0;
}
 double PBMsgQueryRspFund::credit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Credit)
  return credit_;
}
 void PBMsgQueryRspFund::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Credit)
}

// optional double Mortgage = 28;
void PBMsgQueryRspFund::clear_mortgage() {
  mortgage_ = 0;
}
 double PBMsgQueryRspFund::mortgage() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.Mortgage)
  return mortgage_;
}
 void PBMsgQueryRspFund::set_mortgage(double value) {
  
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.Mortgage)
}

// optional double ExchangeMargin = 29;
void PBMsgQueryRspFund::clear_exchangemargin() {
  exchangemargin_ = 0;
}
 double PBMsgQueryRspFund::exchangemargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.ExchangeMargin)
  return exchangemargin_;
}
 void PBMsgQueryRspFund::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.ExchangeMargin)
}

// optional double DeliveryMargin = 30;
void PBMsgQueryRspFund::clear_deliverymargin() {
  deliverymargin_ = 0;
}
 double PBMsgQueryRspFund::deliverymargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.DeliveryMargin)
  return deliverymargin_;
}
 void PBMsgQueryRspFund::set_deliverymargin(double value) {
  
  deliverymargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.DeliveryMargin)
}

// optional double ExchangeDeliveryMargin = 31;
void PBMsgQueryRspFund::clear_exchangedeliverymargin() {
  exchangedeliverymargin_ = 0;
}
 double PBMsgQueryRspFund::exchangedeliverymargin() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.ExchangeDeliveryMargin)
  return exchangedeliverymargin_;
}
 void PBMsgQueryRspFund::set_exchangedeliverymargin(double value) {
  
  exchangedeliverymargin_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.ExchangeDeliveryMargin)
}

// optional double ReserveBalance = 32;
void PBMsgQueryRspFund::clear_reservebalance() {
  reservebalance_ = 0;
}
 double PBMsgQueryRspFund::reservebalance() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgQueryRspFund.ReserveBalance)
  return reservebalance_;
}
 void PBMsgQueryRspFund::set_reservebalance(double value) {
  
  reservebalance_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgQueryRspFund.ReserveBalance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgOrderInsert::kBrokerIDFieldNumber;
const int PBMsgOrderInsert::kInvestorIDFieldNumber;
const int PBMsgOrderInsert::kInstrumentIDFieldNumber;
const int PBMsgOrderInsert::kOrderRefFieldNumber;
const int PBMsgOrderInsert::kUserIDFieldNumber;
const int PBMsgOrderInsert::kOrderPriceTypeFieldNumber;
const int PBMsgOrderInsert::kDirectionFieldNumber;
const int PBMsgOrderInsert::kCombOffsetFlagFieldNumber;
const int PBMsgOrderInsert::kCombHedgeFlagFieldNumber;
const int PBMsgOrderInsert::kLimitPriceFieldNumber;
const int PBMsgOrderInsert::kVolumeTotalOriginalFieldNumber;
const int PBMsgOrderInsert::kTimeConditionFieldNumber;
const int PBMsgOrderInsert::kGTDDateFieldNumber;
const int PBMsgOrderInsert::kVolumeConditionFieldNumber;
const int PBMsgOrderInsert::kMinVolumeFieldNumber;
const int PBMsgOrderInsert::kContingentConditionFieldNumber;
const int PBMsgOrderInsert::kStopPriceFieldNumber;
const int PBMsgOrderInsert::kForceCloseReasonFieldNumber;
const int PBMsgOrderInsert::kIsAutoSuspendFieldNumber;
const int PBMsgOrderInsert::kBusinessUnitFieldNumber;
const int PBMsgOrderInsert::kRequestIDFieldNumber;
const int PBMsgOrderInsert::kUserForceCloseFieldNumber;
const int PBMsgOrderInsert::kIsSwapOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgOrderInsert::PBMsgOrderInsert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgOrderInsert)
}

void PBMsgOrderInsert::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgOrderInsert::PBMsgOrderInsert(const PBMsgOrderInsert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgOrderInsert)
}

void PBMsgOrderInsert::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboffsetflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combhedgeflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  timecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minvolume_ = 0;
  contingentcondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopprice_ = 0;
  forceclosereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isautosuspend_ = 0;
  businessunit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  userforceclose_ = 0;
  isswaporder_ = 0;
}

PBMsgOrderInsert::~PBMsgOrderInsert() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgOrderInsert)
  SharedDtor();
}

void PBMsgOrderInsert::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboffsetflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combhedgeflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timecondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contingentcondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forceclosereason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgOrderInsert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgOrderInsert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgOrderInsert_descriptor_;
}

const PBMsgOrderInsert& PBMsgOrderInsert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgOrderInsert* PBMsgOrderInsert::default_instance_ = NULL;

PBMsgOrderInsert* PBMsgOrderInsert::New(::google::protobuf::Arena* arena) const {
  PBMsgOrderInsert* n = new PBMsgOrderInsert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgOrderInsert::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgOrderInsert*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboffsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(volumetotaloriginal_, minvolume_);
  combhedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitprice_ = 0;
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(isautosuspend_, isswaporder_);
  stopprice_ = 0;
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgOrderInsert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgOrderInsert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OrderRef;
        break;
      }

      // optional string OrderRef = 5;
      case 5: {
        if (tag == 42) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.OrderRef"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UserID;
        break;
      }

      // optional string UserID = 6;
      case 6: {
        if (tag == 50) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OrderPriceType;
        break;
      }

      // optional string OrderPriceType = 7;
      case 7: {
        if (tag == 58) {
         parse_OrderPriceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderpricetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderpricetype().data(), this->orderpricetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.OrderPriceType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Direction;
        break;
      }

      // optional string Direction = 8;
      case 8: {
        if (tag == 66) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.Direction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CombOffsetFlag;
        break;
      }

      // optional string CombOffsetFlag = 9;
      case 9: {
        if (tag == 74) {
         parse_CombOffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comboffsetflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comboffsetflag().data(), this->comboffsetflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_CombHedgeFlag;
        break;
      }

      // optional string CombHedgeFlag = 10;
      case 10: {
        if (tag == 82) {
         parse_CombHedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combhedgeflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->combhedgeflag().data(), this->combhedgeflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_LimitPrice;
        break;
      }

      // optional double LimitPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_VolumeTotalOriginal;
        break;
      }

      // optional int32 VolumeTotalOriginal = 12;
      case 12: {
        if (tag == 96) {
         parse_VolumeTotalOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_TimeCondition;
        break;
      }

      // optional string TimeCondition = 13;
      case 13: {
        if (tag == 106) {
         parse_TimeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timecondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timecondition().data(), this->timecondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.TimeCondition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_GTDDate;
        break;
      }

      // optional string GTDDate = 14;
      case 14: {
        if (tag == 114) {
         parse_GTDDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gtddate().data(), this->gtddate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.GTDDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_VolumeCondition;
        break;
      }

      // optional string VolumeCondition = 15;
      case 15: {
        if (tag == 122) {
         parse_VolumeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volumecondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volumecondition().data(), this->volumecondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.VolumeCondition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_MinVolume;
        break;
      }

      // optional int32 MinVolume = 16;
      case 16: {
        if (tag == 128) {
         parse_MinVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ContingentCondition;
        break;
      }

      // optional string ContingentCondition = 17;
      case 17: {
        if (tag == 138) {
         parse_ContingentCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contingentcondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contingentcondition().data(), this->contingentcondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.ContingentCondition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_StopPrice;
        break;
      }

      // optional double StopPrice = 18;
      case 18: {
        if (tag == 145) {
         parse_StopPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ForceCloseReason;
        break;
      }

      // optional string ForceCloseReason = 19;
      case 19: {
        if (tag == 154) {
         parse_ForceCloseReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forceclosereason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->forceclosereason().data(), this->forceclosereason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.ForceCloseReason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_IsAutoSuspend;
        break;
      }

      // optional int32 IsAutoSuspend = 20;
      case 20: {
        if (tag == 160) {
         parse_IsAutoSuspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautosuspend_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_BusinessUnit;
        break;
      }

      // optional string BusinessUnit = 21;
      case 21: {
        if (tag == 170) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderInsert.BusinessUnit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 22;
      case 22: {
        if (tag == 176) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_UserForceClose;
        break;
      }

      // optional int32 UserForceClose = 23;
      case 23: {
        if (tag == 184) {
         parse_UserForceClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userforceclose_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_IsSwapOrder;
        break;
      }

      // optional int32 IsSwapOrder = 24;
      case 24: {
        if (tag == 192) {
         parse_IsSwapOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isswaporder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgOrderInsert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgOrderInsert)
  return false;
#undef DO_
}

void PBMsgOrderInsert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgOrderInsert)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.OrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderref(), output);
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userid(), output);
  }

  // optional string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.OrderPriceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->orderpricetype(), output);
  }

  // optional string Direction = 8;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.Direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->direction(), output);
  }

  // optional string CombOffsetFlag = 9;
  if (this->comboffsetflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->comboffsetflag(), output);
  }

  // optional string CombHedgeFlag = 10;
  if (this->combhedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->combhedgeflag(), output);
  }

  // optional double LimitPrice = 11;
  if (this->limitprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->limitprice(), output);
  }

  // optional int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volumetotaloriginal(), output);
  }

  // optional string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timecondition().data(), this->timecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.TimeCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->timecondition(), output);
  }

  // optional string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.GTDDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->gtddate(), output);
  }

  // optional string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumecondition().data(), this->volumecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.VolumeCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->volumecondition(), output);
  }

  // optional int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->minvolume(), output);
  }

  // optional string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contingentcondition().data(), this->contingentcondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.ContingentCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->contingentcondition(), output);
  }

  // optional double StopPrice = 18;
  if (this->stopprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->stopprice(), output);
  }

  // optional string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forceclosereason().data(), this->forceclosereason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.ForceCloseReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->forceclosereason(), output);
  }

  // optional int32 IsAutoSuspend = 20;
  if (this->isautosuspend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->isautosuspend(), output);
  }

  // optional string BusinessUnit = 21;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.BusinessUnit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->businessunit(), output);
  }

  // optional int32 RequestID = 22;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->requestid(), output);
  }

  // optional int32 UserForceClose = 23;
  if (this->userforceclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->userforceclose(), output);
  }

  // optional int32 IsSwapOrder = 24;
  if (this->isswaporder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->isswaporder(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgOrderInsert)
}

::google::protobuf::uint8* PBMsgOrderInsert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgOrderInsert)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.OrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderref(), target);
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }

  // optional string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.OrderPriceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->orderpricetype(), target);
  }

  // optional string Direction = 8;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.Direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->direction(), target);
  }

  // optional string CombOffsetFlag = 9;
  if (this->comboffsetflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comboffsetflag(), target);
  }

  // optional string CombHedgeFlag = 10;
  if (this->combhedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->combhedgeflag(), target);
  }

  // optional double LimitPrice = 11;
  if (this->limitprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->limitprice(), target);
  }

  // optional int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volumetotaloriginal(), target);
  }

  // optional string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timecondition().data(), this->timecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.TimeCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->timecondition(), target);
  }

  // optional string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.GTDDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gtddate(), target);
  }

  // optional string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumecondition().data(), this->volumecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.VolumeCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->volumecondition(), target);
  }

  // optional int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->minvolume(), target);
  }

  // optional string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contingentcondition().data(), this->contingentcondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.ContingentCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->contingentcondition(), target);
  }

  // optional double StopPrice = 18;
  if (this->stopprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->stopprice(), target);
  }

  // optional string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forceclosereason().data(), this->forceclosereason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.ForceCloseReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->forceclosereason(), target);
  }

  // optional int32 IsAutoSuspend = 20;
  if (this->isautosuspend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->isautosuspend(), target);
  }

  // optional string BusinessUnit = 21;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderInsert.BusinessUnit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->businessunit(), target);
  }

  // optional int32 RequestID = 22;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->requestid(), target);
  }

  // optional int32 UserForceClose = 23;
  if (this->userforceclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->userforceclose(), target);
  }

  // optional int32 IsSwapOrder = 24;
  if (this->isswaporder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->isswaporder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgOrderInsert)
  return target;
}

int PBMsgOrderInsert::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderref());
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderpricetype());
  }

  // optional string Direction = 8;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->direction());
  }

  // optional string CombOffsetFlag = 9;
  if (this->comboffsetflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comboffsetflag());
  }

  // optional string CombHedgeFlag = 10;
  if (this->combhedgeflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->combhedgeflag());
  }

  // optional double LimitPrice = 11;
  if (this->limitprice() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetotaloriginal());
  }

  // optional string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timecondition());
  }

  // optional string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtddate());
  }

  // optional string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volumecondition());
  }

  // optional int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minvolume());
  }

  // optional string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contingentcondition());
  }

  // optional double StopPrice = 18;
  if (this->stopprice() != 0) {
    total_size += 2 + 8;
  }

  // optional string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->forceclosereason());
  }

  // optional int32 IsAutoSuspend = 20;
  if (this->isautosuspend() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isautosuspend());
  }

  // optional string BusinessUnit = 21;
  if (this->businessunit().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->businessunit());
  }

  // optional int32 RequestID = 22;
  if (this->requestid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // optional int32 UserForceClose = 23;
  if (this->userforceclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userforceclose());
  }

  // optional int32 IsSwapOrder = 24;
  if (this->isswaporder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isswaporder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgOrderInsert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgOrderInsert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgOrderInsert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgOrderInsert::MergeFrom(const PBMsgOrderInsert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.orderref().size() > 0) {

    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.orderpricetype().size() > 0) {

    orderpricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderpricetype_);
  }
  if (from.direction().size() > 0) {

    direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from.comboffsetflag().size() > 0) {

    comboffsetflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comboffsetflag_);
  }
  if (from.combhedgeflag().size() > 0) {

    combhedgeflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.combhedgeflag_);
  }
  if (from.limitprice() != 0) {
    set_limitprice(from.limitprice());
  }
  if (from.volumetotaloriginal() != 0) {
    set_volumetotaloriginal(from.volumetotaloriginal());
  }
  if (from.timecondition().size() > 0) {

    timecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timecondition_);
  }
  if (from.gtddate().size() > 0) {

    gtddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtddate_);
  }
  if (from.volumecondition().size() > 0) {

    volumecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volumecondition_);
  }
  if (from.minvolume() != 0) {
    set_minvolume(from.minvolume());
  }
  if (from.contingentcondition().size() > 0) {

    contingentcondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contingentcondition_);
  }
  if (from.stopprice() != 0) {
    set_stopprice(from.stopprice());
  }
  if (from.forceclosereason().size() > 0) {

    forceclosereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forceclosereason_);
  }
  if (from.isautosuspend() != 0) {
    set_isautosuspend(from.isautosuspend());
  }
  if (from.businessunit().size() > 0) {

    businessunit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.businessunit_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.userforceclose() != 0) {
    set_userforceclose(from.userforceclose());
  }
  if (from.isswaporder() != 0) {
    set_isswaporder(from.isswaporder());
  }
}

void PBMsgOrderInsert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgOrderInsert::CopyFrom(const PBMsgOrderInsert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgOrderInsert::IsInitialized() const {

  return true;
}

void PBMsgOrderInsert::Swap(PBMsgOrderInsert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgOrderInsert::InternalSwap(PBMsgOrderInsert* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  orderref_.Swap(&other->orderref_);
  userid_.Swap(&other->userid_);
  orderpricetype_.Swap(&other->orderpricetype_);
  direction_.Swap(&other->direction_);
  comboffsetflag_.Swap(&other->comboffsetflag_);
  combhedgeflag_.Swap(&other->combhedgeflag_);
  std::swap(limitprice_, other->limitprice_);
  std::swap(volumetotaloriginal_, other->volumetotaloriginal_);
  timecondition_.Swap(&other->timecondition_);
  gtddate_.Swap(&other->gtddate_);
  volumecondition_.Swap(&other->volumecondition_);
  std::swap(minvolume_, other->minvolume_);
  contingentcondition_.Swap(&other->contingentcondition_);
  std::swap(stopprice_, other->stopprice_);
  forceclosereason_.Swap(&other->forceclosereason_);
  std::swap(isautosuspend_, other->isautosuspend_);
  businessunit_.Swap(&other->businessunit_);
  std::swap(requestid_, other->requestid_);
  std::swap(userforceclose_, other->userforceclose_);
  std::swap(isswaporder_, other->isswaporder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgOrderInsert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgOrderInsert_descriptor_;
  metadata.reflection = PBMsgOrderInsert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgOrderInsert

// optional string BrokerID = 2;
void PBMsgOrderInsert::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}
 void PBMsgOrderInsert::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}
 void PBMsgOrderInsert::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}
 ::std::string* PBMsgOrderInsert::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgOrderInsert::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}
 void PBMsgOrderInsert::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}
 void PBMsgOrderInsert::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}
 ::std::string* PBMsgOrderInsert::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.InvestorID)
}

// optional string InstrumentID = 4;
void PBMsgOrderInsert::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}
 void PBMsgOrderInsert::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}
 void PBMsgOrderInsert::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}
 ::std::string* PBMsgOrderInsert::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.InstrumentID)
}

// optional string OrderRef = 5;
void PBMsgOrderInsert::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}
 void PBMsgOrderInsert::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}
 void PBMsgOrderInsert::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}
 ::std::string* PBMsgOrderInsert::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.OrderRef)
}

// optional string UserID = 6;
void PBMsgOrderInsert::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.UserID)
}
 void PBMsgOrderInsert::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.UserID)
}
 void PBMsgOrderInsert::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.UserID)
}
 ::std::string* PBMsgOrderInsert::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.UserID)
}

// optional string OrderPriceType = 7;
void PBMsgOrderInsert::clear_orderpricetype() {
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::orderpricetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
  return orderpricetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_orderpricetype(const ::std::string& value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}
 void PBMsgOrderInsert::set_orderpricetype(const char* value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}
 void PBMsgOrderInsert::set_orderpricetype(const char* value, size_t size) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}
 ::std::string* PBMsgOrderInsert::mutable_orderpricetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
  return orderpricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_orderpricetype() {
  
  return orderpricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_orderpricetype(::std::string* orderpricetype) {
  if (orderpricetype != NULL) {
    
  } else {
    
  }
  orderpricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderpricetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.OrderPriceType)
}

// optional string Direction = 8;
void PBMsgOrderInsert::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::direction() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.Direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.Direction)
}
 void PBMsgOrderInsert::set_direction(const char* value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.Direction)
}
 void PBMsgOrderInsert::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.Direction)
}
 ::std::string* PBMsgOrderInsert::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.Direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_direction() {
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.Direction)
}

// optional string CombOffsetFlag = 9;
void PBMsgOrderInsert::clear_comboffsetflag() {
  comboffsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::comboffsetflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
  return comboffsetflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_comboffsetflag(const ::std::string& value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}
 void PBMsgOrderInsert::set_comboffsetflag(const char* value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}
 void PBMsgOrderInsert::set_comboffsetflag(const char* value, size_t size) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}
 ::std::string* PBMsgOrderInsert::mutable_comboffsetflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
  return comboffsetflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_comboffsetflag() {
  
  return comboffsetflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_comboffsetflag(::std::string* comboffsetflag) {
  if (comboffsetflag != NULL) {
    
  } else {
    
  }
  comboffsetflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comboffsetflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.CombOffsetFlag)
}

// optional string CombHedgeFlag = 10;
void PBMsgOrderInsert::clear_combhedgeflag() {
  combhedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::combhedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
  return combhedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_combhedgeflag(const ::std::string& value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}
 void PBMsgOrderInsert::set_combhedgeflag(const char* value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}
 void PBMsgOrderInsert::set_combhedgeflag(const char* value, size_t size) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}
 ::std::string* PBMsgOrderInsert::mutable_combhedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
  return combhedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_combhedgeflag() {
  
  return combhedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_combhedgeflag(::std::string* combhedgeflag) {
  if (combhedgeflag != NULL) {
    
  } else {
    
  }
  combhedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combhedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.CombHedgeFlag)
}

// optional double LimitPrice = 11;
void PBMsgOrderInsert::clear_limitprice() {
  limitprice_ = 0;
}
 double PBMsgOrderInsert::limitprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.LimitPrice)
  return limitprice_;
}
 void PBMsgOrderInsert::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.LimitPrice)
}

// optional int32 VolumeTotalOriginal = 12;
void PBMsgOrderInsert::clear_volumetotaloriginal() {
  volumetotaloriginal_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderInsert::volumetotaloriginal() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.VolumeTotalOriginal)
  return volumetotaloriginal_;
}
 void PBMsgOrderInsert::set_volumetotaloriginal(::google::protobuf::int32 value) {
  
  volumetotaloriginal_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.VolumeTotalOriginal)
}

// optional string TimeCondition = 13;
void PBMsgOrderInsert::clear_timecondition() {
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::timecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
  return timecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_timecondition(const ::std::string& value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}
 void PBMsgOrderInsert::set_timecondition(const char* value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}
 void PBMsgOrderInsert::set_timecondition(const char* value, size_t size) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}
 ::std::string* PBMsgOrderInsert::mutable_timecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
  return timecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_timecondition() {
  
  return timecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_timecondition(::std::string* timecondition) {
  if (timecondition != NULL) {
    
  } else {
    
  }
  timecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.TimeCondition)
}

// optional string GTDDate = 14;
void PBMsgOrderInsert::clear_gtddate() {
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::gtddate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.GTDDate)
  return gtddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_gtddate(const ::std::string& value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}
 void PBMsgOrderInsert::set_gtddate(const char* value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}
 void PBMsgOrderInsert::set_gtddate(const char* value, size_t size) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}
 ::std::string* PBMsgOrderInsert::mutable_gtddate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.GTDDate)
  return gtddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_gtddate() {
  
  return gtddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_gtddate(::std::string* gtddate) {
  if (gtddate != NULL) {
    
  } else {
    
  }
  gtddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtddate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.GTDDate)
}

// optional string VolumeCondition = 15;
void PBMsgOrderInsert::clear_volumecondition() {
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::volumecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
  return volumecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_volumecondition(const ::std::string& value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}
 void PBMsgOrderInsert::set_volumecondition(const char* value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}
 void PBMsgOrderInsert::set_volumecondition(const char* value, size_t size) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}
 ::std::string* PBMsgOrderInsert::mutable_volumecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
  return volumecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_volumecondition() {
  
  return volumecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_volumecondition(::std::string* volumecondition) {
  if (volumecondition != NULL) {
    
  } else {
    
  }
  volumecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.VolumeCondition)
}

// optional int32 MinVolume = 16;
void PBMsgOrderInsert::clear_minvolume() {
  minvolume_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderInsert::minvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.MinVolume)
  return minvolume_;
}
 void PBMsgOrderInsert::set_minvolume(::google::protobuf::int32 value) {
  
  minvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.MinVolume)
}

// optional string ContingentCondition = 17;
void PBMsgOrderInsert::clear_contingentcondition() {
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::contingentcondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
  return contingentcondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_contingentcondition(const ::std::string& value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}
 void PBMsgOrderInsert::set_contingentcondition(const char* value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}
 void PBMsgOrderInsert::set_contingentcondition(const char* value, size_t size) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}
 ::std::string* PBMsgOrderInsert::mutable_contingentcondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
  return contingentcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_contingentcondition() {
  
  return contingentcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_contingentcondition(::std::string* contingentcondition) {
  if (contingentcondition != NULL) {
    
  } else {
    
  }
  contingentcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contingentcondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.ContingentCondition)
}

// optional double StopPrice = 18;
void PBMsgOrderInsert::clear_stopprice() {
  stopprice_ = 0;
}
 double PBMsgOrderInsert::stopprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.StopPrice)
  return stopprice_;
}
 void PBMsgOrderInsert::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.StopPrice)
}

// optional string ForceCloseReason = 19;
void PBMsgOrderInsert::clear_forceclosereason() {
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::forceclosereason() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
  return forceclosereason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_forceclosereason(const ::std::string& value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}
 void PBMsgOrderInsert::set_forceclosereason(const char* value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}
 void PBMsgOrderInsert::set_forceclosereason(const char* value, size_t size) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}
 ::std::string* PBMsgOrderInsert::mutable_forceclosereason() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
  return forceclosereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_forceclosereason() {
  
  return forceclosereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_forceclosereason(::std::string* forceclosereason) {
  if (forceclosereason != NULL) {
    
  } else {
    
  }
  forceclosereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forceclosereason);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.ForceCloseReason)
}

// optional int32 IsAutoSuspend = 20;
void PBMsgOrderInsert::clear_isautosuspend() {
  isautosuspend_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderInsert::isautosuspend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.IsAutoSuspend)
  return isautosuspend_;
}
 void PBMsgOrderInsert::set_isautosuspend(::google::protobuf::int32 value) {
  
  isautosuspend_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.IsAutoSuspend)
}

// optional string BusinessUnit = 21;
void PBMsgOrderInsert::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderInsert::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}
 void PBMsgOrderInsert::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}
 void PBMsgOrderInsert::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}
 ::std::string* PBMsgOrderInsert::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderInsert::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderInsert::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderInsert.BusinessUnit)
}

// optional int32 RequestID = 22;
void PBMsgOrderInsert::clear_requestid() {
  requestid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderInsert::requestid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.RequestID)
  return requestid_;
}
 void PBMsgOrderInsert::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.RequestID)
}

// optional int32 UserForceClose = 23;
void PBMsgOrderInsert::clear_userforceclose() {
  userforceclose_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderInsert::userforceclose() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.UserForceClose)
  return userforceclose_;
}
 void PBMsgOrderInsert::set_userforceclose(::google::protobuf::int32 value) {
  
  userforceclose_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.UserForceClose)
}

// optional int32 IsSwapOrder = 24;
void PBMsgOrderInsert::clear_isswaporder() {
  isswaporder_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderInsert::isswaporder() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderInsert.IsSwapOrder)
  return isswaporder_;
}
 void PBMsgOrderInsert::set_isswaporder(::google::protobuf::int32 value) {
  
  isswaporder_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderInsert.IsSwapOrder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgOrderAction::kBrokerIDFieldNumber;
const int PBMsgOrderAction::kInvestorIDFieldNumber;
const int PBMsgOrderAction::kOrderActionRefFieldNumber;
const int PBMsgOrderAction::kOrderRefFieldNumber;
const int PBMsgOrderAction::kRequestIDFieldNumber;
const int PBMsgOrderAction::kFrontIDFieldNumber;
const int PBMsgOrderAction::kSessionIDFieldNumber;
const int PBMsgOrderAction::kExchangeIDFieldNumber;
const int PBMsgOrderAction::kOrderSysIDFieldNumber;
const int PBMsgOrderAction::kActionFlagFieldNumber;
const int PBMsgOrderAction::kLimitPriceFieldNumber;
const int PBMsgOrderAction::kVolumeChangeFieldNumber;
const int PBMsgOrderAction::kActionDateFieldNumber;
const int PBMsgOrderAction::kActionTimeFieldNumber;
const int PBMsgOrderAction::kTraderIDFieldNumber;
const int PBMsgOrderAction::kInstallIDFieldNumber;
const int PBMsgOrderAction::kOrderLocalIDFieldNumber;
const int PBMsgOrderAction::kActionLocalIDFieldNumber;
const int PBMsgOrderAction::kParticipantIDFieldNumber;
const int PBMsgOrderAction::kClientIDFieldNumber;
const int PBMsgOrderAction::kBusinessUnitFieldNumber;
const int PBMsgOrderAction::kOrderActionStatusFieldNumber;
const int PBMsgOrderAction::kUserIDFieldNumber;
const int PBMsgOrderAction::kStatusMsgFieldNumber;
const int PBMsgOrderAction::kInstrumentIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgOrderAction::PBMsgOrderAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgOrderAction)
}

void PBMsgOrderAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgOrderAction::PBMsgOrderAction(const PBMsgOrderAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgOrderAction)
}

void PBMsgOrderAction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderactionref_ = 0;
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitprice_ = 0;
  volumechange_ = 0;
  actiondate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiontime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  installid_ = 0;
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderactionstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgOrderAction::~PBMsgOrderAction() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgOrderAction)
  SharedDtor();
}

void PBMsgOrderAction::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiondate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiontime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionlocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderactionstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgOrderAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgOrderAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgOrderAction_descriptor_;
}

const PBMsgOrderAction& PBMsgOrderAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgOrderAction* PBMsgOrderAction::default_instance_ = NULL;

PBMsgOrderAction* PBMsgOrderAction::New(::google::protobuf::Arena* arena) const {
  PBMsgOrderAction* n = new PBMsgOrderAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgOrderAction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgOrderAction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(orderactionref_, sessionid_);
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(volumechange_, installid_);
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitprice_ = 0;
  actiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiontime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderactionstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgOrderAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgOrderAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OrderActionRef;
        break;
      }

      // optional int32 OrderActionRef = 4;
      case 4: {
        if (tag == 32) {
         parse_OrderActionRef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderactionref_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OrderRef;
        break;
      }

      // optional string OrderRef = 5;
      case 5: {
        if (tag == 42) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.OrderRef"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 6;
      case 6: {
        if (tag == 48) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FrontID;
        break;
      }

      // optional int32 FrontID = 7;
      case 7: {
        if (tag == 56) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SessionID;
        break;
      }

      // optional int32 SessionID = 8;
      case 8: {
        if (tag == 64) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 9;
      case 9: {
        if (tag == 74) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OrderSysID;
        break;
      }

      // optional string OrderSysID = 10;
      case 10: {
        if (tag == 82) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.OrderSysID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ActionFlag;
        break;
      }

      // optional string ActionFlag = 11;
      case 11: {
        if (tag == 90) {
         parse_ActionFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actionflag().data(), this->actionflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ActionFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_LimitPrice;
        break;
      }

      // optional double LimitPrice = 12;
      case 12: {
        if (tag == 97) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_VolumeChange;
        break;
      }

      // optional int32 VolumeChange = 13;
      case 13: {
        if (tag == 104) {
         parse_VolumeChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumechange_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ActionDate;
        break;
      }

      // optional string ActionDate = 14;
      case 14: {
        if (tag == 114) {
         parse_ActionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actiondate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actiondate().data(), this->actiondate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ActionDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ActionTime;
        break;
      }

      // optional string ActionTime = 15;
      case 15: {
        if (tag == 122) {
         parse_ActionTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actiontime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actiontime().data(), this->actiontime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ActionTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_TraderID;
        break;
      }

      // optional string TraderID = 16;
      case 16: {
        if (tag == 130) {
         parse_TraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderid().data(), this->traderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.TraderID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_InstallID;
        break;
      }

      // optional int32 InstallID = 17;
      case 17: {
        if (tag == 136) {
         parse_InstallID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_OrderLocalID;
        break;
      }

      // optional string OrderLocalID = 18;
      case 18: {
        if (tag == 146) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.OrderLocalID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ActionLocalID;
        break;
      }

      // optional string ActionLocalID = 19;
      case 19: {
        if (tag == 154) {
         parse_ActionLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionlocalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actionlocalid().data(), this->actionlocalid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ActionLocalID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ParticipantID;
        break;
      }

      // optional string ParticipantID = 20;
      case 20: {
        if (tag == 162) {
         parse_ParticipantID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participantid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->participantid().data(), this->participantid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ParticipantID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_ClientID;
        break;
      }

      // optional string ClientID = 21;
      case 21: {
        if (tag == 170) {
         parse_ClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.ClientID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_BusinessUnit;
        break;
      }

      // optional string BusinessUnit = 22;
      case 22: {
        if (tag == 178) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.BusinessUnit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_OrderActionStatus;
        break;
      }

      // optional string OrderActionStatus = 23;
      case 23: {
        if (tag == 186) {
         parse_OrderActionStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderactionstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderactionstatus().data(), this->orderactionstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.OrderActionStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_UserID;
        break;
      }

      // optional string UserID = 24;
      case 24: {
        if (tag == 194) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_StatusMsg;
        break;
      }

      // optional bytes StatusMsg = 25;
      case 25: {
        if (tag == 202) {
         parse_StatusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_statusmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 26;
      case 26: {
        if (tag == 210) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderAction.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgOrderAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgOrderAction)
  return false;
#undef DO_
}

void PBMsgOrderAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgOrderAction)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional int32 OrderActionRef = 4;
  if (this->orderactionref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderactionref(), output);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderref(), output);
  }

  // optional int32 RequestID = 6;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->requestid(), output);
  }

  // optional int32 FrontID = 7;
  if (this->frontid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frontid(), output);
  }

  // optional int32 SessionID = 8;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sessionid(), output);
  }

  // optional string ExchangeID = 9;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exchangeid(), output);
  }

  // optional string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ordersysid(), output);
  }

  // optional string ActionFlag = 11;
  if (this->actionflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionflag().data(), this->actionflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->actionflag(), output);
  }

  // optional double LimitPrice = 12;
  if (this->limitprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->limitprice(), output);
  }

  // optional int32 VolumeChange = 13;
  if (this->volumechange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->volumechange(), output);
  }

  // optional string ActionDate = 14;
  if (this->actiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actiondate().data(), this->actiondate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->actiondate(), output);
  }

  // optional string ActionTime = 15;
  if (this->actiontime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actiontime().data(), this->actiontime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->actiontime(), output);
  }

  // optional string TraderID = 16;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.TraderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->traderid(), output);
  }

  // optional int32 InstallID = 17;
  if (this->installid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->installid(), output);
  }

  // optional string OrderLocalID = 18;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderLocalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->orderlocalid(), output);
  }

  // optional string ActionLocalID = 19;
  if (this->actionlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionlocalid().data(), this->actionlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionLocalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->actionlocalid(), output);
  }

  // optional string ParticipantID = 20;
  if (this->participantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ParticipantID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->participantid(), output);
  }

  // optional string ClientID = 21;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->clientid(), output);
  }

  // optional string BusinessUnit = 22;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.BusinessUnit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->businessunit(), output);
  }

  // optional string OrderActionStatus = 23;
  if (this->orderactionstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderactionstatus().data(), this->orderactionstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderActionStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->orderactionstatus(), output);
  }

  // optional string UserID = 24;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->userid(), output);
  }

  // optional bytes StatusMsg = 25;
  if (this->statusmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->statusmsg(), output);
  }

  // optional string InstrumentID = 26;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->instrumentid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgOrderAction)
}

::google::protobuf::uint8* PBMsgOrderAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgOrderAction)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional int32 OrderActionRef = 4;
  if (this->orderactionref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderactionref(), target);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderref(), target);
  }

  // optional int32 RequestID = 6;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->requestid(), target);
  }

  // optional int32 FrontID = 7;
  if (this->frontid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frontid(), target);
  }

  // optional int32 SessionID = 8;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sessionid(), target);
  }

  // optional string ExchangeID = 9;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exchangeid(), target);
  }

  // optional string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ordersysid(), target);
  }

  // optional string ActionFlag = 11;
  if (this->actionflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionflag().data(), this->actionflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->actionflag(), target);
  }

  // optional double LimitPrice = 12;
  if (this->limitprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->limitprice(), target);
  }

  // optional int32 VolumeChange = 13;
  if (this->volumechange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->volumechange(), target);
  }

  // optional string ActionDate = 14;
  if (this->actiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actiondate().data(), this->actiondate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->actiondate(), target);
  }

  // optional string ActionTime = 15;
  if (this->actiontime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actiontime().data(), this->actiontime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->actiontime(), target);
  }

  // optional string TraderID = 16;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.TraderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->traderid(), target);
  }

  // optional int32 InstallID = 17;
  if (this->installid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->installid(), target);
  }

  // optional string OrderLocalID = 18;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderLocalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->orderlocalid(), target);
  }

  // optional string ActionLocalID = 19;
  if (this->actionlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actionlocalid().data(), this->actionlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ActionLocalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->actionlocalid(), target);
  }

  // optional string ParticipantID = 20;
  if (this->participantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ParticipantID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->participantid(), target);
  }

  // optional string ClientID = 21;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->clientid(), target);
  }

  // optional string BusinessUnit = 22;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.BusinessUnit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->businessunit(), target);
  }

  // optional string OrderActionStatus = 23;
  if (this->orderactionstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderactionstatus().data(), this->orderactionstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.OrderActionStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->orderactionstatus(), target);
  }

  // optional string UserID = 24;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->userid(), target);
  }

  // optional bytes StatusMsg = 25;
  if (this->statusmsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->statusmsg(), target);
  }

  // optional string InstrumentID = 26;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderAction.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->instrumentid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgOrderAction)
  return target;
}

int PBMsgOrderAction::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional int32 OrderActionRef = 4;
  if (this->orderactionref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderactionref());
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderref());
  }

  // optional int32 RequestID = 6;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // optional int32 FrontID = 7;
  if (this->frontid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontid());
  }

  // optional int32 SessionID = 8;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  // optional string ExchangeID = 9;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersysid());
  }

  // optional string ActionFlag = 11;
  if (this->actionflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actionflag());
  }

  // optional double LimitPrice = 12;
  if (this->limitprice() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 VolumeChange = 13;
  if (this->volumechange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumechange());
  }

  // optional string ActionDate = 14;
  if (this->actiondate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actiondate());
  }

  // optional string ActionTime = 15;
  if (this->actiontime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actiontime());
  }

  // optional string TraderID = 16;
  if (this->traderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderid());
  }

  // optional int32 InstallID = 17;
  if (this->installid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->installid());
  }

  // optional string OrderLocalID = 18;
  if (this->orderlocalid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderlocalid());
  }

  // optional string ActionLocalID = 19;
  if (this->actionlocalid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actionlocalid());
  }

  // optional string ParticipantID = 20;
  if (this->participantid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->participantid());
  }

  // optional string ClientID = 21;
  if (this->clientid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  // optional string BusinessUnit = 22;
  if (this->businessunit().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->businessunit());
  }

  // optional string OrderActionStatus = 23;
  if (this->orderactionstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderactionstatus());
  }

  // optional string UserID = 24;
  if (this->userid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional bytes StatusMsg = 25;
  if (this->statusmsg().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->statusmsg());
  }

  // optional string InstrumentID = 26;
  if (this->instrumentid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgOrderAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgOrderAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgOrderAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgOrderAction::MergeFrom(const PBMsgOrderAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.orderactionref() != 0) {
    set_orderactionref(from.orderactionref());
  }
  if (from.orderref().size() > 0) {

    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.frontid() != 0) {
    set_frontid(from.frontid());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.ordersysid().size() > 0) {

    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  if (from.actionflag().size() > 0) {

    actionflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actionflag_);
  }
  if (from.limitprice() != 0) {
    set_limitprice(from.limitprice());
  }
  if (from.volumechange() != 0) {
    set_volumechange(from.volumechange());
  }
  if (from.actiondate().size() > 0) {

    actiondate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actiondate_);
  }
  if (from.actiontime().size() > 0) {

    actiontime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actiontime_);
  }
  if (from.traderid().size() > 0) {

    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  if (from.installid() != 0) {
    set_installid(from.installid());
  }
  if (from.orderlocalid().size() > 0) {

    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  if (from.actionlocalid().size() > 0) {

    actionlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actionlocalid_);
  }
  if (from.participantid().size() > 0) {

    participantid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.participantid_);
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.businessunit().size() > 0) {

    businessunit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.businessunit_);
  }
  if (from.orderactionstatus().size() > 0) {

    orderactionstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderactionstatus_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.statusmsg().size() > 0) {

    statusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmsg_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
}

void PBMsgOrderAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgOrderAction::CopyFrom(const PBMsgOrderAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgOrderAction::IsInitialized() const {

  return true;
}

void PBMsgOrderAction::Swap(PBMsgOrderAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgOrderAction::InternalSwap(PBMsgOrderAction* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  std::swap(orderactionref_, other->orderactionref_);
  orderref_.Swap(&other->orderref_);
  std::swap(requestid_, other->requestid_);
  std::swap(frontid_, other->frontid_);
  std::swap(sessionid_, other->sessionid_);
  exchangeid_.Swap(&other->exchangeid_);
  ordersysid_.Swap(&other->ordersysid_);
  actionflag_.Swap(&other->actionflag_);
  std::swap(limitprice_, other->limitprice_);
  std::swap(volumechange_, other->volumechange_);
  actiondate_.Swap(&other->actiondate_);
  actiontime_.Swap(&other->actiontime_);
  traderid_.Swap(&other->traderid_);
  std::swap(installid_, other->installid_);
  orderlocalid_.Swap(&other->orderlocalid_);
  actionlocalid_.Swap(&other->actionlocalid_);
  participantid_.Swap(&other->participantid_);
  clientid_.Swap(&other->clientid_);
  businessunit_.Swap(&other->businessunit_);
  orderactionstatus_.Swap(&other->orderactionstatus_);
  userid_.Swap(&other->userid_);
  statusmsg_.Swap(&other->statusmsg_);
  instrumentid_.Swap(&other->instrumentid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgOrderAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgOrderAction_descriptor_;
  metadata.reflection = PBMsgOrderAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgOrderAction

// optional string BrokerID = 2;
void PBMsgOrderAction::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.BrokerID)
}
 void PBMsgOrderAction::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.BrokerID)
}
 void PBMsgOrderAction::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.BrokerID)
}
 ::std::string* PBMsgOrderAction::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgOrderAction::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.InvestorID)
}
 void PBMsgOrderAction::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.InvestorID)
}
 void PBMsgOrderAction::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.InvestorID)
}
 ::std::string* PBMsgOrderAction::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.InvestorID)
}

// optional int32 OrderActionRef = 4;
void PBMsgOrderAction::clear_orderactionref() {
  orderactionref_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderAction::orderactionref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderActionRef)
  return orderactionref_;
}
 void PBMsgOrderAction::set_orderactionref(::google::protobuf::int32 value) {
  
  orderactionref_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderActionRef)
}

// optional string OrderRef = 5;
void PBMsgOrderAction::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderRef)
}
 void PBMsgOrderAction::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderRef)
}
 void PBMsgOrderAction::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderRef)
}
 ::std::string* PBMsgOrderAction::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderRef)
}

// optional int32 RequestID = 6;
void PBMsgOrderAction::clear_requestid() {
  requestid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderAction::requestid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.RequestID)
  return requestid_;
}
 void PBMsgOrderAction::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.RequestID)
}

// optional int32 FrontID = 7;
void PBMsgOrderAction::clear_frontid() {
  frontid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderAction::frontid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.FrontID)
  return frontid_;
}
 void PBMsgOrderAction::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.FrontID)
}

// optional int32 SessionID = 8;
void PBMsgOrderAction::clear_sessionid() {
  sessionid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderAction::sessionid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.SessionID)
  return sessionid_;
}
 void PBMsgOrderAction::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.SessionID)
}

// optional string ExchangeID = 9;
void PBMsgOrderAction::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}
 void PBMsgOrderAction::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}
 void PBMsgOrderAction::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}
 ::std::string* PBMsgOrderAction::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ExchangeID)
}

// optional string OrderSysID = 10;
void PBMsgOrderAction::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}
 void PBMsgOrderAction::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}
 void PBMsgOrderAction::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}
 ::std::string* PBMsgOrderAction::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderSysID)
}

// optional string ActionFlag = 11;
void PBMsgOrderAction::clear_actionflag() {
  actionflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::actionflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionFlag)
  return actionflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_actionflag(const ::std::string& value) {
  
  actionflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}
 void PBMsgOrderAction::set_actionflag(const char* value) {
  
  actionflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}
 void PBMsgOrderAction::set_actionflag(const char* value, size_t size) {
  
  actionflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}
 ::std::string* PBMsgOrderAction::mutable_actionflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionFlag)
  return actionflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_actionflag() {
  
  return actionflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_actionflag(::std::string* actionflag) {
  if (actionflag != NULL) {
    
  } else {
    
  }
  actionflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actionflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionFlag)
}

// optional double LimitPrice = 12;
void PBMsgOrderAction::clear_limitprice() {
  limitprice_ = 0;
}
 double PBMsgOrderAction::limitprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.LimitPrice)
  return limitprice_;
}
 void PBMsgOrderAction::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.LimitPrice)
}

// optional int32 VolumeChange = 13;
void PBMsgOrderAction::clear_volumechange() {
  volumechange_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderAction::volumechange() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.VolumeChange)
  return volumechange_;
}
 void PBMsgOrderAction::set_volumechange(::google::protobuf::int32 value) {
  
  volumechange_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.VolumeChange)
}

// optional string ActionDate = 14;
void PBMsgOrderAction::clear_actiondate() {
  actiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::actiondate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionDate)
  return actiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_actiondate(const ::std::string& value) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionDate)
}
 void PBMsgOrderAction::set_actiondate(const char* value) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionDate)
}
 void PBMsgOrderAction::set_actiondate(const char* value, size_t size) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionDate)
}
 ::std::string* PBMsgOrderAction::mutable_actiondate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionDate)
  return actiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_actiondate() {
  
  return actiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_actiondate(::std::string* actiondate) {
  if (actiondate != NULL) {
    
  } else {
    
  }
  actiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actiondate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionDate)
}

// optional string ActionTime = 15;
void PBMsgOrderAction::clear_actiontime() {
  actiontime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::actiontime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionTime)
  return actiontime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_actiontime(const ::std::string& value) {
  
  actiontime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionTime)
}
 void PBMsgOrderAction::set_actiontime(const char* value) {
  
  actiontime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionTime)
}
 void PBMsgOrderAction::set_actiontime(const char* value, size_t size) {
  
  actiontime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionTime)
}
 ::std::string* PBMsgOrderAction::mutable_actiontime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionTime)
  return actiontime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_actiontime() {
  
  return actiontime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_actiontime(::std::string* actiontime) {
  if (actiontime != NULL) {
    
  } else {
    
  }
  actiontime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actiontime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionTime)
}

// optional string TraderID = 16;
void PBMsgOrderAction::clear_traderid() {
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::traderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.TraderID)
  return traderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_traderid(const ::std::string& value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.TraderID)
}
 void PBMsgOrderAction::set_traderid(const char* value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.TraderID)
}
 void PBMsgOrderAction::set_traderid(const char* value, size_t size) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.TraderID)
}
 ::std::string* PBMsgOrderAction::mutable_traderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.TraderID)
  return traderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_traderid() {
  
  return traderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_traderid(::std::string* traderid) {
  if (traderid != NULL) {
    
  } else {
    
  }
  traderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.TraderID)
}

// optional int32 InstallID = 17;
void PBMsgOrderAction::clear_installid() {
  installid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderAction::installid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.InstallID)
  return installid_;
}
 void PBMsgOrderAction::set_installid(::google::protobuf::int32 value) {
  
  installid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.InstallID)
}

// optional string OrderLocalID = 18;
void PBMsgOrderAction::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::orderlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
  return orderlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}
 void PBMsgOrderAction::set_orderlocalid(const char* value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}
 void PBMsgOrderAction::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}
 ::std::string* PBMsgOrderAction::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_orderlocalid() {
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderLocalID)
}

// optional string ActionLocalID = 19;
void PBMsgOrderAction::clear_actionlocalid() {
  actionlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::actionlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
  return actionlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_actionlocalid(const ::std::string& value) {
  
  actionlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}
 void PBMsgOrderAction::set_actionlocalid(const char* value) {
  
  actionlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}
 void PBMsgOrderAction::set_actionlocalid(const char* value, size_t size) {
  
  actionlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}
 ::std::string* PBMsgOrderAction::mutable_actionlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
  return actionlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_actionlocalid() {
  
  return actionlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_actionlocalid(::std::string* actionlocalid) {
  if (actionlocalid != NULL) {
    
  } else {
    
  }
  actionlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actionlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ActionLocalID)
}

// optional string ParticipantID = 20;
void PBMsgOrderAction::clear_participantid() {
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::participantid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ParticipantID)
  return participantid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_participantid(const ::std::string& value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}
 void PBMsgOrderAction::set_participantid(const char* value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}
 void PBMsgOrderAction::set_participantid(const char* value, size_t size) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}
 ::std::string* PBMsgOrderAction::mutable_participantid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ParticipantID)
  return participantid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_participantid() {
  
  return participantid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_participantid(::std::string* participantid) {
  if (participantid != NULL) {
    
  } else {
    
  }
  participantid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participantid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ParticipantID)
}

// optional string ClientID = 21;
void PBMsgOrderAction::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::clientid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.ClientID)
}
 void PBMsgOrderAction::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.ClientID)
}
 void PBMsgOrderAction::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.ClientID)
}
 ::std::string* PBMsgOrderAction::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_clientid() {
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.ClientID)
}

// optional string BusinessUnit = 22;
void PBMsgOrderAction::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}
 void PBMsgOrderAction::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}
 void PBMsgOrderAction::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}
 ::std::string* PBMsgOrderAction::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.BusinessUnit)
}

// optional string OrderActionStatus = 23;
void PBMsgOrderAction::clear_orderactionstatus() {
  orderactionstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::orderactionstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
  return orderactionstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_orderactionstatus(const ::std::string& value) {
  
  orderactionstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}
 void PBMsgOrderAction::set_orderactionstatus(const char* value) {
  
  orderactionstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}
 void PBMsgOrderAction::set_orderactionstatus(const char* value, size_t size) {
  
  orderactionstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}
 ::std::string* PBMsgOrderAction::mutable_orderactionstatus() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
  return orderactionstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_orderactionstatus() {
  
  return orderactionstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_orderactionstatus(::std::string* orderactionstatus) {
  if (orderactionstatus != NULL) {
    
  } else {
    
  }
  orderactionstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderactionstatus);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.OrderActionStatus)
}

// optional string UserID = 24;
void PBMsgOrderAction::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.UserID)
}
 void PBMsgOrderAction::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.UserID)
}
 void PBMsgOrderAction::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.UserID)
}
 ::std::string* PBMsgOrderAction::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.UserID)
}

// optional bytes StatusMsg = 25;
void PBMsgOrderAction::clear_statusmsg() {
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::statusmsg() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.StatusMsg)
  return statusmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_statusmsg(const ::std::string& value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}
 void PBMsgOrderAction::set_statusmsg(const char* value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}
 void PBMsgOrderAction::set_statusmsg(const void* value, size_t size) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}
 ::std::string* PBMsgOrderAction::mutable_statusmsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.StatusMsg)
  return statusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_statusmsg() {
  
  return statusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg != NULL) {
    
  } else {
    
  }
  statusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmsg);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.StatusMsg)
}

// optional string InstrumentID = 26;
void PBMsgOrderAction::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderAction::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderAction.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}
 void PBMsgOrderAction::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}
 void PBMsgOrderAction::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}
 ::std::string* PBMsgOrderAction::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderAction.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderAction::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderAction::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderAction.InstrumentID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgOrderRtn::kEOFFieldNumber;
const int PBMsgOrderRtn::kBrokerIDFieldNumber;
const int PBMsgOrderRtn::kInvestorIDFieldNumber;
const int PBMsgOrderRtn::kInstrumentIDFieldNumber;
const int PBMsgOrderRtn::kOrderRefFieldNumber;
const int PBMsgOrderRtn::kUserIDFieldNumber;
const int PBMsgOrderRtn::kOrderPriceTypeFieldNumber;
const int PBMsgOrderRtn::kDirectionFieldNumber;
const int PBMsgOrderRtn::kCombOffsetFlagFieldNumber;
const int PBMsgOrderRtn::kCombHedgeFlagFieldNumber;
const int PBMsgOrderRtn::kLimitPriceFieldNumber;
const int PBMsgOrderRtn::kVolumeTotalOriginalFieldNumber;
const int PBMsgOrderRtn::kTimeConditionFieldNumber;
const int PBMsgOrderRtn::kGTDDateFieldNumber;
const int PBMsgOrderRtn::kVolumeConditionFieldNumber;
const int PBMsgOrderRtn::kMinVolumeFieldNumber;
const int PBMsgOrderRtn::kContingentConditionFieldNumber;
const int PBMsgOrderRtn::kStopPriceFieldNumber;
const int PBMsgOrderRtn::kForceCloseReasonFieldNumber;
const int PBMsgOrderRtn::kIsAutoSuspendFieldNumber;
const int PBMsgOrderRtn::kBusinessUnitFieldNumber;
const int PBMsgOrderRtn::kRequestIDFieldNumber;
const int PBMsgOrderRtn::kOrderLocalIDFieldNumber;
const int PBMsgOrderRtn::kExchangeIDFieldNumber;
const int PBMsgOrderRtn::kParticipantIDFieldNumber;
const int PBMsgOrderRtn::kClientIDFieldNumber;
const int PBMsgOrderRtn::kExchangeInstIDFieldNumber;
const int PBMsgOrderRtn::kTraderIDFieldNumber;
const int PBMsgOrderRtn::kInstallIDFieldNumber;
const int PBMsgOrderRtn::kOrderSubmitStatusFieldNumber;
const int PBMsgOrderRtn::kNotifySequenceFieldNumber;
const int PBMsgOrderRtn::kTradingDayFieldNumber;
const int PBMsgOrderRtn::kSettlementIDFieldNumber;
const int PBMsgOrderRtn::kOrderSysIDFieldNumber;
const int PBMsgOrderRtn::kOrderSourceFieldNumber;
const int PBMsgOrderRtn::kOrderStatusFieldNumber;
const int PBMsgOrderRtn::kOrderTypeFieldNumber;
const int PBMsgOrderRtn::kVolumeTradedFieldNumber;
const int PBMsgOrderRtn::kVolumeTotalFieldNumber;
const int PBMsgOrderRtn::kInsertDateFieldNumber;
const int PBMsgOrderRtn::kInsertTimeFieldNumber;
const int PBMsgOrderRtn::kActiveTimeFieldNumber;
const int PBMsgOrderRtn::kSuspendTimeFieldNumber;
const int PBMsgOrderRtn::kUpdateTimeFieldNumber;
const int PBMsgOrderRtn::kCancelTimeFieldNumber;
const int PBMsgOrderRtn::kActiveTraderIDFieldNumber;
const int PBMsgOrderRtn::kClearingPartIDFieldNumber;
const int PBMsgOrderRtn::kSequenceNoFieldNumber;
const int PBMsgOrderRtn::kFrontIDFieldNumber;
const int PBMsgOrderRtn::kSessionIDFieldNumber;
const int PBMsgOrderRtn::kUserProductInfoFieldNumber;
const int PBMsgOrderRtn::kStatusMsgFieldNumber;
const int PBMsgOrderRtn::kUserForceCloseFieldNumber;
const int PBMsgOrderRtn::kActiveUserIDFieldNumber;
const int PBMsgOrderRtn::kBrokerOrderSeqFieldNumber;
const int PBMsgOrderRtn::kRelativeOrderSysIDFieldNumber;
const int PBMsgOrderRtn::kZCETotalTradedVolumeFieldNumber;
const int PBMsgOrderRtn::kIsSwapOrderFieldNumber;
const int PBMsgOrderRtn::kIOrderStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgOrderRtn::PBMsgOrderRtn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgOrderRtn)
}

void PBMsgOrderRtn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgOrderRtn::PBMsgOrderRtn(const PBMsgOrderRtn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgOrderRtn)
}

void PBMsgOrderRtn::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eof_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboffsetflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combhedgeflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  timecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minvolume_ = 0;
  contingentcondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopprice_ = 0;
  forceclosereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isautosuspend_ = 0;
  businessunit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  installid_ = 0;
  ordersubmitstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notifysequence_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumetraded_ = 0;
  volumetotal_ = 0;
  insertdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suspendtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetraderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearingpartid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequenceno_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  userproductinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userforceclose_ = 0;
  activeuserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerorderseq_ = 0;
  relativeordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zcetotaltradedvolume_ = 0;
  isswaporder_ = 0;
  iorderstatus_ = 0;
}

PBMsgOrderRtn::~PBMsgOrderRtn() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgOrderRtn)
  SharedDtor();
}

void PBMsgOrderRtn::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboffsetflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combhedgeflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timecondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contingentcondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forceclosereason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersubmitstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suspendtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetraderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearingpartid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activeuserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relativeordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgOrderRtn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgOrderRtn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgOrderRtn_descriptor_;
}

const PBMsgOrderRtn& PBMsgOrderRtn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgOrderRtn* PBMsgOrderRtn::default_instance_ = NULL;

PBMsgOrderRtn* PBMsgOrderRtn::New(::google::protobuf::Arena* arena) const {
  PBMsgOrderRtn* n = new PBMsgOrderRtn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgOrderRtn::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgOrderRtn*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  eof_ = 0;
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboffsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combhedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minvolume_ = 0;
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stopprice_ = 0;
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isautosuspend_ = 0;
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  installid_ = 0;
  ordersubmitstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notifysequence_ = 0;
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(volumetraded_, volumetotal_);
  settlementid_ = 0;
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suspendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetraderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearingpartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequenceno_ = 0;
  ZR_(sessionid_, userforceclose_);
  frontid_ = 0;
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activeuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerorderseq_ = 0;
  relativeordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(zcetotaltradedvolume_, iorderstatus_);

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgOrderRtn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgOrderRtn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EOF = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }

      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OrderRef;
        break;
      }

      // optional string OrderRef = 5;
      case 5: {
        if (tag == 42) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderRef"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UserID;
        break;
      }

      // optional string UserID = 6;
      case 6: {
        if (tag == 50) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OrderPriceType;
        break;
      }

      // optional string OrderPriceType = 7;
      case 7: {
        if (tag == 58) {
         parse_OrderPriceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderpricetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderpricetype().data(), this->orderpricetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderPriceType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Direction;
        break;
      }

      // optional string Direction = 8;
      case 8: {
        if (tag == 66) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.Direction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CombOffsetFlag;
        break;
      }

      // optional string CombOffsetFlag = 9;
      case 9: {
        if (tag == 74) {
         parse_CombOffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comboffsetflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comboffsetflag().data(), this->comboffsetflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_CombHedgeFlag;
        break;
      }

      // optional string CombHedgeFlag = 10;
      case 10: {
        if (tag == 82) {
         parse_CombHedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combhedgeflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->combhedgeflag().data(), this->combhedgeflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_LimitPrice;
        break;
      }

      // optional double LimitPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_VolumeTotalOriginal;
        break;
      }

      // optional int32 VolumeTotalOriginal = 12;
      case 12: {
        if (tag == 96) {
         parse_VolumeTotalOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_TimeCondition;
        break;
      }

      // optional string TimeCondition = 13;
      case 13: {
        if (tag == 106) {
         parse_TimeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timecondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timecondition().data(), this->timecondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.TimeCondition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_GTDDate;
        break;
      }

      // optional string GTDDate = 14;
      case 14: {
        if (tag == 114) {
         parse_GTDDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gtddate().data(), this->gtddate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.GTDDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_VolumeCondition;
        break;
      }

      // optional string VolumeCondition = 15;
      case 15: {
        if (tag == 122) {
         parse_VolumeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volumecondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volumecondition().data(), this->volumecondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.VolumeCondition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_MinVolume;
        break;
      }

      // optional int32 MinVolume = 16;
      case 16: {
        if (tag == 128) {
         parse_MinVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ContingentCondition;
        break;
      }

      // optional string ContingentCondition = 17;
      case 17: {
        if (tag == 138) {
         parse_ContingentCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contingentcondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contingentcondition().data(), this->contingentcondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ContingentCondition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_StopPrice;
        break;
      }

      // optional double StopPrice = 18;
      case 18: {
        if (tag == 145) {
         parse_StopPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ForceCloseReason;
        break;
      }

      // optional string ForceCloseReason = 19;
      case 19: {
        if (tag == 154) {
         parse_ForceCloseReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forceclosereason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->forceclosereason().data(), this->forceclosereason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ForceCloseReason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_IsAutoSuspend;
        break;
      }

      // optional int32 IsAutoSuspend = 20;
      case 20: {
        if (tag == 160) {
         parse_IsAutoSuspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautosuspend_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_BusinessUnit;
        break;
      }

      // optional string BusinessUnit = 21;
      case 21: {
        if (tag == 170) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.BusinessUnit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 22;
      case 22: {
        if (tag == 176) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_OrderLocalID;
        break;
      }

      // optional string OrderLocalID = 23;
      case 23: {
        if (tag == 186) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderLocalID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 24;
      case 24: {
        if (tag == 194) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_ParticipantID;
        break;
      }

      // optional string ParticipantID = 25;
      case 25: {
        if (tag == 202) {
         parse_ParticipantID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participantid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->participantid().data(), this->participantid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ParticipantID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_ClientID;
        break;
      }

      // optional string ClientID = 26;
      case 26: {
        if (tag == 210) {
         parse_ClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ClientID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 27;
      case 27: {
        if (tag == 218) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ExchangeInstID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_TraderID;
        break;
      }

      // optional string TraderID = 28;
      case 28: {
        if (tag == 226) {
         parse_TraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderid().data(), this->traderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.TraderID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_InstallID;
        break;
      }

      // optional int32 InstallID = 29;
      case 29: {
        if (tag == 232) {
         parse_InstallID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_OrderSubmitStatus;
        break;
      }

      // optional string OrderSubmitStatus = 30;
      case 30: {
        if (tag == 242) {
         parse_OrderSubmitStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersubmitstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersubmitstatus().data(), this->ordersubmitstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_NotifySequence;
        break;
      }

      // optional int32 NotifySequence = 31;
      case 31: {
        if (tag == 248) {
         parse_NotifySequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notifysequence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 32;
      case 32: {
        if (tag == 258) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 33;
      case 33: {
        if (tag == 264) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_OrderSysID;
        break;
      }

      // optional string OrderSysID = 34;
      case 34: {
        if (tag == 274) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderSysID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_OrderSource;
        break;
      }

      // optional string OrderSource = 35;
      case 35: {
        if (tag == 282) {
         parse_OrderSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersource().data(), this->ordersource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderSource"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_OrderStatus;
        break;
      }

      // optional string OrderStatus = 36;
      case 36: {
        if (tag == 290) {
         parse_OrderStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderstatus().data(), this->orderstatus().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderStatus"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_OrderType;
        break;
      }

      // optional string OrderType = 37;
      case 37: {
        if (tag == 298) {
         parse_OrderType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordertype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordertype().data(), this->ordertype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.OrderType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_VolumeTraded;
        break;
      }

      // optional int32 VolumeTraded = 38;
      case 38: {
        if (tag == 304) {
         parse_VolumeTraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetraded_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_VolumeTotal;
        break;
      }

      // optional int32 VolumeTotal = 39;
      case 39: {
        if (tag == 312) {
         parse_VolumeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_InsertDate;
        break;
      }

      // optional string InsertDate = 40;
      case 40: {
        if (tag == 322) {
         parse_InsertDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->insertdate().data(), this->insertdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.InsertDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_InsertTime;
        break;
      }

      // optional string InsertTime = 41;
      case 41: {
        if (tag == 330) {
         parse_InsertTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inserttime().data(), this->inserttime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.InsertTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_ActiveTime;
        break;
      }

      // optional string ActiveTime = 42;
      case 42: {
        if (tag == 338) {
         parse_ActiveTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activetime().data(), this->activetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ActiveTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_SuspendTime;
        break;
      }

      // optional string SuspendTime = 43;
      case 43: {
        if (tag == 346) {
         parse_SuspendTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suspendtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suspendtime().data(), this->suspendtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.SuspendTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_UpdateTime;
        break;
      }

      // optional string UpdateTime = 44;
      case 44: {
        if (tag == 354) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.UpdateTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_CancelTime;
        break;
      }

      // optional string CancelTime = 45;
      case 45: {
        if (tag == 362) {
         parse_CancelTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canceltime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canceltime().data(), this->canceltime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.CancelTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_ActiveTraderID;
        break;
      }

      // optional string ActiveTraderID = 46;
      case 46: {
        if (tag == 370) {
         parse_ActiveTraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetraderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activetraderid().data(), this->activetraderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ActiveTraderID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_ClearingPartID;
        break;
      }

      // optional string ClearingPartID = 47;
      case 47: {
        if (tag == 378) {
         parse_ClearingPartID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearingpartid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clearingpartid().data(), this->clearingpartid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ClearingPartID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_SequenceNo;
        break;
      }

      // optional int32 SequenceNo = 48;
      case 48: {
        if (tag == 384) {
         parse_SequenceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_FrontID;
        break;
      }

      // optional int32 FrontID = 49;
      case 49: {
        if (tag == 392) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_SessionID;
        break;
      }

      // optional int32 SessionID = 50;
      case 50: {
        if (tag == 400) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_UserProductInfo;
        break;
      }

      // optional string UserProductInfo = 51;
      case 51: {
        if (tag == 410) {
         parse_UserProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userproductinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userproductinfo().data(), this->userproductinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.UserProductInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_StatusMsg;
        break;
      }

      // optional bytes StatusMsg = 52;
      case 52: {
        if (tag == 418) {
         parse_StatusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_statusmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_UserForceClose;
        break;
      }

      // optional int32 UserForceClose = 53;
      case 53: {
        if (tag == 424) {
         parse_UserForceClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userforceclose_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_ActiveUserID;
        break;
      }

      // optional string ActiveUserID = 54;
      case 54: {
        if (tag == 434) {
         parse_ActiveUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activeuserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activeuserid().data(), this->activeuserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.ActiveUserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_BrokerOrderSeq;
        break;
      }

      // optional int32 BrokerOrderSeq = 55;
      case 55: {
        if (tag == 440) {
         parse_BrokerOrderSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_RelativeOrderSysID;
        break;
      }

      // optional string RelativeOrderSysID = 56;
      case 56: {
        if (tag == 450) {
         parse_RelativeOrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativeordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->relativeordersysid().data(), this->relativeordersysid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_ZCETotalTradedVolume;
        break;
      }

      // optional int32 ZCETotalTradedVolume = 57;
      case 57: {
        if (tag == 456) {
         parse_ZCETotalTradedVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zcetotaltradedvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_IsSwapOrder;
        break;
      }

      // optional int32 IsSwapOrder = 58;
      case 58: {
        if (tag == 464) {
         parse_IsSwapOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isswaporder_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_IOrderStatus;
        break;
      }

      // optional int32 IOrderStatus = 59;
      case 59: {
        if (tag == 472) {
         parse_IOrderStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iorderstatus_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgOrderRtn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgOrderRtn)
  return false;
#undef DO_
}

void PBMsgOrderRtn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgOrderRtn)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eof(), output);
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderref(), output);
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userid(), output);
  }

  // optional string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderPriceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->orderpricetype(), output);
  }

  // optional string Direction = 8;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.Direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->direction(), output);
  }

  // optional string CombOffsetFlag = 9;
  if (this->comboffsetflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->comboffsetflag(), output);
  }

  // optional string CombHedgeFlag = 10;
  if (this->combhedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->combhedgeflag(), output);
  }

  // optional double LimitPrice = 11;
  if (this->limitprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->limitprice(), output);
  }

  // optional int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volumetotaloriginal(), output);
  }

  // optional string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timecondition().data(), this->timecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.TimeCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->timecondition(), output);
  }

  // optional string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.GTDDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->gtddate(), output);
  }

  // optional string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumecondition().data(), this->volumecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.VolumeCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->volumecondition(), output);
  }

  // optional int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->minvolume(), output);
  }

  // optional string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contingentcondition().data(), this->contingentcondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ContingentCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->contingentcondition(), output);
  }

  // optional double StopPrice = 18;
  if (this->stopprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->stopprice(), output);
  }

  // optional string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forceclosereason().data(), this->forceclosereason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ForceCloseReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->forceclosereason(), output);
  }

  // optional int32 IsAutoSuspend = 20;
  if (this->isautosuspend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->isautosuspend(), output);
  }

  // optional string BusinessUnit = 21;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.BusinessUnit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->businessunit(), output);
  }

  // optional int32 RequestID = 22;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->requestid(), output);
  }

  // optional string OrderLocalID = 23;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderLocalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->orderlocalid(), output);
  }

  // optional string ExchangeID = 24;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->exchangeid(), output);
  }

  // optional string ParticipantID = 25;
  if (this->participantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ParticipantID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->participantid(), output);
  }

  // optional string ClientID = 26;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->clientid(), output);
  }

  // optional string ExchangeInstID = 27;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ExchangeInstID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->exchangeinstid(), output);
  }

  // optional string TraderID = 28;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.TraderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->traderid(), output);
  }

  // optional int32 InstallID = 29;
  if (this->installid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->installid(), output);
  }

  // optional string OrderSubmitStatus = 30;
  if (this->ordersubmitstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersubmitstatus().data(), this->ordersubmitstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->ordersubmitstatus(), output);
  }

  // optional int32 NotifySequence = 31;
  if (this->notifysequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->notifysequence(), output);
  }

  // optional string TradingDay = 32;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->tradingday(), output);
  }

  // optional int32 SettlementID = 33;
  if (this->settlementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->settlementid(), output);
  }

  // optional string OrderSysID = 34;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->ordersysid(), output);
  }

  // optional string OrderSource = 35;
  if (this->ordersource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersource().data(), this->ordersource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->ordersource(), output);
  }

  // optional string OrderStatus = 36;
  if (this->orderstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->orderstatus(), output);
  }

  // optional string OrderType = 37;
  if (this->ordertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordertype().data(), this->ordertype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->ordertype(), output);
  }

  // optional int32 VolumeTraded = 38;
  if (this->volumetraded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->volumetraded(), output);
  }

  // optional int32 VolumeTotal = 39;
  if (this->volumetotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->volumetotal(), output);
  }

  // optional string InsertDate = 40;
  if (this->insertdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insertdate().data(), this->insertdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InsertDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->insertdate(), output);
  }

  // optional string InsertTime = 41;
  if (this->inserttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InsertTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->inserttime(), output);
  }

  // optional string ActiveTime = 42;
  if (this->activetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activetime().data(), this->activetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ActiveTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->activetime(), output);
  }

  // optional string SuspendTime = 43;
  if (this->suspendtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suspendtime().data(), this->suspendtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.SuspendTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->suspendtime(), output);
  }

  // optional string UpdateTime = 44;
  if (this->updatetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.UpdateTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->updatetime(), output);
  }

  // optional string CancelTime = 45;
  if (this->canceltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.CancelTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->canceltime(), output);
  }

  // optional string ActiveTraderID = 46;
  if (this->activetraderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activetraderid().data(), this->activetraderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ActiveTraderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->activetraderid(), output);
  }

  // optional string ClearingPartID = 47;
  if (this->clearingpartid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ClearingPartID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->clearingpartid(), output);
  }

  // optional int32 SequenceNo = 48;
  if (this->sequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->sequenceno(), output);
  }

  // optional int32 FrontID = 49;
  if (this->frontid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->frontid(), output);
  }

  // optional int32 SessionID = 50;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->sessionid(), output);
  }

  // optional string UserProductInfo = 51;
  if (this->userproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.UserProductInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->userproductinfo(), output);
  }

  // optional bytes StatusMsg = 52;
  if (this->statusmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      52, this->statusmsg(), output);
  }

  // optional int32 UserForceClose = 53;
  if (this->userforceclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->userforceclose(), output);
  }

  // optional string ActiveUserID = 54;
  if (this->activeuserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activeuserid().data(), this->activeuserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ActiveUserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->activeuserid(), output);
  }

  // optional int32 BrokerOrderSeq = 55;
  if (this->brokerorderseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->brokerorderseq(), output);
  }

  // optional string RelativeOrderSysID = 56;
  if (this->relativeordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relativeordersysid().data(), this->relativeordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      56, this->relativeordersysid(), output);
  }

  // optional int32 ZCETotalTradedVolume = 57;
  if (this->zcetotaltradedvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->zcetotaltradedvolume(), output);
  }

  // optional int32 IsSwapOrder = 58;
  if (this->isswaporder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->isswaporder(), output);
  }

  // optional int32 IOrderStatus = 59;
  if (this->iorderstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->iorderstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgOrderRtn)
}

::google::protobuf::uint8* PBMsgOrderRtn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgOrderRtn)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eof(), target);
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderref(), target);
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }

  // optional string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderPriceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->orderpricetype(), target);
  }

  // optional string Direction = 8;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.Direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->direction(), target);
  }

  // optional string CombOffsetFlag = 9;
  if (this->comboffsetflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comboffsetflag(), target);
  }

  // optional string CombHedgeFlag = 10;
  if (this->combhedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->combhedgeflag(), target);
  }

  // optional double LimitPrice = 11;
  if (this->limitprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->limitprice(), target);
  }

  // optional int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volumetotaloriginal(), target);
  }

  // optional string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timecondition().data(), this->timecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.TimeCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->timecondition(), target);
  }

  // optional string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.GTDDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gtddate(), target);
  }

  // optional string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumecondition().data(), this->volumecondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.VolumeCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->volumecondition(), target);
  }

  // optional int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->minvolume(), target);
  }

  // optional string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contingentcondition().data(), this->contingentcondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ContingentCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->contingentcondition(), target);
  }

  // optional double StopPrice = 18;
  if (this->stopprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->stopprice(), target);
  }

  // optional string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forceclosereason().data(), this->forceclosereason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ForceCloseReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->forceclosereason(), target);
  }

  // optional int32 IsAutoSuspend = 20;
  if (this->isautosuspend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->isautosuspend(), target);
  }

  // optional string BusinessUnit = 21;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.BusinessUnit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->businessunit(), target);
  }

  // optional int32 RequestID = 22;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->requestid(), target);
  }

  // optional string OrderLocalID = 23;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderLocalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->orderlocalid(), target);
  }

  // optional string ExchangeID = 24;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->exchangeid(), target);
  }

  // optional string ParticipantID = 25;
  if (this->participantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ParticipantID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->participantid(), target);
  }

  // optional string ClientID = 26;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->clientid(), target);
  }

  // optional string ExchangeInstID = 27;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ExchangeInstID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->exchangeinstid(), target);
  }

  // optional string TraderID = 28;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.TraderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->traderid(), target);
  }

  // optional int32 InstallID = 29;
  if (this->installid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->installid(), target);
  }

  // optional string OrderSubmitStatus = 30;
  if (this->ordersubmitstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersubmitstatus().data(), this->ordersubmitstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ordersubmitstatus(), target);
  }

  // optional int32 NotifySequence = 31;
  if (this->notifysequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->notifysequence(), target);
  }

  // optional string TradingDay = 32;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->tradingday(), target);
  }

  // optional int32 SettlementID = 33;
  if (this->settlementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->settlementid(), target);
  }

  // optional string OrderSysID = 34;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->ordersysid(), target);
  }

  // optional string OrderSource = 35;
  if (this->ordersource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersource().data(), this->ordersource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->ordersource(), target);
  }

  // optional string OrderStatus = 36;
  if (this->orderstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->orderstatus(), target);
  }

  // optional string OrderType = 37;
  if (this->ordertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordertype().data(), this->ordertype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.OrderType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->ordertype(), target);
  }

  // optional int32 VolumeTraded = 38;
  if (this->volumetraded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->volumetraded(), target);
  }

  // optional int32 VolumeTotal = 39;
  if (this->volumetotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->volumetotal(), target);
  }

  // optional string InsertDate = 40;
  if (this->insertdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insertdate().data(), this->insertdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InsertDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->insertdate(), target);
  }

  // optional string InsertTime = 41;
  if (this->inserttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.InsertTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->inserttime(), target);
  }

  // optional string ActiveTime = 42;
  if (this->activetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activetime().data(), this->activetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ActiveTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->activetime(), target);
  }

  // optional string SuspendTime = 43;
  if (this->suspendtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suspendtime().data(), this->suspendtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.SuspendTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->suspendtime(), target);
  }

  // optional string UpdateTime = 44;
  if (this->updatetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.UpdateTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->updatetime(), target);
  }

  // optional string CancelTime = 45;
  if (this->canceltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.CancelTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->canceltime(), target);
  }

  // optional string ActiveTraderID = 46;
  if (this->activetraderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activetraderid().data(), this->activetraderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ActiveTraderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->activetraderid(), target);
  }

  // optional string ClearingPartID = 47;
  if (this->clearingpartid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ClearingPartID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->clearingpartid(), target);
  }

  // optional int32 SequenceNo = 48;
  if (this->sequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->sequenceno(), target);
  }

  // optional int32 FrontID = 49;
  if (this->frontid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->frontid(), target);
  }

  // optional int32 SessionID = 50;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->sessionid(), target);
  }

  // optional string UserProductInfo = 51;
  if (this->userproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.UserProductInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->userproductinfo(), target);
  }

  // optional bytes StatusMsg = 52;
  if (this->statusmsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        52, this->statusmsg(), target);
  }

  // optional int32 UserForceClose = 53;
  if (this->userforceclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->userforceclose(), target);
  }

  // optional string ActiveUserID = 54;
  if (this->activeuserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activeuserid().data(), this->activeuserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.ActiveUserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->activeuserid(), target);
  }

  // optional int32 BrokerOrderSeq = 55;
  if (this->brokerorderseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->brokerorderseq(), target);
  }

  // optional string RelativeOrderSysID = 56;
  if (this->relativeordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relativeordersysid().data(), this->relativeordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->relativeordersysid(), target);
  }

  // optional int32 ZCETotalTradedVolume = 57;
  if (this->zcetotaltradedvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->zcetotaltradedvolume(), target);
  }

  // optional int32 IsSwapOrder = 58;
  if (this->isswaporder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->isswaporder(), target);
  }

  // optional int32 IOrderStatus = 59;
  if (this->iorderstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->iorderstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgOrderRtn)
  return target;
}

int PBMsgOrderRtn::ByteSize() const {
  int total_size = 0;

  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderref());
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderpricetype());
  }

  // optional string Direction = 8;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->direction());
  }

  // optional string CombOffsetFlag = 9;
  if (this->comboffsetflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comboffsetflag());
  }

  // optional string CombHedgeFlag = 10;
  if (this->combhedgeflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->combhedgeflag());
  }

  // optional double LimitPrice = 11;
  if (this->limitprice() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetotaloriginal());
  }

  // optional string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timecondition());
  }

  // optional string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtddate());
  }

  // optional string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volumecondition());
  }

  // optional int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minvolume());
  }

  // optional string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contingentcondition());
  }

  // optional double StopPrice = 18;
  if (this->stopprice() != 0) {
    total_size += 2 + 8;
  }

  // optional string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->forceclosereason());
  }

  // optional int32 IsAutoSuspend = 20;
  if (this->isautosuspend() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isautosuspend());
  }

  // optional string BusinessUnit = 21;
  if (this->businessunit().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->businessunit());
  }

  // optional int32 RequestID = 22;
  if (this->requestid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // optional string OrderLocalID = 23;
  if (this->orderlocalid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderlocalid());
  }

  // optional string ExchangeID = 24;
  if (this->exchangeid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional string ParticipantID = 25;
  if (this->participantid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->participantid());
  }

  // optional string ClientID = 26;
  if (this->clientid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  // optional string ExchangeInstID = 27;
  if (this->exchangeinstid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeinstid());
  }

  // optional string TraderID = 28;
  if (this->traderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderid());
  }

  // optional int32 InstallID = 29;
  if (this->installid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->installid());
  }

  // optional string OrderSubmitStatus = 30;
  if (this->ordersubmitstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersubmitstatus());
  }

  // optional int32 NotifySequence = 31;
  if (this->notifysequence() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->notifysequence());
  }

  // optional string TradingDay = 32;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional int32 SettlementID = 33;
  if (this->settlementid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlementid());
  }

  // optional string OrderSysID = 34;
  if (this->ordersysid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersysid());
  }

  // optional string OrderSource = 35;
  if (this->ordersource().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersource());
  }

  // optional string OrderStatus = 36;
  if (this->orderstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderstatus());
  }

  // optional string OrderType = 37;
  if (this->ordertype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordertype());
  }

  // optional int32 VolumeTraded = 38;
  if (this->volumetraded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetraded());
  }

  // optional int32 VolumeTotal = 39;
  if (this->volumetotal() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetotal());
  }

  // optional string InsertDate = 40;
  if (this->insertdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->insertdate());
  }

  // optional string InsertTime = 41;
  if (this->inserttime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inserttime());
  }

  // optional string ActiveTime = 42;
  if (this->activetime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activetime());
  }

  // optional string SuspendTime = 43;
  if (this->suspendtime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suspendtime());
  }

  // optional string UpdateTime = 44;
  if (this->updatetime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updatetime());
  }

  // optional string CancelTime = 45;
  if (this->canceltime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canceltime());
  }

  // optional string ActiveTraderID = 46;
  if (this->activetraderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activetraderid());
  }

  // optional string ClearingPartID = 47;
  if (this->clearingpartid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clearingpartid());
  }

  // optional int32 SequenceNo = 48;
  if (this->sequenceno() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequenceno());
  }

  // optional int32 FrontID = 49;
  if (this->frontid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontid());
  }

  // optional int32 SessionID = 50;
  if (this->sessionid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  // optional string UserProductInfo = 51;
  if (this->userproductinfo().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userproductinfo());
  }

  // optional bytes StatusMsg = 52;
  if (this->statusmsg().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->statusmsg());
  }

  // optional int32 UserForceClose = 53;
  if (this->userforceclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userforceclose());
  }

  // optional string ActiveUserID = 54;
  if (this->activeuserid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activeuserid());
  }

  // optional int32 BrokerOrderSeq = 55;
  if (this->brokerorderseq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brokerorderseq());
  }

  // optional string RelativeOrderSysID = 56;
  if (this->relativeordersysid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relativeordersysid());
  }

  // optional int32 ZCETotalTradedVolume = 57;
  if (this->zcetotaltradedvolume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zcetotaltradedvolume());
  }

  // optional int32 IsSwapOrder = 58;
  if (this->isswaporder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isswaporder());
  }

  // optional int32 IOrderStatus = 59;
  if (this->iorderstatus() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iorderstatus());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgOrderRtn::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgOrderRtn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgOrderRtn>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgOrderRtn::MergeFrom(const PBMsgOrderRtn& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.orderref().size() > 0) {

    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.orderpricetype().size() > 0) {

    orderpricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderpricetype_);
  }
  if (from.direction().size() > 0) {

    direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from.comboffsetflag().size() > 0) {

    comboffsetflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comboffsetflag_);
  }
  if (from.combhedgeflag().size() > 0) {

    combhedgeflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.combhedgeflag_);
  }
  if (from.limitprice() != 0) {
    set_limitprice(from.limitprice());
  }
  if (from.volumetotaloriginal() != 0) {
    set_volumetotaloriginal(from.volumetotaloriginal());
  }
  if (from.timecondition().size() > 0) {

    timecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timecondition_);
  }
  if (from.gtddate().size() > 0) {

    gtddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtddate_);
  }
  if (from.volumecondition().size() > 0) {

    volumecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volumecondition_);
  }
  if (from.minvolume() != 0) {
    set_minvolume(from.minvolume());
  }
  if (from.contingentcondition().size() > 0) {

    contingentcondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contingentcondition_);
  }
  if (from.stopprice() != 0) {
    set_stopprice(from.stopprice());
  }
  if (from.forceclosereason().size() > 0) {

    forceclosereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forceclosereason_);
  }
  if (from.isautosuspend() != 0) {
    set_isautosuspend(from.isautosuspend());
  }
  if (from.businessunit().size() > 0) {

    businessunit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.businessunit_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.orderlocalid().size() > 0) {

    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.participantid().size() > 0) {

    participantid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.participantid_);
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.exchangeinstid().size() > 0) {

    exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  if (from.traderid().size() > 0) {

    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  if (from.installid() != 0) {
    set_installid(from.installid());
  }
  if (from.ordersubmitstatus().size() > 0) {

    ordersubmitstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersubmitstatus_);
  }
  if (from.notifysequence() != 0) {
    set_notifysequence(from.notifysequence());
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.settlementid() != 0) {
    set_settlementid(from.settlementid());
  }
  if (from.ordersysid().size() > 0) {

    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  if (from.ordersource().size() > 0) {

    ordersource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersource_);
  }
  if (from.orderstatus().size() > 0) {

    orderstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderstatus_);
  }
  if (from.ordertype().size() > 0) {

    ordertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordertype_);
  }
  if (from.volumetraded() != 0) {
    set_volumetraded(from.volumetraded());
  }
  if (from.volumetotal() != 0) {
    set_volumetotal(from.volumetotal());
  }
  if (from.insertdate().size() > 0) {

    insertdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insertdate_);
  }
  if (from.inserttime().size() > 0) {

    inserttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inserttime_);
  }
  if (from.activetime().size() > 0) {

    activetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activetime_);
  }
  if (from.suspendtime().size() > 0) {

    suspendtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suspendtime_);
  }
  if (from.updatetime().size() > 0) {

    updatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatetime_);
  }
  if (from.canceltime().size() > 0) {

    canceltime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canceltime_);
  }
  if (from.activetraderid().size() > 0) {

    activetraderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activetraderid_);
  }
  if (from.clearingpartid().size() > 0) {

    clearingpartid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clearingpartid_);
  }
  if (from.sequenceno() != 0) {
    set_sequenceno(from.sequenceno());
  }
  if (from.frontid() != 0) {
    set_frontid(from.frontid());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.userproductinfo().size() > 0) {

    userproductinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userproductinfo_);
  }
  if (from.statusmsg().size() > 0) {

    statusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmsg_);
  }
  if (from.userforceclose() != 0) {
    set_userforceclose(from.userforceclose());
  }
  if (from.activeuserid().size() > 0) {

    activeuserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activeuserid_);
  }
  if (from.brokerorderseq() != 0) {
    set_brokerorderseq(from.brokerorderseq());
  }
  if (from.relativeordersysid().size() > 0) {

    relativeordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relativeordersysid_);
  }
  if (from.zcetotaltradedvolume() != 0) {
    set_zcetotaltradedvolume(from.zcetotaltradedvolume());
  }
  if (from.isswaporder() != 0) {
    set_isswaporder(from.isswaporder());
  }
  if (from.iorderstatus() != 0) {
    set_iorderstatus(from.iorderstatus());
  }
}

void PBMsgOrderRtn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgOrderRtn::CopyFrom(const PBMsgOrderRtn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgOrderRtn::IsInitialized() const {

  return true;
}

void PBMsgOrderRtn::Swap(PBMsgOrderRtn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgOrderRtn::InternalSwap(PBMsgOrderRtn* other) {
  std::swap(eof_, other->eof_);
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  orderref_.Swap(&other->orderref_);
  userid_.Swap(&other->userid_);
  orderpricetype_.Swap(&other->orderpricetype_);
  direction_.Swap(&other->direction_);
  comboffsetflag_.Swap(&other->comboffsetflag_);
  combhedgeflag_.Swap(&other->combhedgeflag_);
  std::swap(limitprice_, other->limitprice_);
  std::swap(volumetotaloriginal_, other->volumetotaloriginal_);
  timecondition_.Swap(&other->timecondition_);
  gtddate_.Swap(&other->gtddate_);
  volumecondition_.Swap(&other->volumecondition_);
  std::swap(minvolume_, other->minvolume_);
  contingentcondition_.Swap(&other->contingentcondition_);
  std::swap(stopprice_, other->stopprice_);
  forceclosereason_.Swap(&other->forceclosereason_);
  std::swap(isautosuspend_, other->isautosuspend_);
  businessunit_.Swap(&other->businessunit_);
  std::swap(requestid_, other->requestid_);
  orderlocalid_.Swap(&other->orderlocalid_);
  exchangeid_.Swap(&other->exchangeid_);
  participantid_.Swap(&other->participantid_);
  clientid_.Swap(&other->clientid_);
  exchangeinstid_.Swap(&other->exchangeinstid_);
  traderid_.Swap(&other->traderid_);
  std::swap(installid_, other->installid_);
  ordersubmitstatus_.Swap(&other->ordersubmitstatus_);
  std::swap(notifysequence_, other->notifysequence_);
  tradingday_.Swap(&other->tradingday_);
  std::swap(settlementid_, other->settlementid_);
  ordersysid_.Swap(&other->ordersysid_);
  ordersource_.Swap(&other->ordersource_);
  orderstatus_.Swap(&other->orderstatus_);
  ordertype_.Swap(&other->ordertype_);
  std::swap(volumetraded_, other->volumetraded_);
  std::swap(volumetotal_, other->volumetotal_);
  insertdate_.Swap(&other->insertdate_);
  inserttime_.Swap(&other->inserttime_);
  activetime_.Swap(&other->activetime_);
  suspendtime_.Swap(&other->suspendtime_);
  updatetime_.Swap(&other->updatetime_);
  canceltime_.Swap(&other->canceltime_);
  activetraderid_.Swap(&other->activetraderid_);
  clearingpartid_.Swap(&other->clearingpartid_);
  std::swap(sequenceno_, other->sequenceno_);
  std::swap(frontid_, other->frontid_);
  std::swap(sessionid_, other->sessionid_);
  userproductinfo_.Swap(&other->userproductinfo_);
  statusmsg_.Swap(&other->statusmsg_);
  std::swap(userforceclose_, other->userforceclose_);
  activeuserid_.Swap(&other->activeuserid_);
  std::swap(brokerorderseq_, other->brokerorderseq_);
  relativeordersysid_.Swap(&other->relativeordersysid_);
  std::swap(zcetotaltradedvolume_, other->zcetotaltradedvolume_);
  std::swap(isswaporder_, other->isswaporder_);
  std::swap(iorderstatus_, other->iorderstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgOrderRtn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgOrderRtn_descriptor_;
  metadata.reflection = PBMsgOrderRtn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgOrderRtn

// optional int32 EOF = 1;
void PBMsgOrderRtn::clear_eof() {
  eof_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.EOF)
  return eof_;
}
 void PBMsgOrderRtn::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.EOF)
}

// optional string BrokerID = 2;
void PBMsgOrderRtn::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}
 void PBMsgOrderRtn::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}
 void PBMsgOrderRtn::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}
 ::std::string* PBMsgOrderRtn::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgOrderRtn::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}
 void PBMsgOrderRtn::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}
 void PBMsgOrderRtn::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}
 ::std::string* PBMsgOrderRtn::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InvestorID)
}

// optional string InstrumentID = 4;
void PBMsgOrderRtn::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}
 void PBMsgOrderRtn::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}
 void PBMsgOrderRtn::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}
 ::std::string* PBMsgOrderRtn::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InstrumentID)
}

// optional string OrderRef = 5;
void PBMsgOrderRtn::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}
 void PBMsgOrderRtn::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}
 void PBMsgOrderRtn::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}
 ::std::string* PBMsgOrderRtn::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderRef)
}

// optional string UserID = 6;
void PBMsgOrderRtn::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UserID)
}
 void PBMsgOrderRtn::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.UserID)
}
 void PBMsgOrderRtn::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.UserID)
}
 ::std::string* PBMsgOrderRtn::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.UserID)
}

// optional string OrderPriceType = 7;
void PBMsgOrderRtn::clear_orderpricetype() {
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::orderpricetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
  return orderpricetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_orderpricetype(const ::std::string& value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}
 void PBMsgOrderRtn::set_orderpricetype(const char* value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}
 void PBMsgOrderRtn::set_orderpricetype(const char* value, size_t size) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}
 ::std::string* PBMsgOrderRtn::mutable_orderpricetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
  return orderpricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_orderpricetype() {
  
  return orderpricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_orderpricetype(::std::string* orderpricetype) {
  if (orderpricetype != NULL) {
    
  } else {
    
  }
  orderpricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderpricetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderPriceType)
}

// optional string Direction = 8;
void PBMsgOrderRtn::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::direction() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.Direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.Direction)
}
 void PBMsgOrderRtn::set_direction(const char* value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.Direction)
}
 void PBMsgOrderRtn::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.Direction)
}
 ::std::string* PBMsgOrderRtn::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.Direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_direction() {
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.Direction)
}

// optional string CombOffsetFlag = 9;
void PBMsgOrderRtn::clear_comboffsetflag() {
  comboffsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::comboffsetflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
  return comboffsetflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_comboffsetflag(const ::std::string& value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}
 void PBMsgOrderRtn::set_comboffsetflag(const char* value) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}
 void PBMsgOrderRtn::set_comboffsetflag(const char* value, size_t size) {
  
  comboffsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}
 ::std::string* PBMsgOrderRtn::mutable_comboffsetflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
  return comboffsetflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_comboffsetflag() {
  
  return comboffsetflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_comboffsetflag(::std::string* comboffsetflag) {
  if (comboffsetflag != NULL) {
    
  } else {
    
  }
  comboffsetflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comboffsetflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.CombOffsetFlag)
}

// optional string CombHedgeFlag = 10;
void PBMsgOrderRtn::clear_combhedgeflag() {
  combhedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::combhedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
  return combhedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_combhedgeflag(const ::std::string& value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}
 void PBMsgOrderRtn::set_combhedgeflag(const char* value) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}
 void PBMsgOrderRtn::set_combhedgeflag(const char* value, size_t size) {
  
  combhedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}
 ::std::string* PBMsgOrderRtn::mutable_combhedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
  return combhedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_combhedgeflag() {
  
  return combhedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_combhedgeflag(::std::string* combhedgeflag) {
  if (combhedgeflag != NULL) {
    
  } else {
    
  }
  combhedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combhedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.CombHedgeFlag)
}

// optional double LimitPrice = 11;
void PBMsgOrderRtn::clear_limitprice() {
  limitprice_ = 0;
}
 double PBMsgOrderRtn::limitprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.LimitPrice)
  return limitprice_;
}
 void PBMsgOrderRtn::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.LimitPrice)
}

// optional int32 VolumeTotalOriginal = 12;
void PBMsgOrderRtn::clear_volumetotaloriginal() {
  volumetotaloriginal_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::volumetotaloriginal() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeTotalOriginal)
  return volumetotaloriginal_;
}
 void PBMsgOrderRtn::set_volumetotaloriginal(::google::protobuf::int32 value) {
  
  volumetotaloriginal_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeTotalOriginal)
}

// optional string TimeCondition = 13;
void PBMsgOrderRtn::clear_timecondition() {
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::timecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
  return timecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_timecondition(const ::std::string& value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}
 void PBMsgOrderRtn::set_timecondition(const char* value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}
 void PBMsgOrderRtn::set_timecondition(const char* value, size_t size) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}
 ::std::string* PBMsgOrderRtn::mutable_timecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
  return timecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_timecondition() {
  
  return timecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_timecondition(::std::string* timecondition) {
  if (timecondition != NULL) {
    
  } else {
    
  }
  timecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.TimeCondition)
}

// optional string GTDDate = 14;
void PBMsgOrderRtn::clear_gtddate() {
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::gtddate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.GTDDate)
  return gtddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_gtddate(const ::std::string& value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}
 void PBMsgOrderRtn::set_gtddate(const char* value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}
 void PBMsgOrderRtn::set_gtddate(const char* value, size_t size) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}
 ::std::string* PBMsgOrderRtn::mutable_gtddate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.GTDDate)
  return gtddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_gtddate() {
  
  return gtddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_gtddate(::std::string* gtddate) {
  if (gtddate != NULL) {
    
  } else {
    
  }
  gtddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtddate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.GTDDate)
}

// optional string VolumeCondition = 15;
void PBMsgOrderRtn::clear_volumecondition() {
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::volumecondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
  return volumecondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_volumecondition(const ::std::string& value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}
 void PBMsgOrderRtn::set_volumecondition(const char* value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}
 void PBMsgOrderRtn::set_volumecondition(const char* value, size_t size) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}
 ::std::string* PBMsgOrderRtn::mutable_volumecondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
  return volumecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_volumecondition() {
  
  return volumecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_volumecondition(::std::string* volumecondition) {
  if (volumecondition != NULL) {
    
  } else {
    
  }
  volumecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumecondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.VolumeCondition)
}

// optional int32 MinVolume = 16;
void PBMsgOrderRtn::clear_minvolume() {
  minvolume_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::minvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.MinVolume)
  return minvolume_;
}
 void PBMsgOrderRtn::set_minvolume(::google::protobuf::int32 value) {
  
  minvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.MinVolume)
}

// optional string ContingentCondition = 17;
void PBMsgOrderRtn::clear_contingentcondition() {
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::contingentcondition() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
  return contingentcondition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_contingentcondition(const ::std::string& value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}
 void PBMsgOrderRtn::set_contingentcondition(const char* value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}
 void PBMsgOrderRtn::set_contingentcondition(const char* value, size_t size) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}
 ::std::string* PBMsgOrderRtn::mutable_contingentcondition() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
  return contingentcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_contingentcondition() {
  
  return contingentcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_contingentcondition(::std::string* contingentcondition) {
  if (contingentcondition != NULL) {
    
  } else {
    
  }
  contingentcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contingentcondition);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ContingentCondition)
}

// optional double StopPrice = 18;
void PBMsgOrderRtn::clear_stopprice() {
  stopprice_ = 0;
}
 double PBMsgOrderRtn::stopprice() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.StopPrice)
  return stopprice_;
}
 void PBMsgOrderRtn::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.StopPrice)
}

// optional string ForceCloseReason = 19;
void PBMsgOrderRtn::clear_forceclosereason() {
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::forceclosereason() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
  return forceclosereason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_forceclosereason(const ::std::string& value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}
 void PBMsgOrderRtn::set_forceclosereason(const char* value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}
 void PBMsgOrderRtn::set_forceclosereason(const char* value, size_t size) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}
 ::std::string* PBMsgOrderRtn::mutable_forceclosereason() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
  return forceclosereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_forceclosereason() {
  
  return forceclosereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_forceclosereason(::std::string* forceclosereason) {
  if (forceclosereason != NULL) {
    
  } else {
    
  }
  forceclosereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forceclosereason);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ForceCloseReason)
}

// optional int32 IsAutoSuspend = 20;
void PBMsgOrderRtn::clear_isautosuspend() {
  isautosuspend_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::isautosuspend() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.IsAutoSuspend)
  return isautosuspend_;
}
 void PBMsgOrderRtn::set_isautosuspend(::google::protobuf::int32 value) {
  
  isautosuspend_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.IsAutoSuspend)
}

// optional string BusinessUnit = 21;
void PBMsgOrderRtn::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}
 void PBMsgOrderRtn::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}
 void PBMsgOrderRtn::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}
 ::std::string* PBMsgOrderRtn::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.BusinessUnit)
}

// optional int32 RequestID = 22;
void PBMsgOrderRtn::clear_requestid() {
  requestid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::requestid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.RequestID)
  return requestid_;
}
 void PBMsgOrderRtn::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.RequestID)
}

// optional string OrderLocalID = 23;
void PBMsgOrderRtn::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::orderlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
  return orderlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}
 void PBMsgOrderRtn::set_orderlocalid(const char* value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}
 void PBMsgOrderRtn::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}
 ::std::string* PBMsgOrderRtn::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_orderlocalid() {
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderLocalID)
}

// optional string ExchangeID = 24;
void PBMsgOrderRtn::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}
 void PBMsgOrderRtn::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}
 void PBMsgOrderRtn::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}
 ::std::string* PBMsgOrderRtn::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ExchangeID)
}

// optional string ParticipantID = 25;
void PBMsgOrderRtn::clear_participantid() {
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::participantid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
  return participantid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_participantid(const ::std::string& value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}
 void PBMsgOrderRtn::set_participantid(const char* value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}
 void PBMsgOrderRtn::set_participantid(const char* value, size_t size) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}
 ::std::string* PBMsgOrderRtn::mutable_participantid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
  return participantid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_participantid() {
  
  return participantid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_participantid(::std::string* participantid) {
  if (participantid != NULL) {
    
  } else {
    
  }
  participantid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participantid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ParticipantID)
}

// optional string ClientID = 26;
void PBMsgOrderRtn::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::clientid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ClientID)
}
 void PBMsgOrderRtn::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ClientID)
}
 void PBMsgOrderRtn::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ClientID)
}
 ::std::string* PBMsgOrderRtn::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_clientid() {
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ClientID)
}

// optional string ExchangeInstID = 27;
void PBMsgOrderRtn::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}
 void PBMsgOrderRtn::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}
 void PBMsgOrderRtn::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}
 ::std::string* PBMsgOrderRtn::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ExchangeInstID)
}

// optional string TraderID = 28;
void PBMsgOrderRtn::clear_traderid() {
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::traderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.TraderID)
  return traderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_traderid(const ::std::string& value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.TraderID)
}
 void PBMsgOrderRtn::set_traderid(const char* value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.TraderID)
}
 void PBMsgOrderRtn::set_traderid(const char* value, size_t size) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.TraderID)
}
 ::std::string* PBMsgOrderRtn::mutable_traderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.TraderID)
  return traderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_traderid() {
  
  return traderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_traderid(::std::string* traderid) {
  if (traderid != NULL) {
    
  } else {
    
  }
  traderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.TraderID)
}

// optional int32 InstallID = 29;
void PBMsgOrderRtn::clear_installid() {
  installid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::installid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InstallID)
  return installid_;
}
 void PBMsgOrderRtn::set_installid(::google::protobuf::int32 value) {
  
  installid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InstallID)
}

// optional string OrderSubmitStatus = 30;
void PBMsgOrderRtn::clear_ordersubmitstatus() {
  ordersubmitstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::ordersubmitstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
  return ordersubmitstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_ordersubmitstatus(const ::std::string& value) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}
 void PBMsgOrderRtn::set_ordersubmitstatus(const char* value) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}
 void PBMsgOrderRtn::set_ordersubmitstatus(const char* value, size_t size) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}
 ::std::string* PBMsgOrderRtn::mutable_ordersubmitstatus() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
  return ordersubmitstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_ordersubmitstatus() {
  
  return ordersubmitstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_ordersubmitstatus(::std::string* ordersubmitstatus) {
  if (ordersubmitstatus != NULL) {
    
  } else {
    
  }
  ordersubmitstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersubmitstatus);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderSubmitStatus)
}

// optional int32 NotifySequence = 31;
void PBMsgOrderRtn::clear_notifysequence() {
  notifysequence_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::notifysequence() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.NotifySequence)
  return notifysequence_;
}
 void PBMsgOrderRtn::set_notifysequence(::google::protobuf::int32 value) {
  
  notifysequence_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.NotifySequence)
}

// optional string TradingDay = 32;
void PBMsgOrderRtn::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}
 void PBMsgOrderRtn::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}
 void PBMsgOrderRtn::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}
 ::std::string* PBMsgOrderRtn::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.TradingDay)
}

// optional int32 SettlementID = 33;
void PBMsgOrderRtn::clear_settlementid() {
  settlementid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SettlementID)
  return settlementid_;
}
 void PBMsgOrderRtn::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SettlementID)
}

// optional string OrderSysID = 34;
void PBMsgOrderRtn::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}
 void PBMsgOrderRtn::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}
 void PBMsgOrderRtn::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}
 ::std::string* PBMsgOrderRtn::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderSysID)
}

// optional string OrderSource = 35;
void PBMsgOrderRtn::clear_ordersource() {
  ordersource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::ordersource() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderSource)
  return ordersource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_ordersource(const ::std::string& value) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}
 void PBMsgOrderRtn::set_ordersource(const char* value) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}
 void PBMsgOrderRtn::set_ordersource(const char* value, size_t size) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}
 ::std::string* PBMsgOrderRtn::mutable_ordersource() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderSource)
  return ordersource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_ordersource() {
  
  return ordersource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_ordersource(::std::string* ordersource) {
  if (ordersource != NULL) {
    
  } else {
    
  }
  ordersource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersource);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderSource)
}

// optional string OrderStatus = 36;
void PBMsgOrderRtn::clear_orderstatus() {
  orderstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::orderstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
  return orderstatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_orderstatus(const ::std::string& value) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}
 void PBMsgOrderRtn::set_orderstatus(const char* value) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}
 void PBMsgOrderRtn::set_orderstatus(const char* value, size_t size) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}
 ::std::string* PBMsgOrderRtn::mutable_orderstatus() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
  return orderstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_orderstatus() {
  
  return orderstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_orderstatus(::std::string* orderstatus) {
  if (orderstatus != NULL) {
    
  } else {
    
  }
  orderstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderstatus);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderStatus)
}

// optional string OrderType = 37;
void PBMsgOrderRtn::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::ordertype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.OrderType)
  return ordertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_ordertype(const ::std::string& value) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.OrderType)
}
 void PBMsgOrderRtn::set_ordertype(const char* value) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.OrderType)
}
 void PBMsgOrderRtn::set_ordertype(const char* value, size_t size) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.OrderType)
}
 ::std::string* PBMsgOrderRtn::mutable_ordertype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.OrderType)
  return ordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_ordertype() {
  
  return ordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_ordertype(::std::string* ordertype) {
  if (ordertype != NULL) {
    
  } else {
    
  }
  ordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.OrderType)
}

// optional int32 VolumeTraded = 38;
void PBMsgOrderRtn::clear_volumetraded() {
  volumetraded_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::volumetraded() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeTraded)
  return volumetraded_;
}
 void PBMsgOrderRtn::set_volumetraded(::google::protobuf::int32 value) {
  
  volumetraded_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeTraded)
}

// optional int32 VolumeTotal = 39;
void PBMsgOrderRtn::clear_volumetotal() {
  volumetotal_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::volumetotal() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.VolumeTotal)
  return volumetotal_;
}
 void PBMsgOrderRtn::set_volumetotal(::google::protobuf::int32 value) {
  
  volumetotal_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.VolumeTotal)
}

// optional string InsertDate = 40;
void PBMsgOrderRtn::clear_insertdate() {
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::insertdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InsertDate)
  return insertdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_insertdate(const ::std::string& value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}
 void PBMsgOrderRtn::set_insertdate(const char* value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}
 void PBMsgOrderRtn::set_insertdate(const char* value, size_t size) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}
 ::std::string* PBMsgOrderRtn::mutable_insertdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InsertDate)
  return insertdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_insertdate() {
  
  return insertdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_insertdate(::std::string* insertdate) {
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insertdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InsertDate)
}

// optional string InsertTime = 41;
void PBMsgOrderRtn::clear_inserttime() {
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::inserttime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.InsertTime)
  return inserttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_inserttime(const ::std::string& value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}
 void PBMsgOrderRtn::set_inserttime(const char* value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}
 void PBMsgOrderRtn::set_inserttime(const char* value, size_t size) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}
 ::std::string* PBMsgOrderRtn::mutable_inserttime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.InsertTime)
  return inserttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_inserttime() {
  
  return inserttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.InsertTime)
}

// optional string ActiveTime = 42;
void PBMsgOrderRtn::clear_activetime() {
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::activetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
  return activetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_activetime(const ::std::string& value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}
 void PBMsgOrderRtn::set_activetime(const char* value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}
 void PBMsgOrderRtn::set_activetime(const char* value, size_t size) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}
 ::std::string* PBMsgOrderRtn::mutable_activetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
  return activetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_activetime() {
  
  return activetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_activetime(::std::string* activetime) {
  if (activetime != NULL) {
    
  } else {
    
  }
  activetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ActiveTime)
}

// optional string SuspendTime = 43;
void PBMsgOrderRtn::clear_suspendtime() {
  suspendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::suspendtime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
  return suspendtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_suspendtime(const ::std::string& value) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}
 void PBMsgOrderRtn::set_suspendtime(const char* value) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}
 void PBMsgOrderRtn::set_suspendtime(const char* value, size_t size) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}
 ::std::string* PBMsgOrderRtn::mutable_suspendtime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
  return suspendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_suspendtime() {
  
  return suspendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_suspendtime(::std::string* suspendtime) {
  if (suspendtime != NULL) {
    
  } else {
    
  }
  suspendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suspendtime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.SuspendTime)
}

// optional string UpdateTime = 44;
void PBMsgOrderRtn::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::updatetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
  return updatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}
 void PBMsgOrderRtn::set_updatetime(const char* value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}
 void PBMsgOrderRtn::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}
 ::std::string* PBMsgOrderRtn::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_updatetime() {
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.UpdateTime)
}

// optional string CancelTime = 45;
void PBMsgOrderRtn::clear_canceltime() {
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::canceltime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.CancelTime)
  return canceltime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_canceltime(const ::std::string& value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}
 void PBMsgOrderRtn::set_canceltime(const char* value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}
 void PBMsgOrderRtn::set_canceltime(const char* value, size_t size) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}
 ::std::string* PBMsgOrderRtn::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.CancelTime)
  return canceltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_canceltime() {
  
  return canceltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.CancelTime)
}

// optional string ActiveTraderID = 46;
void PBMsgOrderRtn::clear_activetraderid() {
  activetraderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::activetraderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
  return activetraderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_activetraderid(const ::std::string& value) {
  
  activetraderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}
 void PBMsgOrderRtn::set_activetraderid(const char* value) {
  
  activetraderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}
 void PBMsgOrderRtn::set_activetraderid(const char* value, size_t size) {
  
  activetraderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}
 ::std::string* PBMsgOrderRtn::mutable_activetraderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
  return activetraderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_activetraderid() {
  
  return activetraderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_activetraderid(::std::string* activetraderid) {
  if (activetraderid != NULL) {
    
  } else {
    
  }
  activetraderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetraderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ActiveTraderID)
}

// optional string ClearingPartID = 47;
void PBMsgOrderRtn::clear_clearingpartid() {
  clearingpartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::clearingpartid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
  return clearingpartid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_clearingpartid(const ::std::string& value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}
 void PBMsgOrderRtn::set_clearingpartid(const char* value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}
 void PBMsgOrderRtn::set_clearingpartid(const char* value, size_t size) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}
 ::std::string* PBMsgOrderRtn::mutable_clearingpartid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
  return clearingpartid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_clearingpartid() {
  
  return clearingpartid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_clearingpartid(::std::string* clearingpartid) {
  if (clearingpartid != NULL) {
    
  } else {
    
  }
  clearingpartid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearingpartid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ClearingPartID)
}

// optional int32 SequenceNo = 48;
void PBMsgOrderRtn::clear_sequenceno() {
  sequenceno_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::sequenceno() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SequenceNo)
  return sequenceno_;
}
 void PBMsgOrderRtn::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SequenceNo)
}

// optional int32 FrontID = 49;
void PBMsgOrderRtn::clear_frontid() {
  frontid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::frontid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.FrontID)
  return frontid_;
}
 void PBMsgOrderRtn::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.FrontID)
}

// optional int32 SessionID = 50;
void PBMsgOrderRtn::clear_sessionid() {
  sessionid_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::sessionid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.SessionID)
  return sessionid_;
}
 void PBMsgOrderRtn::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.SessionID)
}

// optional string UserProductInfo = 51;
void PBMsgOrderRtn::clear_userproductinfo() {
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::userproductinfo() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
  return userproductinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_userproductinfo(const ::std::string& value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}
 void PBMsgOrderRtn::set_userproductinfo(const char* value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}
 void PBMsgOrderRtn::set_userproductinfo(const char* value, size_t size) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}
 ::std::string* PBMsgOrderRtn::mutable_userproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
  return userproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_userproductinfo() {
  
  return userproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_userproductinfo(::std::string* userproductinfo) {
  if (userproductinfo != NULL) {
    
  } else {
    
  }
  userproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userproductinfo);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.UserProductInfo)
}

// optional bytes StatusMsg = 52;
void PBMsgOrderRtn::clear_statusmsg() {
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::statusmsg() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
  return statusmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_statusmsg(const ::std::string& value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}
 void PBMsgOrderRtn::set_statusmsg(const char* value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}
 void PBMsgOrderRtn::set_statusmsg(const void* value, size_t size) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}
 ::std::string* PBMsgOrderRtn::mutable_statusmsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
  return statusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_statusmsg() {
  
  return statusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg != NULL) {
    
  } else {
    
  }
  statusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmsg);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.StatusMsg)
}

// optional int32 UserForceClose = 53;
void PBMsgOrderRtn::clear_userforceclose() {
  userforceclose_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::userforceclose() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.UserForceClose)
  return userforceclose_;
}
 void PBMsgOrderRtn::set_userforceclose(::google::protobuf::int32 value) {
  
  userforceclose_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.UserForceClose)
}

// optional string ActiveUserID = 54;
void PBMsgOrderRtn::clear_activeuserid() {
  activeuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::activeuserid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
  return activeuserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_activeuserid(const ::std::string& value) {
  
  activeuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}
 void PBMsgOrderRtn::set_activeuserid(const char* value) {
  
  activeuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}
 void PBMsgOrderRtn::set_activeuserid(const char* value, size_t size) {
  
  activeuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}
 ::std::string* PBMsgOrderRtn::mutable_activeuserid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
  return activeuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_activeuserid() {
  
  return activeuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_activeuserid(::std::string* activeuserid) {
  if (activeuserid != NULL) {
    
  } else {
    
  }
  activeuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activeuserid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.ActiveUserID)
}

// optional int32 BrokerOrderSeq = 55;
void PBMsgOrderRtn::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.BrokerOrderSeq)
  return brokerorderseq_;
}
 void PBMsgOrderRtn::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.BrokerOrderSeq)
}

// optional string RelativeOrderSysID = 56;
void PBMsgOrderRtn::clear_relativeordersysid() {
  relativeordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgOrderRtn::relativeordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
  return relativeordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_relativeordersysid(const ::std::string& value) {
  
  relativeordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}
 void PBMsgOrderRtn::set_relativeordersysid(const char* value) {
  
  relativeordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}
 void PBMsgOrderRtn::set_relativeordersysid(const char* value, size_t size) {
  
  relativeordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}
 ::std::string* PBMsgOrderRtn::mutable_relativeordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
  return relativeordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgOrderRtn::release_relativeordersysid() {
  
  return relativeordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgOrderRtn::set_allocated_relativeordersysid(::std::string* relativeordersysid) {
  if (relativeordersysid != NULL) {
    
  } else {
    
  }
  relativeordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativeordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgOrderRtn.RelativeOrderSysID)
}

// optional int32 ZCETotalTradedVolume = 57;
void PBMsgOrderRtn::clear_zcetotaltradedvolume() {
  zcetotaltradedvolume_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::zcetotaltradedvolume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.ZCETotalTradedVolume)
  return zcetotaltradedvolume_;
}
 void PBMsgOrderRtn::set_zcetotaltradedvolume(::google::protobuf::int32 value) {
  
  zcetotaltradedvolume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.ZCETotalTradedVolume)
}

// optional int32 IsSwapOrder = 58;
void PBMsgOrderRtn::clear_isswaporder() {
  isswaporder_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::isswaporder() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.IsSwapOrder)
  return isswaporder_;
}
 void PBMsgOrderRtn::set_isswaporder(::google::protobuf::int32 value) {
  
  isswaporder_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.IsSwapOrder)
}

// optional int32 IOrderStatus = 59;
void PBMsgOrderRtn::clear_iorderstatus() {
  iorderstatus_ = 0;
}
 ::google::protobuf::int32 PBMsgOrderRtn::iorderstatus() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgOrderRtn.IOrderStatus)
  return iorderstatus_;
}
 void PBMsgOrderRtn::set_iorderstatus(::google::protobuf::int32 value) {
  
  iorderstatus_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgOrderRtn.IOrderStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgTradeRtn::kEOFFieldNumber;
const int PBMsgTradeRtn::kBrokerIDFieldNumber;
const int PBMsgTradeRtn::kInvestorIDFieldNumber;
const int PBMsgTradeRtn::kInstrumentIDFieldNumber;
const int PBMsgTradeRtn::kOrderRefFieldNumber;
const int PBMsgTradeRtn::kUserIDFieldNumber;
const int PBMsgTradeRtn::kExchangeIDFieldNumber;
const int PBMsgTradeRtn::kTradeIDFieldNumber;
const int PBMsgTradeRtn::kDirectionFieldNumber;
const int PBMsgTradeRtn::kOrderSysIDFieldNumber;
const int PBMsgTradeRtn::kParticipantIDFieldNumber;
const int PBMsgTradeRtn::kClientIDFieldNumber;
const int PBMsgTradeRtn::kTradingRoleFieldNumber;
const int PBMsgTradeRtn::kExchangeInstIDFieldNumber;
const int PBMsgTradeRtn::kOffsetFlagFieldNumber;
const int PBMsgTradeRtn::kHedgeFlagFieldNumber;
const int PBMsgTradeRtn::kPriceFieldNumber;
const int PBMsgTradeRtn::kVolumeFieldNumber;
const int PBMsgTradeRtn::kTradeDateFieldNumber;
const int PBMsgTradeRtn::kTradeTimeFieldNumber;
const int PBMsgTradeRtn::kTradeTypeFieldNumber;
const int PBMsgTradeRtn::kPriceSourceFieldNumber;
const int PBMsgTradeRtn::kTraderIDFieldNumber;
const int PBMsgTradeRtn::kOrderLocalIDFieldNumber;
const int PBMsgTradeRtn::kClearingPartIDFieldNumber;
const int PBMsgTradeRtn::kBusinessUnitFieldNumber;
const int PBMsgTradeRtn::kSequenceNoFieldNumber;
const int PBMsgTradeRtn::kTradingDayFieldNumber;
const int PBMsgTradeRtn::kSettlementIDFieldNumber;
const int PBMsgTradeRtn::kBrokerOrderSeqFieldNumber;
const int PBMsgTradeRtn::kTradeSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgTradeRtn::PBMsgTradeRtn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgTradeRtn)
}

void PBMsgTradeRtn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgTradeRtn::PBMsgTradeRtn(const PBMsgTradeRtn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgTradeRtn)
}

void PBMsgTradeRtn::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eof_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingrole_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offsetflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  volume_ = 0;
  tradedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricesource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearingpartid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequenceno_ = 0;
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settlementid_ = 0;
  brokerorderseq_ = 0;
  tradesource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgTradeRtn::~PBMsgTradeRtn() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgTradeRtn)
  SharedDtor();
}

void PBMsgTradeRtn::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingrole_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offsetflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricesource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearingpartid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradesource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgTradeRtn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgTradeRtn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgTradeRtn_descriptor_;
}

const PBMsgTradeRtn& PBMsgTradeRtn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgTradeRtn* PBMsgTradeRtn::default_instance_ = NULL;

PBMsgTradeRtn* PBMsgTradeRtn::New(::google::protobuf::Arena* arena) const {
  PBMsgTradeRtn* n = new PBMsgTradeRtn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgTradeRtn::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMsgTradeRtn*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  eof_ = 0;
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingrole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  volume_ = 0;
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricesource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(sequenceno_, settlementid_);
  clearingpartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerorderseq_ = 0;
  tradesource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMsgTradeRtn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgTradeRtn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EOF = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eof_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }

      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 4;
      case 4: {
        if (tag == 34) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OrderRef;
        break;
      }

      // optional string OrderRef = 5;
      case 5: {
        if (tag == 42) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.OrderRef"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UserID;
        break;
      }

      // optional string UserID = 6;
      case 6: {
        if (tag == 50) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.UserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 7;
      case 7: {
        if (tag == 58) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TradeID;
        break;
      }

      // optional string TradeID = 8;
      case 8: {
        if (tag == 66) {
         parse_TradeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeid().data(), this->tradeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Direction;
        break;
      }

      // optional string Direction = 9;
      case 9: {
        if (tag == 74) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.Direction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OrderSysID;
        break;
      }

      // optional string OrderSysID = 10;
      case 10: {
        if (tag == 82) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.OrderSysID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ParticipantID;
        break;
      }

      // optional string ParticipantID = 11;
      case 11: {
        if (tag == 90) {
         parse_ParticipantID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participantid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->participantid().data(), this->participantid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.ParticipantID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ClientID;
        break;
      }

      // optional string ClientID = 12;
      case 12: {
        if (tag == 98) {
         parse_ClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.ClientID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_TradingRole;
        break;
      }

      // optional string TradingRole = 13;
      case 13: {
        if (tag == 106) {
         parse_TradingRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingrole()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingrole().data(), this->tradingrole().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradingRole"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 14;
      case 14: {
        if (tag == 114) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.ExchangeInstID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_OffsetFlag;
        break;
      }

      // optional string OffsetFlag = 15;
      case 15: {
        if (tag == 122) {
         parse_OffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offsetflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->offsetflag().data(), this->offsetflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.OffsetFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_HedgeFlag;
        break;
      }

      // optional string HedgeFlag = 16;
      case 16: {
        if (tag == 130) {
         parse_HedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedgeflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hedgeflag().data(), this->hedgeflag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.HedgeFlag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_Price;
        break;
      }

      // optional double Price = 17;
      case 17: {
        if (tag == 137) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 18;
      case 18: {
        if (tag == 144) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_TradeDate;
        break;
      }

      // optional string TradeDate = 19;
      case 19: {
        if (tag == 154) {
         parse_TradeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradedate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradedate().data(), this->tradedate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradeDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_TradeTime;
        break;
      }

      // optional string TradeTime = 20;
      case 20: {
        if (tag == 162) {
         parse_TradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetime().data(), this->tradetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradeTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_TradeType;
        break;
      }

      // optional string TradeType = 21;
      case 21: {
        if (tag == 170) {
         parse_TradeType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetype().data(), this->tradetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradeType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_PriceSource;
        break;
      }

      // optional string PriceSource = 22;
      case 22: {
        if (tag == 178) {
         parse_PriceSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricesource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pricesource().data(), this->pricesource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.PriceSource"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_TraderID;
        break;
      }

      // optional string TraderID = 23;
      case 23: {
        if (tag == 186) {
         parse_TraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderid().data(), this->traderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TraderID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_OrderLocalID;
        break;
      }

      // optional string OrderLocalID = 24;
      case 24: {
        if (tag == 194) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.OrderLocalID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_ClearingPartID;
        break;
      }

      // optional string ClearingPartID = 25;
      case 25: {
        if (tag == 202) {
         parse_ClearingPartID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearingpartid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clearingpartid().data(), this->clearingpartid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.ClearingPartID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_BusinessUnit;
        break;
      }

      // optional string BusinessUnit = 26;
      case 26: {
        if (tag == 210) {
         parse_BusinessUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_businessunit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->businessunit().data(), this->businessunit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.BusinessUnit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_SequenceNo;
        break;
      }

      // optional int32 SequenceNo = 27;
      case 27: {
        if (tag == 216) {
         parse_SequenceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_TradingDay;
        break;
      }

      // optional string TradingDay = 28;
      case 28: {
        if (tag == 226) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradingDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_SettlementID;
        break;
      }

      // optional int32 SettlementID = 29;
      case 29: {
        if (tag == 232) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_BrokerOrderSeq;
        break;
      }

      // optional int32 BrokerOrderSeq = 30;
      case 30: {
        if (tag == 240) {
         parse_BrokerOrderSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_TradeSource;
        break;
      }

      // optional string TradeSource = 31;
      case 31: {
        if (tag == 250) {
         parse_TradeSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradesource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradesource().data(), this->tradesource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgTradeRtn.TradeSource"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgTradeRtn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgTradeRtn)
  return false;
#undef DO_
}

void PBMsgTradeRtn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgTradeRtn)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eof(), output);
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrumentid(), output);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->orderref(), output);
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userid(), output);
  }

  // optional string ExchangeID = 7;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exchangeid(), output);
  }

  // optional string TradeID = 8;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tradeid(), output);
  }

  // optional string Direction = 9;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.Direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->direction(), output);
  }

  // optional string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ordersysid(), output);
  }

  // optional string ParticipantID = 11;
  if (this->participantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ParticipantID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->participantid(), output);
  }

  // optional string ClientID = 12;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->clientid(), output);
  }

  // optional string TradingRole = 13;
  if (this->tradingrole().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingrole().data(), this->tradingrole().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradingRole");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->tradingrole(), output);
  }

  // optional string ExchangeInstID = 14;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ExchangeInstID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->exchangeinstid(), output);
  }

  // optional string OffsetFlag = 15;
  if (this->offsetflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->offsetflag().data(), this->offsetflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OffsetFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->offsetflag(), output);
  }

  // optional string HedgeFlag = 16;
  if (this->hedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.HedgeFlag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->hedgeflag(), output);
  }

  // optional double Price = 17;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->price(), output);
  }

  // optional int32 Volume = 18;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->volume(), output);
  }

  // optional string TradeDate = 19;
  if (this->tradedate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->tradedate(), output);
  }

  // optional string TradeTime = 20;
  if (this->tradetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->tradetime(), output);
  }

  // optional string TradeType = 21;
  if (this->tradetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetype().data(), this->tradetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->tradetype(), output);
  }

  // optional string PriceSource = 22;
  if (this->pricesource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pricesource().data(), this->pricesource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.PriceSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->pricesource(), output);
  }

  // optional string TraderID = 23;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TraderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->traderid(), output);
  }

  // optional string OrderLocalID = 24;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OrderLocalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->orderlocalid(), output);
  }

  // optional string ClearingPartID = 25;
  if (this->clearingpartid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ClearingPartID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->clearingpartid(), output);
  }

  // optional string BusinessUnit = 26;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.BusinessUnit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->businessunit(), output);
  }

  // optional int32 SequenceNo = 27;
  if (this->sequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->sequenceno(), output);
  }

  // optional string TradingDay = 28;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->tradingday(), output);
  }

  // optional int32 SettlementID = 29;
  if (this->settlementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->settlementid(), output);
  }

  // optional int32 BrokerOrderSeq = 30;
  if (this->brokerorderseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->brokerorderseq(), output);
  }

  // optional string TradeSource = 31;
  if (this->tradesource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradesource().data(), this->tradesource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->tradesource(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgTradeRtn)
}

::google::protobuf::uint8* PBMsgTradeRtn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgTradeRtn)
  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eof(), target);
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrumentid(), target);
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderref(), target);
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }

  // optional string ExchangeID = 7;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchangeid(), target);
  }

  // optional string TradeID = 8;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tradeid(), target);
  }

  // optional string Direction = 9;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.Direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->direction(), target);
  }

  // optional string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ordersysid(), target);
  }

  // optional string ParticipantID = 11;
  if (this->participantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ParticipantID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->participantid(), target);
  }

  // optional string ClientID = 12;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->clientid(), target);
  }

  // optional string TradingRole = 13;
  if (this->tradingrole().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingrole().data(), this->tradingrole().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradingRole");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tradingrole(), target);
  }

  // optional string ExchangeInstID = 14;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ExchangeInstID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exchangeinstid(), target);
  }

  // optional string OffsetFlag = 15;
  if (this->offsetflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->offsetflag().data(), this->offsetflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OffsetFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->offsetflag(), target);
  }

  // optional string HedgeFlag = 16;
  if (this->hedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.HedgeFlag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->hedgeflag(), target);
  }

  // optional double Price = 17;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->price(), target);
  }

  // optional int32 Volume = 18;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->volume(), target);
  }

  // optional string TradeDate = 19;
  if (this->tradedate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->tradedate(), target);
  }

  // optional string TradeTime = 20;
  if (this->tradetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->tradetime(), target);
  }

  // optional string TradeType = 21;
  if (this->tradetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetype().data(), this->tradetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->tradetype(), target);
  }

  // optional string PriceSource = 22;
  if (this->pricesource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pricesource().data(), this->pricesource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.PriceSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->pricesource(), target);
  }

  // optional string TraderID = 23;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TraderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->traderid(), target);
  }

  // optional string OrderLocalID = 24;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.OrderLocalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->orderlocalid(), target);
  }

  // optional string ClearingPartID = 25;
  if (this->clearingpartid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.ClearingPartID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->clearingpartid(), target);
  }

  // optional string BusinessUnit = 26;
  if (this->businessunit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->businessunit().data(), this->businessunit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.BusinessUnit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->businessunit(), target);
  }

  // optional int32 SequenceNo = 27;
  if (this->sequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->sequenceno(), target);
  }

  // optional string TradingDay = 28;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->tradingday(), target);
  }

  // optional int32 SettlementID = 29;
  if (this->settlementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->settlementid(), target);
  }

  // optional int32 BrokerOrderSeq = 30;
  if (this->brokerorderseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->brokerorderseq(), target);
  }

  // optional string TradeSource = 31;
  if (this->tradesource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradesource().data(), this->tradesource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgTradeRtn.TradeSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->tradesource(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgTradeRtn)
  return target;
}

int PBMsgTradeRtn::ByteSize() const {
  int total_size = 0;

  // optional int32 EOF = 1;
  if (this->eof() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eof());
  }

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string InstrumentID = 4;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // optional string OrderRef = 5;
  if (this->orderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderref());
  }

  // optional string UserID = 6;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string ExchangeID = 7;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // optional string TradeID = 8;
  if (this->tradeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeid());
  }

  // optional string Direction = 9;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->direction());
  }

  // optional string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersysid());
  }

  // optional string ParticipantID = 11;
  if (this->participantid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->participantid());
  }

  // optional string ClientID = 12;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  // optional string TradingRole = 13;
  if (this->tradingrole().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingrole());
  }

  // optional string ExchangeInstID = 14;
  if (this->exchangeinstid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeinstid());
  }

  // optional string OffsetFlag = 15;
  if (this->offsetflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->offsetflag());
  }

  // optional string HedgeFlag = 16;
  if (this->hedgeflag().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hedgeflag());
  }

  // optional double Price = 17;
  if (this->price() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 Volume = 18;
  if (this->volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional string TradeDate = 19;
  if (this->tradedate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradedate());
  }

  // optional string TradeTime = 20;
  if (this->tradetime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetime());
  }

  // optional string TradeType = 21;
  if (this->tradetype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetype());
  }

  // optional string PriceSource = 22;
  if (this->pricesource().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pricesource());
  }

  // optional string TraderID = 23;
  if (this->traderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderid());
  }

  // optional string OrderLocalID = 24;
  if (this->orderlocalid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderlocalid());
  }

  // optional string ClearingPartID = 25;
  if (this->clearingpartid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clearingpartid());
  }

  // optional string BusinessUnit = 26;
  if (this->businessunit().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->businessunit());
  }

  // optional int32 SequenceNo = 27;
  if (this->sequenceno() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequenceno());
  }

  // optional string TradingDay = 28;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // optional int32 SettlementID = 29;
  if (this->settlementid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlementid());
  }

  // optional int32 BrokerOrderSeq = 30;
  if (this->brokerorderseq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brokerorderseq());
  }

  // optional string TradeSource = 31;
  if (this->tradesource().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradesource());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgTradeRtn::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgTradeRtn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgTradeRtn>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgTradeRtn::MergeFrom(const PBMsgTradeRtn& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.eof() != 0) {
    set_eof(from.eof());
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.orderref().size() > 0) {

    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.tradeid().size() > 0) {

    tradeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeid_);
  }
  if (from.direction().size() > 0) {

    direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from.ordersysid().size() > 0) {

    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  if (from.participantid().size() > 0) {

    participantid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.participantid_);
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.tradingrole().size() > 0) {

    tradingrole_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingrole_);
  }
  if (from.exchangeinstid().size() > 0) {

    exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  if (from.offsetflag().size() > 0) {

    offsetflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offsetflag_);
  }
  if (from.hedgeflag().size() > 0) {

    hedgeflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hedgeflag_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.tradedate().size() > 0) {

    tradedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradedate_);
  }
  if (from.tradetime().size() > 0) {

    tradetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetime_);
  }
  if (from.tradetype().size() > 0) {

    tradetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetype_);
  }
  if (from.pricesource().size() > 0) {

    pricesource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pricesource_);
  }
  if (from.traderid().size() > 0) {

    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  if (from.orderlocalid().size() > 0) {

    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  if (from.clearingpartid().size() > 0) {

    clearingpartid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clearingpartid_);
  }
  if (from.businessunit().size() > 0) {

    businessunit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.businessunit_);
  }
  if (from.sequenceno() != 0) {
    set_sequenceno(from.sequenceno());
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.settlementid() != 0) {
    set_settlementid(from.settlementid());
  }
  if (from.brokerorderseq() != 0) {
    set_brokerorderseq(from.brokerorderseq());
  }
  if (from.tradesource().size() > 0) {

    tradesource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradesource_);
  }
}

void PBMsgTradeRtn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgTradeRtn::CopyFrom(const PBMsgTradeRtn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgTradeRtn::IsInitialized() const {

  return true;
}

void PBMsgTradeRtn::Swap(PBMsgTradeRtn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgTradeRtn::InternalSwap(PBMsgTradeRtn* other) {
  std::swap(eof_, other->eof_);
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  orderref_.Swap(&other->orderref_);
  userid_.Swap(&other->userid_);
  exchangeid_.Swap(&other->exchangeid_);
  tradeid_.Swap(&other->tradeid_);
  direction_.Swap(&other->direction_);
  ordersysid_.Swap(&other->ordersysid_);
  participantid_.Swap(&other->participantid_);
  clientid_.Swap(&other->clientid_);
  tradingrole_.Swap(&other->tradingrole_);
  exchangeinstid_.Swap(&other->exchangeinstid_);
  offsetflag_.Swap(&other->offsetflag_);
  hedgeflag_.Swap(&other->hedgeflag_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  tradedate_.Swap(&other->tradedate_);
  tradetime_.Swap(&other->tradetime_);
  tradetype_.Swap(&other->tradetype_);
  pricesource_.Swap(&other->pricesource_);
  traderid_.Swap(&other->traderid_);
  orderlocalid_.Swap(&other->orderlocalid_);
  clearingpartid_.Swap(&other->clearingpartid_);
  businessunit_.Swap(&other->businessunit_);
  std::swap(sequenceno_, other->sequenceno_);
  tradingday_.Swap(&other->tradingday_);
  std::swap(settlementid_, other->settlementid_);
  std::swap(brokerorderseq_, other->brokerorderseq_);
  tradesource_.Swap(&other->tradesource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgTradeRtn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgTradeRtn_descriptor_;
  metadata.reflection = PBMsgTradeRtn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgTradeRtn

// optional int32 EOF = 1;
void PBMsgTradeRtn::clear_eof() {
  eof_ = 0;
}
 ::google::protobuf::int32 PBMsgTradeRtn::eof() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.EOF)
  return eof_;
}
 void PBMsgTradeRtn::set_eof(::google::protobuf::int32 value) {
  
  eof_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.EOF)
}

// optional string BrokerID = 2;
void PBMsgTradeRtn::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}
 void PBMsgTradeRtn::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}
 void PBMsgTradeRtn::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}
 ::std::string* PBMsgTradeRtn::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgTradeRtn::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}
 void PBMsgTradeRtn::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}
 void PBMsgTradeRtn::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}
 ::std::string* PBMsgTradeRtn::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.InvestorID)
}

// optional string InstrumentID = 4;
void PBMsgTradeRtn::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::instrumentid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
  return instrumentid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}
 void PBMsgTradeRtn::set_instrumentid(const char* value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}
 void PBMsgTradeRtn::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}
 ::std::string* PBMsgTradeRtn::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_instrumentid() {
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.InstrumentID)
}

// optional string OrderRef = 5;
void PBMsgTradeRtn::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::orderref() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OrderRef)
  return orderref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}
 void PBMsgTradeRtn::set_orderref(const char* value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}
 void PBMsgTradeRtn::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}
 ::std::string* PBMsgTradeRtn::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_orderref() {
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OrderRef)
}

// optional string UserID = 6;
void PBMsgTradeRtn::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::userid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.UserID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.UserID)
}
 void PBMsgTradeRtn::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.UserID)
}
 void PBMsgTradeRtn::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.UserID)
}
 ::std::string* PBMsgTradeRtn::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.UserID)
}

// optional string ExchangeID = 7;
void PBMsgTradeRtn::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::exchangeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
  return exchangeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}
 void PBMsgTradeRtn::set_exchangeid(const char* value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}
 void PBMsgTradeRtn::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}
 ::std::string* PBMsgTradeRtn::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_exchangeid() {
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ExchangeID)
}

// optional string TradeID = 8;
void PBMsgTradeRtn::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradeid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeID)
  return tradeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeID)
}
 void PBMsgTradeRtn::set_tradeid(const char* value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeID)
}
 void PBMsgTradeRtn::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeID)
}
 ::std::string* PBMsgTradeRtn::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeID)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradeid() {
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeID)
}

// optional string Direction = 9;
void PBMsgTradeRtn::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::direction() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.Direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.Direction)
}
 void PBMsgTradeRtn::set_direction(const char* value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.Direction)
}
 void PBMsgTradeRtn::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.Direction)
}
 ::std::string* PBMsgTradeRtn::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.Direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_direction() {
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.Direction)
}

// optional string OrderSysID = 10;
void PBMsgTradeRtn::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::ordersysid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
  return ordersysid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}
 void PBMsgTradeRtn::set_ordersysid(const char* value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}
 void PBMsgTradeRtn::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}
 ::std::string* PBMsgTradeRtn::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_ordersysid() {
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OrderSysID)
}

// optional string ParticipantID = 11;
void PBMsgTradeRtn::clear_participantid() {
  participantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::participantid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
  return participantid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_participantid(const ::std::string& value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}
 void PBMsgTradeRtn::set_participantid(const char* value) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}
 void PBMsgTradeRtn::set_participantid(const char* value, size_t size) {
  
  participantid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}
 ::std::string* PBMsgTradeRtn::mutable_participantid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
  return participantid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_participantid() {
  
  return participantid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_participantid(::std::string* participantid) {
  if (participantid != NULL) {
    
  } else {
    
  }
  participantid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), participantid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ParticipantID)
}

// optional string ClientID = 12;
void PBMsgTradeRtn::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::clientid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ClientID)
}
 void PBMsgTradeRtn::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ClientID)
}
 void PBMsgTradeRtn::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ClientID)
}
 ::std::string* PBMsgTradeRtn::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_clientid() {
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ClientID)
}

// optional string TradingRole = 13;
void PBMsgTradeRtn::clear_tradingrole() {
  tradingrole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradingrole() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradingRole)
  return tradingrole_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradingrole(const ::std::string& value) {
  
  tradingrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}
 void PBMsgTradeRtn::set_tradingrole(const char* value) {
  
  tradingrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}
 void PBMsgTradeRtn::set_tradingrole(const char* value, size_t size) {
  
  tradingrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}
 ::std::string* PBMsgTradeRtn::mutable_tradingrole() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradingRole)
  return tradingrole_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradingrole() {
  
  return tradingrole_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradingrole(::std::string* tradingrole) {
  if (tradingrole != NULL) {
    
  } else {
    
  }
  tradingrole_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingrole);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradingRole)
}

// optional string ExchangeInstID = 14;
void PBMsgTradeRtn::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
  return exchangeinstid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}
 void PBMsgTradeRtn::set_exchangeinstid(const char* value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}
 void PBMsgTradeRtn::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}
 ::std::string* PBMsgTradeRtn::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_exchangeinstid() {
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ExchangeInstID)
}

// optional string OffsetFlag = 15;
void PBMsgTradeRtn::clear_offsetflag() {
  offsetflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::offsetflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
  return offsetflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_offsetflag(const ::std::string& value) {
  
  offsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}
 void PBMsgTradeRtn::set_offsetflag(const char* value) {
  
  offsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}
 void PBMsgTradeRtn::set_offsetflag(const char* value, size_t size) {
  
  offsetflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}
 ::std::string* PBMsgTradeRtn::mutable_offsetflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
  return offsetflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_offsetflag() {
  
  return offsetflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_offsetflag(::std::string* offsetflag) {
  if (offsetflag != NULL) {
    
  } else {
    
  }
  offsetflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offsetflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OffsetFlag)
}

// optional string HedgeFlag = 16;
void PBMsgTradeRtn::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::hedgeflag() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
  return hedgeflag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}
 void PBMsgTradeRtn::set_hedgeflag(const char* value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}
 void PBMsgTradeRtn::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}
 ::std::string* PBMsgTradeRtn::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_hedgeflag() {
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.HedgeFlag)
}

// optional double Price = 17;
void PBMsgTradeRtn::clear_price() {
  price_ = 0;
}
 double PBMsgTradeRtn::price() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.Price)
  return price_;
}
 void PBMsgTradeRtn::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.Price)
}

// optional int32 Volume = 18;
void PBMsgTradeRtn::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 PBMsgTradeRtn::volume() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.Volume)
  return volume_;
}
 void PBMsgTradeRtn::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.Volume)
}

// optional string TradeDate = 19;
void PBMsgTradeRtn::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradedate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeDate)
  return tradedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradedate(const ::std::string& value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}
 void PBMsgTradeRtn::set_tradedate(const char* value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}
 void PBMsgTradeRtn::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}
 ::std::string* PBMsgTradeRtn::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradedate() {
  
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeDate)
}

// optional string TradeTime = 20;
void PBMsgTradeRtn::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradetime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeTime)
  return tradetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradetime(const ::std::string& value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}
 void PBMsgTradeRtn::set_tradetime(const char* value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}
 void PBMsgTradeRtn::set_tradetime(const char* value, size_t size) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}
 ::std::string* PBMsgTradeRtn::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradetime() {
  
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeTime)
}

// optional string TradeType = 21;
void PBMsgTradeRtn::clear_tradetype() {
  tradetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradetype() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeType)
  return tradetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradetype(const ::std::string& value) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeType)
}
 void PBMsgTradeRtn::set_tradetype(const char* value) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeType)
}
 void PBMsgTradeRtn::set_tradetype(const char* value, size_t size) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeType)
}
 ::std::string* PBMsgTradeRtn::mutable_tradetype() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeType)
  return tradetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradetype() {
  
  return tradetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradetype(::std::string* tradetype) {
  if (tradetype != NULL) {
    
  } else {
    
  }
  tradetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetype);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeType)
}

// optional string PriceSource = 22;
void PBMsgTradeRtn::clear_pricesource() {
  pricesource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::pricesource() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.PriceSource)
  return pricesource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_pricesource(const ::std::string& value) {
  
  pricesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}
 void PBMsgTradeRtn::set_pricesource(const char* value) {
  
  pricesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}
 void PBMsgTradeRtn::set_pricesource(const char* value, size_t size) {
  
  pricesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}
 ::std::string* PBMsgTradeRtn::mutable_pricesource() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.PriceSource)
  return pricesource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_pricesource() {
  
  return pricesource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_pricesource(::std::string* pricesource) {
  if (pricesource != NULL) {
    
  } else {
    
  }
  pricesource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricesource);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.PriceSource)
}

// optional string TraderID = 23;
void PBMsgTradeRtn::clear_traderid() {
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::traderid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TraderID)
  return traderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_traderid(const ::std::string& value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TraderID)
}
 void PBMsgTradeRtn::set_traderid(const char* value) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TraderID)
}
 void PBMsgTradeRtn::set_traderid(const char* value, size_t size) {
  
  traderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TraderID)
}
 ::std::string* PBMsgTradeRtn::mutable_traderid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TraderID)
  return traderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_traderid() {
  
  return traderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_traderid(::std::string* traderid) {
  if (traderid != NULL) {
    
  } else {
    
  }
  traderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traderid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TraderID)
}

// optional string OrderLocalID = 24;
void PBMsgTradeRtn::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::orderlocalid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
  return orderlocalid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}
 void PBMsgTradeRtn::set_orderlocalid(const char* value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}
 void PBMsgTradeRtn::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}
 ::std::string* PBMsgTradeRtn::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_orderlocalid() {
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.OrderLocalID)
}

// optional string ClearingPartID = 25;
void PBMsgTradeRtn::clear_clearingpartid() {
  clearingpartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::clearingpartid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
  return clearingpartid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_clearingpartid(const ::std::string& value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}
 void PBMsgTradeRtn::set_clearingpartid(const char* value) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}
 void PBMsgTradeRtn::set_clearingpartid(const char* value, size_t size) {
  
  clearingpartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}
 ::std::string* PBMsgTradeRtn::mutable_clearingpartid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
  return clearingpartid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_clearingpartid() {
  
  return clearingpartid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_clearingpartid(::std::string* clearingpartid) {
  if (clearingpartid != NULL) {
    
  } else {
    
  }
  clearingpartid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clearingpartid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.ClearingPartID)
}

// optional string BusinessUnit = 26;
void PBMsgTradeRtn::clear_businessunit() {
  businessunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::businessunit() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
  return businessunit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_businessunit(const ::std::string& value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}
 void PBMsgTradeRtn::set_businessunit(const char* value) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}
 void PBMsgTradeRtn::set_businessunit(const char* value, size_t size) {
  
  businessunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}
 ::std::string* PBMsgTradeRtn::mutable_businessunit() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
  return businessunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_businessunit() {
  
  return businessunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_businessunit(::std::string* businessunit) {
  if (businessunit != NULL) {
    
  } else {
    
  }
  businessunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), businessunit);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.BusinessUnit)
}

// optional int32 SequenceNo = 27;
void PBMsgTradeRtn::clear_sequenceno() {
  sequenceno_ = 0;
}
 ::google::protobuf::int32 PBMsgTradeRtn::sequenceno() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.SequenceNo)
  return sequenceno_;
}
 void PBMsgTradeRtn::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.SequenceNo)
}

// optional string TradingDay = 28;
void PBMsgTradeRtn::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradingday() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradingDay)
  return tradingday_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}
 void PBMsgTradeRtn::set_tradingday(const char* value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}
 void PBMsgTradeRtn::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}
 ::std::string* PBMsgTradeRtn::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradingday() {
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradingDay)
}

// optional int32 SettlementID = 29;
void PBMsgTradeRtn::clear_settlementid() {
  settlementid_ = 0;
}
 ::google::protobuf::int32 PBMsgTradeRtn::settlementid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.SettlementID)
  return settlementid_;
}
 void PBMsgTradeRtn::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.SettlementID)
}

// optional int32 BrokerOrderSeq = 30;
void PBMsgTradeRtn::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
 ::google::protobuf::int32 PBMsgTradeRtn::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.BrokerOrderSeq)
  return brokerorderseq_;
}
 void PBMsgTradeRtn::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.BrokerOrderSeq)
}

// optional string TradeSource = 31;
void PBMsgTradeRtn::clear_tradesource() {
  tradesource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgTradeRtn::tradesource() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgTradeRtn.TradeSource)
  return tradesource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_tradesource(const ::std::string& value) {
  
  tradesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}
 void PBMsgTradeRtn::set_tradesource(const char* value) {
  
  tradesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}
 void PBMsgTradeRtn::set_tradesource(const char* value, size_t size) {
  
  tradesource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}
 ::std::string* PBMsgTradeRtn::mutable_tradesource() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgTradeRtn.TradeSource)
  return tradesource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgTradeRtn::release_tradesource() {
  
  return tradesource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgTradeRtn::set_allocated_tradesource(::std::string* tradesource) {
  if (tradesource != NULL) {
    
  } else {
    
  }
  tradesource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradesource);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgTradeRtn.TradeSource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgSettlementInfoConfirm::kBrokerIDFieldNumber;
const int PBMsgSettlementInfoConfirm::kInvestorIDFieldNumber;
const int PBMsgSettlementInfoConfirm::kConfirmDateFieldNumber;
const int PBMsgSettlementInfoConfirm::kConfirmTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgSettlementInfoConfirm::PBMsgSettlementInfoConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgSettlementInfoConfirm)
}

void PBMsgSettlementInfoConfirm::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgSettlementInfoConfirm::PBMsgSettlementInfoConfirm(const PBMsgSettlementInfoConfirm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgSettlementInfoConfirm)
}

void PBMsgSettlementInfoConfirm::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgSettlementInfoConfirm::~PBMsgSettlementInfoConfirm() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgSettlementInfoConfirm)
  SharedDtor();
}

void PBMsgSettlementInfoConfirm::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgSettlementInfoConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgSettlementInfoConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgSettlementInfoConfirm_descriptor_;
}

const PBMsgSettlementInfoConfirm& PBMsgSettlementInfoConfirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgSettlementInfoConfirm* PBMsgSettlementInfoConfirm::default_instance_ = NULL;

PBMsgSettlementInfoConfirm* PBMsgSettlementInfoConfirm::New(::google::protobuf::Arena* arena) const {
  PBMsgSettlementInfoConfirm* n = new PBMsgSettlementInfoConfirm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgSettlementInfoConfirm::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgSettlementInfoConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgSettlementInfoConfirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ConfirmDate;
        break;
      }

      // optional string ConfirmDate = 4;
      case 4: {
        if (tag == 34) {
         parse_ConfirmDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirmdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->confirmdate().data(), this->confirmdate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ConfirmTime;
        break;
      }

      // optional string ConfirmTime = 5;
      case 5: {
        if (tag == 42) {
         parse_ConfirmTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirmtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->confirmtime().data(), this->confirmtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgSettlementInfoConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgSettlementInfoConfirm)
  return false;
#undef DO_
}

void PBMsgSettlementInfoConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgSettlementInfoConfirm)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string ConfirmDate = 4;
  if (this->confirmdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirmdate().data(), this->confirmdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->confirmdate(), output);
  }

  // optional string ConfirmTime = 5;
  if (this->confirmtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirmtime().data(), this->confirmtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->confirmtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgSettlementInfoConfirm)
}

::google::protobuf::uint8* PBMsgSettlementInfoConfirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgSettlementInfoConfirm)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string ConfirmDate = 4;
  if (this->confirmdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirmdate().data(), this->confirmdate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->confirmdate(), target);
  }

  // optional string ConfirmTime = 5;
  if (this->confirmtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirmtime().data(), this->confirmtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->confirmtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgSettlementInfoConfirm)
  return target;
}

int PBMsgSettlementInfoConfirm::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string ConfirmDate = 4;
  if (this->confirmdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->confirmdate());
  }

  // optional string ConfirmTime = 5;
  if (this->confirmtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->confirmtime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgSettlementInfoConfirm::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgSettlementInfoConfirm* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgSettlementInfoConfirm>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgSettlementInfoConfirm::MergeFrom(const PBMsgSettlementInfoConfirm& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.confirmdate().size() > 0) {

    confirmdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirmdate_);
  }
  if (from.confirmtime().size() > 0) {

    confirmtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirmtime_);
  }
}

void PBMsgSettlementInfoConfirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgSettlementInfoConfirm::CopyFrom(const PBMsgSettlementInfoConfirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgSettlementInfoConfirm::IsInitialized() const {

  return true;
}

void PBMsgSettlementInfoConfirm::Swap(PBMsgSettlementInfoConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgSettlementInfoConfirm::InternalSwap(PBMsgSettlementInfoConfirm* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  confirmdate_.Swap(&other->confirmdate_);
  confirmtime_.Swap(&other->confirmtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgSettlementInfoConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgSettlementInfoConfirm_descriptor_;
  metadata.reflection = PBMsgSettlementInfoConfirm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgSettlementInfoConfirm

// optional string BrokerID = 2;
void PBMsgSettlementInfoConfirm::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgSettlementInfoConfirm::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}
 void PBMsgSettlementInfoConfirm::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}
 void PBMsgSettlementInfoConfirm::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}
 ::std::string* PBMsgSettlementInfoConfirm::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgSettlementInfoConfirm::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgSettlementInfoConfirm::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgSettlementInfoConfirm::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}
 void PBMsgSettlementInfoConfirm::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}
 void PBMsgSettlementInfoConfirm::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}
 ::std::string* PBMsgSettlementInfoConfirm::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgSettlementInfoConfirm::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.InvestorID)
}

// optional string ConfirmDate = 4;
void PBMsgSettlementInfoConfirm::clear_confirmdate() {
  confirmdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgSettlementInfoConfirm::confirmdate() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
  return confirmdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_confirmdate(const ::std::string& value) {
  
  confirmdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}
 void PBMsgSettlementInfoConfirm::set_confirmdate(const char* value) {
  
  confirmdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}
 void PBMsgSettlementInfoConfirm::set_confirmdate(const char* value, size_t size) {
  
  confirmdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}
 ::std::string* PBMsgSettlementInfoConfirm::mutable_confirmdate() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
  return confirmdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgSettlementInfoConfirm::release_confirmdate() {
  
  return confirmdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_allocated_confirmdate(::std::string* confirmdate) {
  if (confirmdate != NULL) {
    
  } else {
    
  }
  confirmdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmdate);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmDate)
}

// optional string ConfirmTime = 5;
void PBMsgSettlementInfoConfirm::clear_confirmtime() {
  confirmtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgSettlementInfoConfirm::confirmtime() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
  return confirmtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_confirmtime(const ::std::string& value) {
  
  confirmtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}
 void PBMsgSettlementInfoConfirm::set_confirmtime(const char* value) {
  
  confirmtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}
 void PBMsgSettlementInfoConfirm::set_confirmtime(const char* value, size_t size) {
  
  confirmtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}
 ::std::string* PBMsgSettlementInfoConfirm::mutable_confirmtime() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
  return confirmtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgSettlementInfoConfirm::release_confirmtime() {
  
  return confirmtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgSettlementInfoConfirm::set_allocated_confirmtime(::std::string* confirmtime) {
  if (confirmtime != NULL) {
    
  } else {
    
  }
  confirmtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmtime);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgSettlementInfoConfirm.ConfirmTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgReqConnect::kBrokerIDFieldNumber;
const int PBMsgReqConnect::kInvestorIDFieldNumber;
const int PBMsgReqConnect::kTradeFrontFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgReqConnect::PBMsgReqConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgReqConnect)
}

void PBMsgReqConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgReqConnect::PBMsgReqConnect(const PBMsgReqConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgReqConnect)
}

void PBMsgReqConnect::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradefront_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgReqConnect::~PBMsgReqConnect() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgReqConnect)
  SharedDtor();
}

void PBMsgReqConnect::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradefront_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgReqConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgReqConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgReqConnect_descriptor_;
}

const PBMsgReqConnect& PBMsgReqConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgReqConnect* PBMsgReqConnect::default_instance_ = NULL;

PBMsgReqConnect* PBMsgReqConnect::New(::google::protobuf::Arena* arena) const {
  PBMsgReqConnect* n = new PBMsgReqConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgReqConnect::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradefront_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgReqConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgReqConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgReqConnect.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgReqConnect.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TradeFront;
        break;
      }

      // optional string TradeFront = 4;
      case 4: {
        if (tag == 34) {
         parse_TradeFront:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradefront()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradefront().data(), this->tradefront().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgReqConnect.TradeFront"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgReqConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgReqConnect)
  return false;
#undef DO_
}

void PBMsgReqConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgReqConnect)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgReqConnect.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgReqConnect.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string TradeFront = 4;
  if (this->tradefront().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradefront().data(), this->tradefront().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgReqConnect.TradeFront");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradefront(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgReqConnect)
}

::google::protobuf::uint8* PBMsgReqConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgReqConnect)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgReqConnect.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgReqConnect.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string TradeFront = 4;
  if (this->tradefront().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradefront().data(), this->tradefront().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgReqConnect.TradeFront");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradefront(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgReqConnect)
  return target;
}

int PBMsgReqConnect::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string TradeFront = 4;
  if (this->tradefront().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradefront());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgReqConnect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgReqConnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgReqConnect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgReqConnect::MergeFrom(const PBMsgReqConnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.tradefront().size() > 0) {

    tradefront_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradefront_);
  }
}

void PBMsgReqConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgReqConnect::CopyFrom(const PBMsgReqConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgReqConnect::IsInitialized() const {

  return true;
}

void PBMsgReqConnect::Swap(PBMsgReqConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgReqConnect::InternalSwap(PBMsgReqConnect* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  tradefront_.Swap(&other->tradefront_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgReqConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgReqConnect_descriptor_;
  metadata.reflection = PBMsgReqConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgReqConnect

// optional string BrokerID = 2;
void PBMsgReqConnect::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgReqConnect::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgReqConnect.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgReqConnect::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgReqConnect.BrokerID)
}
 void PBMsgReqConnect::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgReqConnect.BrokerID)
}
 void PBMsgReqConnect::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgReqConnect.BrokerID)
}
 ::std::string* PBMsgReqConnect::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgReqConnect.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgReqConnect::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgReqConnect::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgReqConnect.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgReqConnect::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgReqConnect::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgReqConnect.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgReqConnect::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgReqConnect.InvestorID)
}
 void PBMsgReqConnect::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgReqConnect.InvestorID)
}
 void PBMsgReqConnect::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgReqConnect.InvestorID)
}
 ::std::string* PBMsgReqConnect::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgReqConnect.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgReqConnect::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgReqConnect::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgReqConnect.InvestorID)
}

// optional string TradeFront = 4;
void PBMsgReqConnect::clear_tradefront() {
  tradefront_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgReqConnect::tradefront() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgReqConnect.TradeFront)
  return tradefront_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgReqConnect::set_tradefront(const ::std::string& value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgReqConnect.TradeFront)
}
 void PBMsgReqConnect::set_tradefront(const char* value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgReqConnect.TradeFront)
}
 void PBMsgReqConnect::set_tradefront(const char* value, size_t size) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgReqConnect.TradeFront)
}
 ::std::string* PBMsgReqConnect::mutable_tradefront() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgReqConnect.TradeFront)
  return tradefront_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgReqConnect::release_tradefront() {
  
  return tradefront_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgReqConnect::set_allocated_tradefront(::std::string* tradefront) {
  if (tradefront != NULL) {
    
  } else {
    
  }
  tradefront_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradefront);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgReqConnect.TradeFront)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMsgRspConnect::kBrokerIDFieldNumber;
const int PBMsgRspConnect::kInvestorIDFieldNumber;
const int PBMsgRspConnect::kTradeFrontFieldNumber;
const int PBMsgRspConnect::kReqURIFieldNumber;
const int PBMsgRspConnect::kRspURIFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMsgRspConnect::PBMsgRspConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMsgTrader.PBMsgRspConnect)
}

void PBMsgRspConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PBMsgRspConnect::PBMsgRspConnect(const PBMsgRspConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMsgTrader.PBMsgRspConnect)
}

void PBMsgRspConnect::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradefront_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rspuri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PBMsgRspConnect::~PBMsgRspConnect() {
  // @@protoc_insertion_point(destructor:PBMsgTrader.PBMsgRspConnect)
  SharedDtor();
}

void PBMsgRspConnect::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradefront_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rspuri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PBMsgRspConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgRspConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgRspConnect_descriptor_;
}

const PBMsgRspConnect& PBMsgRspConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgTrader_2eproto();
  return *default_instance_;
}

PBMsgRspConnect* PBMsgRspConnect::default_instance_ = NULL;

PBMsgRspConnect* PBMsgRspConnect::New(::google::protobuf::Arena* arena) const {
  PBMsgRspConnect* n = new PBMsgRspConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMsgRspConnect::Clear() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradefront_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rspuri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBMsgRspConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMsgTrader.PBMsgRspConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BrokerID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgRspConnect.BrokerID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }

      // optional string InvestorID = 3;
      case 3: {
        if (tag == 26) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgRspConnect.InvestorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TradeFront;
        break;
      }

      // optional string TradeFront = 4;
      case 4: {
        if (tag == 34) {
         parse_TradeFront:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradefront()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradefront().data(), this->tradefront().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgRspConnect.TradeFront"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ReqURI;
        break;
      }

      // optional string ReqURI = 5;
      case 5: {
        if (tag == 42) {
         parse_ReqURI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requri().data(), this->requri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgRspConnect.ReqURI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RspURI;
        break;
      }

      // optional string RspURI = 6;
      case 6: {
        if (tag == 50) {
         parse_RspURI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rspuri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rspuri().data(), this->rspuri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMsgTrader.PBMsgRspConnect.RspURI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMsgTrader.PBMsgRspConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMsgTrader.PBMsgRspConnect)
  return false;
#undef DO_
}

void PBMsgRspConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMsgTrader.PBMsgRspConnect)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  // optional string TradeFront = 4;
  if (this->tradefront().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradefront().data(), this->tradefront().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.TradeFront");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradefront(), output);
  }

  // optional string ReqURI = 5;
  if (this->requri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requri().data(), this->requri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.ReqURI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->requri(), output);
  }

  // optional string RspURI = 6;
  if (this->rspuri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rspuri().data(), this->rspuri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.RspURI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rspuri(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMsgTrader.PBMsgRspConnect)
}

::google::protobuf::uint8* PBMsgRspConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBMsgTrader.PBMsgRspConnect)
  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  // optional string TradeFront = 4;
  if (this->tradefront().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradefront().data(), this->tradefront().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.TradeFront");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradefront(), target);
  }

  // optional string ReqURI = 5;
  if (this->requri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requri().data(), this->requri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.ReqURI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->requri(), target);
  }

  // optional string RspURI = 6;
  if (this->rspuri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rspuri().data(), this->rspuri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMsgTrader.PBMsgRspConnect.RspURI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rspuri(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMsgTrader.PBMsgRspConnect)
  return target;
}

int PBMsgRspConnect::ByteSize() const {
  int total_size = 0;

  // optional string BrokerID = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // optional string InvestorID = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // optional string TradeFront = 4;
  if (this->tradefront().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradefront());
  }

  // optional string ReqURI = 5;
  if (this->requri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requri());
  }

  // optional string RspURI = 6;
  if (this->rspuri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rspuri());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgRspConnect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMsgRspConnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMsgRspConnect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgRspConnect::MergeFrom(const PBMsgRspConnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.tradefront().size() > 0) {

    tradefront_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradefront_);
  }
  if (from.requri().size() > 0) {

    requri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requri_);
  }
  if (from.rspuri().size() > 0) {

    rspuri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rspuri_);
  }
}

void PBMsgRspConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgRspConnect::CopyFrom(const PBMsgRspConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgRspConnect::IsInitialized() const {

  return true;
}

void PBMsgRspConnect::Swap(PBMsgRspConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMsgRspConnect::InternalSwap(PBMsgRspConnect* other) {
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  tradefront_.Swap(&other->tradefront_);
  requri_.Swap(&other->requri_);
  rspuri_.Swap(&other->rspuri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMsgRspConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgRspConnect_descriptor_;
  metadata.reflection = PBMsgRspConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMsgRspConnect

// optional string BrokerID = 2;
void PBMsgRspConnect::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgRspConnect::brokerid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.BrokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.BrokerID)
}
 void PBMsgRspConnect::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.BrokerID)
}
 void PBMsgRspConnect::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.BrokerID)
}
 ::std::string* PBMsgRspConnect::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgRspConnect::release_brokerid() {
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.BrokerID)
}

// optional string InvestorID = 3;
void PBMsgRspConnect::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgRspConnect::investorid() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.InvestorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.InvestorID)
}
 void PBMsgRspConnect::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.InvestorID)
}
 void PBMsgRspConnect::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.InvestorID)
}
 ::std::string* PBMsgRspConnect::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgRspConnect::release_investorid() {
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.InvestorID)
}

// optional string TradeFront = 4;
void PBMsgRspConnect::clear_tradefront() {
  tradefront_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgRspConnect::tradefront() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.TradeFront)
  return tradefront_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_tradefront(const ::std::string& value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.TradeFront)
}
 void PBMsgRspConnect::set_tradefront(const char* value) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.TradeFront)
}
 void PBMsgRspConnect::set_tradefront(const char* value, size_t size) {
  
  tradefront_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.TradeFront)
}
 ::std::string* PBMsgRspConnect::mutable_tradefront() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.TradeFront)
  return tradefront_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgRspConnect::release_tradefront() {
  
  return tradefront_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_allocated_tradefront(::std::string* tradefront) {
  if (tradefront != NULL) {
    
  } else {
    
  }
  tradefront_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradefront);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.TradeFront)
}

// optional string ReqURI = 5;
void PBMsgRspConnect::clear_requri() {
  requri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgRspConnect::requri() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.ReqURI)
  return requri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_requri(const ::std::string& value) {
  
  requri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.ReqURI)
}
 void PBMsgRspConnect::set_requri(const char* value) {
  
  requri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.ReqURI)
}
 void PBMsgRspConnect::set_requri(const char* value, size_t size) {
  
  requri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.ReqURI)
}
 ::std::string* PBMsgRspConnect::mutable_requri() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.ReqURI)
  return requri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgRspConnect::release_requri() {
  
  return requri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_allocated_requri(::std::string* requri) {
  if (requri != NULL) {
    
  } else {
    
  }
  requri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requri);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.ReqURI)
}

// optional string RspURI = 6;
void PBMsgRspConnect::clear_rspuri() {
  rspuri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PBMsgRspConnect::rspuri() const {
  // @@protoc_insertion_point(field_get:PBMsgTrader.PBMsgRspConnect.RspURI)
  return rspuri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_rspuri(const ::std::string& value) {
  
  rspuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMsgTrader.PBMsgRspConnect.RspURI)
}
 void PBMsgRspConnect::set_rspuri(const char* value) {
  
  rspuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMsgTrader.PBMsgRspConnect.RspURI)
}
 void PBMsgRspConnect::set_rspuri(const char* value, size_t size) {
  
  rspuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMsgTrader.PBMsgRspConnect.RspURI)
}
 ::std::string* PBMsgRspConnect::mutable_rspuri() {
  
  // @@protoc_insertion_point(field_mutable:PBMsgTrader.PBMsgRspConnect.RspURI)
  return rspuri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBMsgRspConnect::release_rspuri() {
  
  return rspuri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBMsgRspConnect::set_allocated_rspuri(::std::string* rspuri) {
  if (rspuri != NULL) {
    
  } else {
    
  }
  rspuri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rspuri);
  // @@protoc_insertion_point(field_set_allocated:PBMsgTrader.PBMsgRspConnect.RspURI)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PBMsgTrader

// @@protoc_insertion_point(global_scope)
