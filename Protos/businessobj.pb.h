// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: businessobj.proto

#ifndef PROTOBUF_businessobj_2eproto__INCLUDED
#define PROTOBUF_businessobj_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "commondefine.pb.h"
#include "modelalgorithm.pb.h"
// @@protoc_insertion_point(includes)

namespace Micro {
namespace Future {
namespace Message {
namespace Business {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_businessobj_2eproto();
void protobuf_AssignDesc_businessobj_2eproto();
void protobuf_ShutdownFile_businessobj_2eproto();

class PBAccountInfo;
class PBBankInfo;
class PBBankOpRequest;
class PBBankOpResult;
class PBContractInfo;
class PBContractInfoList;
class PBContractParam;
class PBContractParamList;
class PBMarketData;
class PBMarketDataList;
class PBMarketInfo;
class PBOTCUserParam;
class PBOTCUserParamList;
class PBOptionData;
class PBOrderInfo;
class PBOrderRequest;
class PBPortfolio;
class PBPortfolioList;
class PBPosition;
class PBPricingContract;
class PBPricingData;
class PBPricingDataList;
class PBStrategy;
class PBStrategyList;
class PBTradeInfo;
class PBTradingDeskOptionParams;
class PBUserAccountInfo;

// ===================================================================

class PBMarketData : public ::google::protobuf::Message {
 public:
  PBMarketData();
  virtual ~PBMarketData();

  PBMarketData(const PBMarketData& from);

  inline PBMarketData& operator=(const PBMarketData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMarketData& default_instance();

  void Swap(PBMarketData* other);

  // implements Message ----------------------------------------------

  inline PBMarketData* New() const { return New(NULL); }

  PBMarketData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMarketData& from);
  void MergeFrom(const PBMarketData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMarketData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 3;
  void clear_contract();
  static const int kContractFieldNumber = 3;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional double preCloseValue = 4;
  void clear_preclosevalue();
  static const int kPreCloseValueFieldNumber = 4;
  double preclosevalue() const;
  void set_preclosevalue(double value);

  // optional double openValue = 5;
  void clear_openvalue();
  static const int kOpenValueFieldNumber = 5;
  double openvalue() const;
  void set_openvalue(double value);

  // optional double turnover = 6;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 6;
  double turnover() const;
  void set_turnover(double value);

  // optional int32 volume = 7;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional double highValue = 8;
  void clear_highvalue();
  static const int kHighValueFieldNumber = 8;
  double highvalue() const;
  void set_highvalue(double value);

  // optional double lowValue = 9;
  void clear_lowvalue();
  static const int kLowValueFieldNumber = 9;
  double lowvalue() const;
  void set_lowvalue(double value);

  // optional double matchPrice = 10;
  void clear_matchprice();
  static const int kMatchPriceFieldNumber = 10;
  double matchprice() const;
  void set_matchprice(double value);

  // repeated double askPrice = 11;
  int askprice_size() const;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 11;
  double askprice(int index) const;
  void set_askprice(int index, double value);
  void add_askprice(double value);
  const ::google::protobuf::RepeatedField< double >&
      askprice() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_askprice();

  // repeated int32 askVolume = 12;
  int askvolume_size() const;
  void clear_askvolume();
  static const int kAskVolumeFieldNumber = 12;
  ::google::protobuf::int32 askvolume(int index) const;
  void set_askvolume(int index, ::google::protobuf::int32 value);
  void add_askvolume(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      askvolume() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_askvolume();

  // repeated double bidPrice = 13;
  int bidprice_size() const;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 13;
  double bidprice(int index) const;
  void set_bidprice(int index, double value);
  void add_bidprice(double value);
  const ::google::protobuf::RepeatedField< double >&
      bidprice() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bidprice();

  // repeated int32 bidVolume = 14;
  int bidvolume_size() const;
  void clear_bidvolume();
  static const int kBidVolumeFieldNumber = 14;
  ::google::protobuf::int32 bidvolume(int index) const;
  void set_bidvolume(int index, ::google::protobuf::int32 value);
  void add_bidvolume(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bidvolume() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bidvolume();

  // optional double preSettlePrice = 15;
  void clear_presettleprice();
  static const int kPreSettlePriceFieldNumber = 15;
  double presettleprice() const;
  void set_presettleprice(double value);

  // optional double priceChange = 16;
  void clear_pricechange();
  static const int kPriceChangeFieldNumber = 16;
  double pricechange() const;
  void set_pricechange(double value);

  // optional double settlePrice = 17;
  void clear_settleprice();
  static const int kSettlePriceFieldNumber = 17;
  double settleprice() const;
  void set_settleprice(double value);

  // optional int32 highLimit = 18;
  void clear_highlimit();
  static const int kHighLimitFieldNumber = 18;
  ::google::protobuf::int32 highlimit() const;
  void set_highlimit(::google::protobuf::int32 value);

  // optional int32 lowLimit = 19;
  void clear_lowlimit();
  static const int kLowLimitFieldNumber = 19;
  ::google::protobuf::int32 lowlimit() const;
  void set_lowlimit(::google::protobuf::int32 value);

  // optional double preOpenInterest = 20;
  void clear_preopeninterest();
  static const int kPreOpenInterestFieldNumber = 20;
  double preopeninterest() const;
  void set_preopeninterest(double value);

  // optional double openInterest = 21;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 21;
  double openinterest() const;
  void set_openinterest(double value);

  // optional double averagePrice = 22;
  void clear_averageprice();
  static const int kAveragePriceFieldNumber = 22;
  double averageprice() const;
  void set_averageprice(double value);

  // optional int32 updateTime = 23;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 23;
  ::google::protobuf::int32 updatetime() const;
  void set_updatetime(::google::protobuf::int32 value);

  // optional int32 tradingDay = 24;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 24;
  ::google::protobuf::int32 tradingday() const;
  void set_tradingday(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBMarketData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  double preclosevalue_;
  double openvalue_;
  double turnover_;
  double highvalue_;
  double lowvalue_;
  double matchprice_;
  ::google::protobuf::RepeatedField< double > askprice_;
  mutable int _askprice_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > askvolume_;
  mutable int _askvolume_cached_byte_size_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 highlimit_;
  ::google::protobuf::RepeatedField< double > bidprice_;
  mutable int _bidprice_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bidvolume_;
  mutable int _bidvolume_cached_byte_size_;
  double presettleprice_;
  double pricechange_;
  double settleprice_;
  double preopeninterest_;
  double openinterest_;
  ::google::protobuf::int32 lowlimit_;
  ::google::protobuf::int32 updatetime_;
  double averageprice_;
  ::google::protobuf::int32 tradingday_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBMarketData* default_instance_;
};
// -------------------------------------------------------------------

class PBMarketDataList : public ::google::protobuf::Message {
 public:
  PBMarketDataList();
  virtual ~PBMarketDataList();

  PBMarketDataList(const PBMarketDataList& from);

  inline PBMarketDataList& operator=(const PBMarketDataList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMarketDataList& default_instance();

  void Swap(PBMarketDataList* other);

  // implements Message ----------------------------------------------

  inline PBMarketDataList* New() const { return New(NULL); }

  PBMarketDataList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMarketDataList& from);
  void MergeFrom(const PBMarketDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMarketDataList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.Business.PBMarketData marketData = 2;
  int marketdata_size() const;
  void clear_marketdata();
  static const int kMarketDataFieldNumber = 2;
  const ::Micro::Future::Message::Business::PBMarketData& marketdata(int index) const;
  ::Micro::Future::Message::Business::PBMarketData* mutable_marketdata(int index);
  ::Micro::Future::Message::Business::PBMarketData* add_marketdata();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData >*
      mutable_marketdata();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData >&
      marketdata() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBMarketDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData > marketdata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBMarketDataList* default_instance_;
};
// -------------------------------------------------------------------

class PBPortfolio : public ::google::protobuf::Message {
 public:
  PBPortfolio();
  virtual ~PBPortfolio();

  PBPortfolio(const PBPortfolio& from);

  inline PBPortfolio& operator=(const PBPortfolio& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPortfolio& default_instance();

  void Swap(PBPortfolio* other);

  // implements Message ----------------------------------------------

  inline PBPortfolio* New() const { return New(NULL); }

  PBPortfolio* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPortfolio& from);
  void MergeFrom(const PBPortfolio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBPortfolio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 hedgeDelay = 2;
  void clear_hedgedelay();
  static const int kHedgeDelayFieldNumber = 2;
  ::google::protobuf::int32 hedgedelay() const;
  void set_hedgedelay(::google::protobuf::int32 value);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBPortfolio)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 hedgedelay_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBPortfolio* default_instance_;
};
// -------------------------------------------------------------------

class PBPortfolioList : public ::google::protobuf::Message {
 public:
  PBPortfolioList();
  virtual ~PBPortfolioList();

  PBPortfolioList(const PBPortfolioList& from);

  inline PBPortfolioList& operator=(const PBPortfolioList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPortfolioList& default_instance();

  void Swap(PBPortfolioList* other);

  // implements Message ----------------------------------------------

  inline PBPortfolioList* New() const { return New(NULL); }

  PBPortfolioList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPortfolioList& from);
  void MergeFrom(const PBPortfolioList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBPortfolioList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.Business.PBPortfolio portfolio = 2;
  int portfolio_size() const;
  void clear_portfolio();
  static const int kPortfolioFieldNumber = 2;
  const ::Micro::Future::Message::Business::PBPortfolio& portfolio(int index) const;
  ::Micro::Future::Message::Business::PBPortfolio* mutable_portfolio(int index);
  ::Micro::Future::Message::Business::PBPortfolio* add_portfolio();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPortfolio >*
      mutable_portfolio();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPortfolio >&
      portfolio() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBPortfolioList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPortfolio > portfolio_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBPortfolioList* default_instance_;
};
// -------------------------------------------------------------------

class PBPricingData : public ::google::protobuf::Message {
 public:
  PBPricingData();
  virtual ~PBPricingData();

  PBPricingData(const PBPricingData& from);

  inline PBPricingData& operator=(const PBPricingData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPricingData& default_instance();

  void Swap(PBPricingData* other);

  // implements Message ----------------------------------------------

  inline PBPricingData* New() const { return New(NULL); }

  PBPricingData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPricingData& from);
  void MergeFrom(const PBPricingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBPricingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 3;
  void clear_contract();
  static const int kContractFieldNumber = 3;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional double askPrice = 4;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 4;
  double askprice() const;
  void set_askprice(double value);

  // optional double bidPrice = 5;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 5;
  double bidprice() const;
  void set_bidprice(double value);

  // optional int32 askSize = 6;
  void clear_asksize();
  static const int kAskSizeFieldNumber = 6;
  ::google::protobuf::int32 asksize() const;
  void set_asksize(::google::protobuf::int32 value);

  // optional int32 bidSize = 7;
  void clear_bidsize();
  static const int kBidSizeFieldNumber = 7;
  ::google::protobuf::int32 bidsize() const;
  void set_bidsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBPricingData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  double askprice_;
  double bidprice_;
  ::google::protobuf::int32 asksize_;
  ::google::protobuf::int32 bidsize_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBPricingData* default_instance_;
};
// -------------------------------------------------------------------

class PBPricingDataList : public ::google::protobuf::Message {
 public:
  PBPricingDataList();
  virtual ~PBPricingDataList();

  PBPricingDataList(const PBPricingDataList& from);

  inline PBPricingDataList& operator=(const PBPricingDataList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPricingDataList& default_instance();

  void Swap(PBPricingDataList* other);

  // implements Message ----------------------------------------------

  inline PBPricingDataList* New() const { return New(NULL); }

  PBPricingDataList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPricingDataList& from);
  void MergeFrom(const PBPricingDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBPricingDataList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Micro.Future.Message.Business.PBPricingData pricingData = 1;
  int pricingdata_size() const;
  void clear_pricingdata();
  static const int kPricingDataFieldNumber = 1;
  const ::Micro::Future::Message::Business::PBPricingData& pricingdata(int index) const;
  ::Micro::Future::Message::Business::PBPricingData* mutable_pricingdata(int index);
  ::Micro::Future::Message::Business::PBPricingData* add_pricingdata();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData >*
      mutable_pricingdata();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData >&
      pricingdata() const;

  // optional .Micro.Future.Message.DataHeader header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBPricingDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData > pricingdata_;
  ::Micro::Future::Message::DataHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBPricingDataList* default_instance_;
};
// -------------------------------------------------------------------

class PBOptionData : public ::google::protobuf::Message {
 public:
  PBOptionData();
  virtual ~PBOptionData();

  PBOptionData(const PBOptionData& from);

  inline PBOptionData& operator=(const PBOptionData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBOptionData& default_instance();

  void Swap(PBOptionData* other);

  // implements Message ----------------------------------------------

  inline PBOptionData* New() const { return New(NULL); }

  PBOptionData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBOptionData& from);
  void MergeFrom(const PBOptionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBOptionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double askPrice = 1;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 1;
  double askprice() const;
  void set_askprice(double value);

  // optional double bidPrice = 2;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 2;
  double bidprice() const;
  void set_bidprice(double value);

  // optional int32 askSize = 3;
  void clear_asksize();
  static const int kAskSizeFieldNumber = 3;
  ::google::protobuf::int32 asksize() const;
  void set_asksize(::google::protobuf::int32 value);

  // optional int32 bidSize = 4;
  void clear_bidsize();
  static const int kBidSizeFieldNumber = 4;
  ::google::protobuf::int32 bidsize() const;
  void set_bidsize(::google::protobuf::int32 value);

  // optional double askVolatility = 5;
  void clear_askvolatility();
  static const int kAskVolatilityFieldNumber = 5;
  double askvolatility() const;
  void set_askvolatility(double value);

  // optional double bidVolatility = 6;
  void clear_bidvolatility();
  static const int kBidVolatilityFieldNumber = 6;
  double bidvolatility() const;
  void set_bidvolatility(double value);

  // optional double askDelta = 7;
  void clear_askdelta();
  static const int kAskDeltaFieldNumber = 7;
  double askdelta() const;
  void set_askdelta(double value);

  // optional double bidDelta = 8;
  void clear_biddelta();
  static const int kBidDeltaFieldNumber = 8;
  double biddelta() const;
  void set_biddelta(double value);

  // optional double askTheta = 9;
  void clear_asktheta();
  static const int kAskThetaFieldNumber = 9;
  double asktheta() const;
  void set_asktheta(double value);

  // optional double bidTheta = 10;
  void clear_bidtheta();
  static const int kBidThetaFieldNumber = 10;
  double bidtheta() const;
  void set_bidtheta(double value);

  // optional double askGamma = 11;
  void clear_askgamma();
  static const int kAskGammaFieldNumber = 11;
  double askgamma() const;
  void set_askgamma(double value);

  // optional double bidGamma = 12;
  void clear_bidgamma();
  static const int kBidGammaFieldNumber = 12;
  double bidgamma() const;
  void set_bidgamma(double value);

  // optional double askVega = 13;
  void clear_askvega();
  static const int kAskVegaFieldNumber = 13;
  double askvega() const;
  void set_askvega(double value);

  // optional double bidVega = 14;
  void clear_bidvega();
  static const int kBidVegaFieldNumber = 14;
  double bidvega() const;
  void set_bidvega(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBOptionData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double askprice_;
  double bidprice_;
  ::google::protobuf::int32 asksize_;
  ::google::protobuf::int32 bidsize_;
  double askvolatility_;
  double bidvolatility_;
  double askdelta_;
  double biddelta_;
  double asktheta_;
  double bidtheta_;
  double askgamma_;
  double bidgamma_;
  double askvega_;
  double bidvega_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBOptionData* default_instance_;
};
// -------------------------------------------------------------------

class PBTradingDeskOptionParams : public ::google::protobuf::Message {
 public:
  PBTradingDeskOptionParams();
  virtual ~PBTradingDeskOptionParams();

  PBTradingDeskOptionParams(const PBTradingDeskOptionParams& from);

  inline PBTradingDeskOptionParams& operator=(const PBTradingDeskOptionParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTradingDeskOptionParams& default_instance();

  void Swap(PBTradingDeskOptionParams* other);

  // implements Message ----------------------------------------------

  inline PBTradingDeskOptionParams* New() const { return New(NULL); }

  PBTradingDeskOptionParams* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTradingDeskOptionParams& from);
  void MergeFrom(const PBTradingDeskOptionParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBTradingDeskOptionParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 3;
  void clear_contract();
  static const int kContractFieldNumber = 3;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional .Micro.Future.Message.Business.PBOptionData MarketData = 4;
  bool has_marketdata() const;
  void clear_marketdata();
  static const int kMarketDataFieldNumber = 4;
  const ::Micro::Future::Message::Business::PBOptionData& marketdata() const;
  ::Micro::Future::Message::Business::PBOptionData* mutable_marketdata();
  ::Micro::Future::Message::Business::PBOptionData* release_marketdata();
  void set_allocated_marketdata(::Micro::Future::Message::Business::PBOptionData* marketdata);

  // optional .Micro.Future.Message.Business.PBOptionData TheoData = 5;
  bool has_theodata() const;
  void clear_theodata();
  static const int kTheoDataFieldNumber = 5;
  const ::Micro::Future::Message::Business::PBOptionData& theodata() const;
  ::Micro::Future::Message::Business::PBOptionData* mutable_theodata();
  ::Micro::Future::Message::Business::PBOptionData* release_theodata();
  void set_allocated_theodata(::Micro::Future::Message::Business::PBOptionData* theodata);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBTradingDeskOptionParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::Micro::Future::Message::Business::PBOptionData* marketdata_;
  ::Micro::Future::Message::Business::PBOptionData* theodata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBTradingDeskOptionParams* default_instance_;
};
// -------------------------------------------------------------------

class PBPricingContract : public ::google::protobuf::Message {
 public:
  PBPricingContract();
  virtual ~PBPricingContract();

  PBPricingContract(const PBPricingContract& from);

  inline PBPricingContract& operator=(const PBPricingContract& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPricingContract& default_instance();

  void Swap(PBPricingContract* other);

  // implements Message ----------------------------------------------

  inline PBPricingContract* New() const { return New(NULL); }

  PBPricingContract* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPricingContract& from);
  void MergeFrom(const PBPricingContract& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBPricingContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 2;
  void clear_contract();
  static const int kContractFieldNumber = 2;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional double weight = 3;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  double weight() const;
  void set_weight(double value);

  // optional double adjust = 4;
  void clear_adjust();
  static const int kAdjustFieldNumber = 4;
  double adjust() const;
  void set_adjust(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBPricingContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  double weight_;
  double adjust_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBPricingContract* default_instance_;
};
// -------------------------------------------------------------------

class PBStrategy : public ::google::protobuf::Message {
 public:
  PBStrategy();
  virtual ~PBStrategy();

  PBStrategy(const PBStrategy& from);

  inline PBStrategy& operator=(const PBStrategy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBStrategy& default_instance();

  void Swap(PBStrategy* other);

  // implements Message ----------------------------------------------

  inline PBStrategy* New() const { return New(NULL); }

  PBStrategy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBStrategy& from);
  void MergeFrom(const PBStrategy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBStrategy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 3;
  void clear_contract();
  static const int kContractFieldNumber = 3;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional string underlying = 4;
  void clear_underlying();
  static const int kUnderlyingFieldNumber = 4;
  const ::std::string& underlying() const;
  void set_underlying(const ::std::string& value);
  void set_underlying(const char* value);
  void set_underlying(const char* value, size_t size);
  ::std::string* mutable_underlying();
  ::std::string* release_underlying();
  void set_allocated_underlying(::std::string* underlying);

  // optional string symbol = 5;
  void clear_symbol();
  static const int kSymbolFieldNumber = 5;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional bool hedging = 7;
  void clear_hedging();
  static const int kHedgingFieldNumber = 7;
  bool hedging() const;
  void set_hedging(bool value);

  // optional bool bidEnabled = 8;
  void clear_bidenabled();
  static const int kBidEnabledFieldNumber = 8;
  bool bidenabled() const;
  void set_bidenabled(bool value);

  // optional bool askEnabled = 9;
  void clear_askenabled();
  static const int kAskEnabledFieldNumber = 9;
  bool askenabled() const;
  void set_askenabled(bool value);

  // optional int32 bidQT = 10;
  void clear_bidqt();
  static const int kBidQTFieldNumber = 10;
  ::google::protobuf::int32 bidqt() const;
  void set_bidqt(::google::protobuf::int32 value);

  // optional int32 askQT = 11;
  void clear_askqt();
  static const int kAskQTFieldNumber = 11;
  ::google::protobuf::int32 askqt() const;
  void set_askqt(::google::protobuf::int32 value);

  // optional int32 depth = 12;
  void clear_depth();
  static const int kDepthFieldNumber = 12;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // repeated .Micro.Future.Message.Business.PBPricingContract pricingContracts = 13;
  int pricingcontracts_size() const;
  void clear_pricingcontracts();
  static const int kPricingContractsFieldNumber = 13;
  const ::Micro::Future::Message::Business::PBPricingContract& pricingcontracts(int index) const;
  ::Micro::Future::Message::Business::PBPricingContract* mutable_pricingcontracts(int index);
  ::Micro::Future::Message::Business::PBPricingContract* add_pricingcontracts();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingContract >*
      mutable_pricingcontracts();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingContract >&
      pricingcontracts() const;

  // optional string pricingModel = 14;
  void clear_pricingmodel();
  static const int kPricingModelFieldNumber = 14;
  const ::std::string& pricingmodel() const;
  void set_pricingmodel(const ::std::string& value);
  void set_pricingmodel(const char* value);
  void set_pricingmodel(const char* value, size_t size);
  ::std::string* mutable_pricingmodel();
  ::std::string* release_pricingmodel();
  void set_allocated_pricingmodel(::std::string* pricingmodel);

  // optional string ivModel = 15;
  void clear_ivmodel();
  static const int kIvModelFieldNumber = 15;
  const ::std::string& ivmodel() const;
  void set_ivmodel(const ::std::string& value);
  void set_ivmodel(const char* value);
  void set_ivmodel(const char* value, size_t size);
  ::std::string* mutable_ivmodel();
  ::std::string* release_ivmodel();
  void set_allocated_ivmodel(::std::string* ivmodel);

  // optional string volModel = 16;
  void clear_volmodel();
  static const int kVolModelFieldNumber = 16;
  const ::std::string& volmodel() const;
  void set_volmodel(const ::std::string& value);
  void set_volmodel(const char* value);
  void set_volmodel(const char* value, size_t size);
  ::std::string* mutable_volmodel();
  ::std::string* release_volmodel();
  void set_allocated_volmodel(::std::string* volmodel);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBStrategy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::internal::ArenaStringPtr underlying_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool hedging_;
  bool bidenabled_;
  bool askenabled_;
  ::google::protobuf::int32 bidqt_;
  ::google::protobuf::int32 askqt_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingContract > pricingcontracts_;
  ::google::protobuf::internal::ArenaStringPtr pricingmodel_;
  ::google::protobuf::internal::ArenaStringPtr ivmodel_;
  ::google::protobuf::internal::ArenaStringPtr volmodel_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBStrategy* default_instance_;
};
// -------------------------------------------------------------------

class PBStrategyList : public ::google::protobuf::Message {
 public:
  PBStrategyList();
  virtual ~PBStrategyList();

  PBStrategyList(const PBStrategyList& from);

  inline PBStrategyList& operator=(const PBStrategyList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBStrategyList& default_instance();

  void Swap(PBStrategyList* other);

  // implements Message ----------------------------------------------

  inline PBStrategyList* New() const { return New(NULL); }

  PBStrategyList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBStrategyList& from);
  void MergeFrom(const PBStrategyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBStrategyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.Business.PBStrategy strategy = 2;
  int strategy_size() const;
  void clear_strategy();
  static const int kStrategyFieldNumber = 2;
  const ::Micro::Future::Message::Business::PBStrategy& strategy(int index) const;
  ::Micro::Future::Message::Business::PBStrategy* mutable_strategy(int index);
  ::Micro::Future::Message::Business::PBStrategy* add_strategy();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy >*
      mutable_strategy();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy >&
      strategy() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBStrategyList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy > strategy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBStrategyList* default_instance_;
};
// -------------------------------------------------------------------

class PBContractParam : public ::google::protobuf::Message {
 public:
  PBContractParam();
  virtual ~PBContractParam();

  PBContractParam(const PBContractParam& from);

  inline PBContractParam& operator=(const PBContractParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBContractParam& default_instance();

  void Swap(PBContractParam* other);

  // implements Message ----------------------------------------------

  inline PBContractParam* New() const { return New(NULL); }

  PBContractParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBContractParam& from);
  void MergeFrom(const PBContractParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBContractParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 2;
  void clear_contract();
  static const int kContractFieldNumber = 2;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional int32 depthVol = 3;
  void clear_depthvol();
  static const int kDepthVolFieldNumber = 3;
  ::google::protobuf::int32 depthvol() const;
  void set_depthvol(::google::protobuf::int32 value);

  // optional double gamma = 4;
  void clear_gamma();
  static const int kGammaFieldNumber = 4;
  double gamma() const;
  void set_gamma(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBContractParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  double gamma_;
  ::google::protobuf::int32 depthvol_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBContractParam* default_instance_;
};
// -------------------------------------------------------------------

class PBContractParamList : public ::google::protobuf::Message {
 public:
  PBContractParamList();
  virtual ~PBContractParamList();

  PBContractParamList(const PBContractParamList& from);

  inline PBContractParamList& operator=(const PBContractParamList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBContractParamList& default_instance();

  void Swap(PBContractParamList* other);

  // implements Message ----------------------------------------------

  inline PBContractParamList* New() const { return New(NULL); }

  PBContractParamList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBContractParamList& from);
  void MergeFrom(const PBContractParamList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBContractParamList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.Business.PBContractParam params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::Micro::Future::Message::Business::PBContractParam& params(int index) const;
  ::Micro::Future::Message::Business::PBContractParam* mutable_params(int index);
  ::Micro::Future::Message::Business::PBContractParam* add_params();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam >&
      params() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBContractParamList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam > params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBContractParamList* default_instance_;
};
// -------------------------------------------------------------------

class PBOTCUserParam : public ::google::protobuf::Message {
 public:
  PBOTCUserParam();
  virtual ~PBOTCUserParam();

  PBOTCUserParam(const PBOTCUserParam& from);

  inline PBOTCUserParam& operator=(const PBOTCUserParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBOTCUserParam& default_instance();

  void Swap(PBOTCUserParam* other);

  // implements Message ----------------------------------------------

  inline PBOTCUserParam* New() const { return New(NULL); }

  PBOTCUserParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBOTCUserParam& from);
  void MergeFrom(const PBOTCUserParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBOTCUserParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 2;
  void clear_contract();
  static const int kContractFieldNumber = 2;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional double quantity = 3;
  void clear_quantity();
  static const int kQuantityFieldNumber = 3;
  double quantity() const;
  void set_quantity(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBOTCUserParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  double quantity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBOTCUserParam* default_instance_;
};
// -------------------------------------------------------------------

class PBOTCUserParamList : public ::google::protobuf::Message {
 public:
  PBOTCUserParamList();
  virtual ~PBOTCUserParamList();

  PBOTCUserParamList(const PBOTCUserParamList& from);

  inline PBOTCUserParamList& operator=(const PBOTCUserParamList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBOTCUserParamList& default_instance();

  void Swap(PBOTCUserParamList* other);

  // implements Message ----------------------------------------------

  inline PBOTCUserParamList* New() const { return New(NULL); }

  PBOTCUserParamList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBOTCUserParamList& from);
  void MergeFrom(const PBOTCUserParamList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBOTCUserParamList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.Business.PBOTCUserParam params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::Micro::Future::Message::Business::PBOTCUserParam& params(int index) const;
  ::Micro::Future::Message::Business::PBOTCUserParam* mutable_params(int index);
  ::Micro::Future::Message::Business::PBOTCUserParam* add_params();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam >&
      params() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBOTCUserParamList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam > params_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBOTCUserParamList* default_instance_;
};
// -------------------------------------------------------------------

class PBOrderRequest : public ::google::protobuf::Message {
 public:
  PBOrderRequest();
  virtual ~PBOrderRequest();

  PBOrderRequest(const PBOrderRequest& from);

  inline PBOrderRequest& operator=(const PBOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBOrderRequest& default_instance();

  void Swap(PBOrderRequest* other);

  // implements Message ----------------------------------------------

  inline PBOrderRequest* New() const { return New(NULL); }

  PBOrderRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBOrderRequest& from);
  void MergeFrom(const PBOrderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBOrderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional uint64 orderID = 2;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 2;
  ::google::protobuf::uint64 orderid() const;
  void set_orderid(::google::protobuf::uint64 value);

  // optional uint64 orderSysID = 3;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 3;
  ::google::protobuf::uint64 ordersysid() const;
  void set_ordersysid(::google::protobuf::uint64 value);

  // optional string exchange = 4;
  void clear_exchange();
  static const int kExchangeFieldNumber = 4;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 5;
  void clear_contract();
  static const int kContractFieldNumber = 5;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional double limitPrice = 6;
  void clear_limitprice();
  static const int kLimitPriceFieldNumber = 6;
  double limitprice() const;
  void set_limitprice(double value);

  // optional int32 volume = 7;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional int32 execType = 8;
  void clear_exectype();
  static const int kExecTypeFieldNumber = 8;
  ::google::protobuf::int32 exectype() const;
  void set_exectype(::google::protobuf::int32 value);

  // optional int32 tif = 9;
  void clear_tif();
  static const int kTifFieldNumber = 9;
  ::google::protobuf::int32 tif() const;
  void set_tif(::google::protobuf::int32 value);

  // optional int32 direction = 10;
  void clear_direction();
  static const int kDirectionFieldNumber = 10;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // optional int32 openclose = 11;
  void clear_openclose();
  static const int kOpencloseFieldNumber = 11;
  ::google::protobuf::int32 openclose() const;
  void set_openclose(::google::protobuf::int32 value);

  // optional string portfolio = 12;
  void clear_portfolio();
  static const int kPortfolioFieldNumber = 12;
  const ::std::string& portfolio() const;
  void set_portfolio(const ::std::string& value);
  void set_portfolio(const char* value);
  void set_portfolio(const char* value, size_t size);
  ::std::string* mutable_portfolio();
  ::std::string* release_portfolio();
  void set_allocated_portfolio(::std::string* portfolio);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBOrderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::uint64 orderid_;
  ::google::protobuf::uint64 ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  double limitprice_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 exectype_;
  ::google::protobuf::int32 tif_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_;
  ::google::protobuf::int32 openclose_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBOrderRequest* default_instance_;
};
// -------------------------------------------------------------------

class PBOrderInfo : public ::google::protobuf::Message {
 public:
  PBOrderInfo();
  virtual ~PBOrderInfo();

  PBOrderInfo(const PBOrderInfo& from);

  inline PBOrderInfo& operator=(const PBOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBOrderInfo& default_instance();

  void Swap(PBOrderInfo* other);

  // implements Message ----------------------------------------------

  inline PBOrderInfo* New() const { return New(NULL); }

  PBOrderInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBOrderInfo& from);
  void MergeFrom(const PBOrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBOrderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional uint64 orderID = 2;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 2;
  ::google::protobuf::uint64 orderid() const;
  void set_orderid(::google::protobuf::uint64 value);

  // optional uint64 orderSysID = 3;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 3;
  ::google::protobuf::uint64 ordersysid() const;
  void set_ordersysid(::google::protobuf::uint64 value);

  // optional string brokerID = 4;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 4;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string investorID = 5;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 5;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string exchange = 6;
  void clear_exchange();
  static const int kExchangeFieldNumber = 6;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 7;
  void clear_contract();
  static const int kContractFieldNumber = 7;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional int32 execType = 8;
  void clear_exectype();
  static const int kExecTypeFieldNumber = 8;
  ::google::protobuf::int32 exectype() const;
  void set_exectype(::google::protobuf::int32 value);

  // optional int32 tif = 9;
  void clear_tif();
  static const int kTifFieldNumber = 9;
  ::google::protobuf::int32 tif() const;
  void set_tif(::google::protobuf::int32 value);

  // optional int32 tradingType = 10;
  void clear_tradingtype();
  static const int kTradingTypeFieldNumber = 10;
  ::google::protobuf::int32 tradingtype() const;
  void set_tradingtype(::google::protobuf::int32 value);

  // optional int32 direction = 11;
  void clear_direction();
  static const int kDirectionFieldNumber = 11;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // optional double limitPrice = 12;
  void clear_limitprice();
  static const int kLimitPriceFieldNumber = 12;
  double limitprice() const;
  void set_limitprice(double value);

  // optional double stopPrice = 13;
  void clear_stopprice();
  static const int kStopPriceFieldNumber = 13;
  double stopprice() const;
  void set_stopprice(double value);

  // optional int32 orderStatus = 14;
  void clear_orderstatus();
  static const int kOrderStatusFieldNumber = 14;
  ::google::protobuf::int32 orderstatus() const;
  void set_orderstatus(::google::protobuf::int32 value);

  // optional int32 orderType = 15;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 15;
  ::google::protobuf::int32 ordertype() const;
  void set_ordertype(::google::protobuf::int32 value);

  // optional int32 volume = 16;
  void clear_volume();
  static const int kVolumeFieldNumber = 16;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional string insertTime = 17;
  void clear_inserttime();
  static const int kInsertTimeFieldNumber = 17;
  const ::std::string& inserttime() const;
  void set_inserttime(const ::std::string& value);
  void set_inserttime(const char* value);
  void set_inserttime(const char* value, size_t size);
  ::std::string* mutable_inserttime();
  ::std::string* release_inserttime();
  void set_allocated_inserttime(::std::string* inserttime);

  // optional string updateTime = 18;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 18;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // optional string cancelTime = 19;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 19;
  const ::std::string& canceltime() const;
  void set_canceltime(const ::std::string& value);
  void set_canceltime(const char* value);
  void set_canceltime(const char* value, size_t size);
  ::std::string* mutable_canceltime();
  ::std::string* release_canceltime();
  void set_allocated_canceltime(::std::string* canceltime);

  // optional int32 volumeTraded = 20;
  void clear_volumetraded();
  static const int kVolumeTradedFieldNumber = 20;
  ::google::protobuf::int32 volumetraded() const;
  void set_volumetraded(::google::protobuf::int32 value);

  // optional int32 volumeRemain = 21;
  void clear_volumeremain();
  static const int kVolumeRemainFieldNumber = 21;
  ::google::protobuf::int32 volumeremain() const;
  void set_volumeremain(::google::protobuf::int32 value);

  // optional int32 volumeCondition = 22;
  void clear_volumecondition();
  static const int kVolumeConditionFieldNumber = 22;
  ::google::protobuf::int32 volumecondition() const;
  void set_volumecondition(::google::protobuf::int32 value);

  // optional int32 tradingDay = 23;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 23;
  ::google::protobuf::int32 tradingday() const;
  void set_tradingday(::google::protobuf::int32 value);

  // optional bool active = 24;
  void clear_active();
  static const int kActiveFieldNumber = 24;
  bool active() const;
  void set_active(bool value);

  // optional int32 openclose = 25;
  void clear_openclose();
  static const int kOpencloseFieldNumber = 25;
  ::google::protobuf::int32 openclose() const;
  void set_openclose(::google::protobuf::int32 value);

  // optional bytes message = 26;
  void clear_message();
  static const int kMessageFieldNumber = 26;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional int32 sessionID = 27;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 27;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // optional string portfolio = 28;
  void clear_portfolio();
  static const int kPortfolioFieldNumber = 28;
  const ::std::string& portfolio() const;
  void set_portfolio(const ::std::string& value);
  void set_portfolio(const char* value);
  void set_portfolio(const char* value, size_t size);
  ::std::string* mutable_portfolio();
  ::std::string* release_portfolio();
  void set_allocated_portfolio(::std::string* portfolio);

  // optional string insertDate = 29;
  void clear_insertdate();
  static const int kInsertDateFieldNumber = 29;
  const ::std::string& insertdate() const;
  void set_insertdate(const ::std::string& value);
  void set_insertdate(const char* value);
  void set_insertdate(const char* value, size_t size);
  ::std::string* mutable_insertdate();
  ::std::string* release_insertdate();
  void set_allocated_insertdate(::std::string* insertdate);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBOrderInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::uint64 orderid_;
  ::google::protobuf::uint64 ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::int32 exectype_;
  ::google::protobuf::int32 tif_;
  ::google::protobuf::int32 tradingtype_;
  ::google::protobuf::int32 direction_;
  double limitprice_;
  double stopprice_;
  ::google::protobuf::int32 orderstatus_;
  ::google::protobuf::int32 ordertype_;
  ::google::protobuf::internal::ArenaStringPtr inserttime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 volumetraded_;
  ::google::protobuf::internal::ArenaStringPtr canceltime_;
  ::google::protobuf::int32 volumeremain_;
  ::google::protobuf::int32 volumecondition_;
  ::google::protobuf::int32 tradingday_;
  bool active_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 openclose_;
  ::google::protobuf::int32 sessionid_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_;
  ::google::protobuf::internal::ArenaStringPtr insertdate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBOrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBTradeInfo : public ::google::protobuf::Message {
 public:
  PBTradeInfo();
  virtual ~PBTradeInfo();

  PBTradeInfo(const PBTradeInfo& from);

  inline PBTradeInfo& operator=(const PBTradeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTradeInfo& default_instance();

  void Swap(PBTradeInfo* other);

  // implements Message ----------------------------------------------

  inline PBTradeInfo* New() const { return New(NULL); }

  PBTradeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTradeInfo& from);
  void MergeFrom(const PBTradeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBTradeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional uint64 tradeID = 2;
  void clear_tradeid();
  static const int kTradeIDFieldNumber = 2;
  ::google::protobuf::uint64 tradeid() const;
  void set_tradeid(::google::protobuf::uint64 value);

  // optional int32 direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // optional int32 openclose = 4;
  void clear_openclose();
  static const int kOpencloseFieldNumber = 4;
  ::google::protobuf::int32 openclose() const;
  void set_openclose(::google::protobuf::int32 value);

  // optional uint64 orderSysID = 5;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 5;
  ::google::protobuf::uint64 ordersysid() const;
  void set_ordersysid(::google::protobuf::uint64 value);

  // optional uint64 orderID = 6;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 6;
  ::google::protobuf::uint64 orderid() const;
  void set_orderid(::google::protobuf::uint64 value);

  // optional double price = 7;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  double price() const;
  void set_price(double value);

  // optional int32 volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional string brokerID = 9;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 9;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string investorID = 10;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 10;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // optional string exchange = 11;
  void clear_exchange();
  static const int kExchangeFieldNumber = 11;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 12;
  void clear_contract();
  static const int kContractFieldNumber = 12;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional string userID = 13;
  void clear_userid();
  static const int kUserIDFieldNumber = 13;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string tradeDate = 14;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 14;
  const ::std::string& tradedate() const;
  void set_tradedate(const ::std::string& value);
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  ::std::string* mutable_tradedate();
  ::std::string* release_tradedate();
  void set_allocated_tradedate(::std::string* tradedate);

  // optional string tradeTime = 15;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 15;
  const ::std::string& tradetime() const;
  void set_tradetime(const ::std::string& value);
  void set_tradetime(const char* value);
  void set_tradetime(const char* value, size_t size);
  ::std::string* mutable_tradetime();
  ::std::string* release_tradetime();
  void set_allocated_tradetime(::std::string* tradetime);

  // optional int32 tradeType = 16;
  void clear_tradetype();
  static const int kTradeTypeFieldNumber = 16;
  ::google::protobuf::int32 tradetype() const;
  void set_tradetype(::google::protobuf::int32 value);

  // optional int32 hedgeFlag = 17;
  void clear_hedgeflag();
  static const int kHedgeFlagFieldNumber = 17;
  ::google::protobuf::int32 hedgeflag() const;
  void set_hedgeflag(::google::protobuf::int32 value);

  // optional double commission = 18;
  void clear_commission();
  static const int kCommissionFieldNumber = 18;
  double commission() const;
  void set_commission(double value);

  // optional string portfolio = 19;
  void clear_portfolio();
  static const int kPortfolioFieldNumber = 19;
  const ::std::string& portfolio() const;
  void set_portfolio(const ::std::string& value);
  void set_portfolio(const char* value);
  void set_portfolio(const char* value, size_t size);
  ::std::string* mutable_portfolio();
  ::std::string* release_portfolio();
  void set_allocated_portfolio(::std::string* portfolio);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBTradeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::uint64 tradeid_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 openclose_;
  ::google::protobuf::uint64 ordersysid_;
  ::google::protobuf::uint64 orderid_;
  double price_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 tradetype_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr tradedate_;
  ::google::protobuf::internal::ArenaStringPtr tradetime_;
  double commission_;
  ::google::protobuf::internal::ArenaStringPtr portfolio_;
  ::google::protobuf::int32 hedgeflag_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBTradeInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBPosition : public ::google::protobuf::Message {
 public:
  PBPosition();
  virtual ~PBPosition();

  PBPosition(const PBPosition& from);

  inline PBPosition& operator=(const PBPosition& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPosition& default_instance();

  void Swap(PBPosition* other);

  // implements Message ----------------------------------------------

  inline PBPosition* New() const { return New(NULL); }

  PBPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPosition& from);
  void MergeFrom(const PBPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 2;
  void clear_contract();
  static const int kContractFieldNumber = 2;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional int32 direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // optional int32 position = 5;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // optional int32 ydPosition = 4;
  void clear_ydposition();
  static const int kYdPositionFieldNumber = 4;
  ::google::protobuf::int32 ydposition() const;
  void set_ydposition(::google::protobuf::int32 value);

  // optional int32 positionDateFlag = 6;
  void clear_positiondateflag();
  static const int kPositionDateFlagFieldNumber = 6;
  ::google::protobuf::int32 positiondateflag() const;
  void set_positiondateflag(::google::protobuf::int32 value);

  // optional int32 openVolume = 7;
  void clear_openvolume();
  static const int kOpenVolumeFieldNumber = 7;
  ::google::protobuf::int32 openvolume() const;
  void set_openvolume(::google::protobuf::int32 value);

  // optional int32 closeVolume = 8;
  void clear_closevolume();
  static const int kCloseVolumeFieldNumber = 8;
  ::google::protobuf::int32 closevolume() const;
  void set_closevolume(::google::protobuf::int32 value);

  // optional double openAmount = 9;
  void clear_openamount();
  static const int kOpenAmountFieldNumber = 9;
  double openamount() const;
  void set_openamount(double value);

  // optional double closeAmount = 10;
  void clear_closeamount();
  static const int kCloseAmountFieldNumber = 10;
  double closeamount() const;
  void set_closeamount(double value);

  // optional double cost = 11;
  void clear_cost();
  static const int kCostFieldNumber = 11;
  double cost() const;
  void set_cost(double value);

  // optional double openCost = 12;
  void clear_opencost();
  static const int kOpenCostFieldNumber = 12;
  double opencost() const;
  void set_opencost(double value);

  // optional double profit = 13;
  void clear_profit();
  static const int kProfitFieldNumber = 13;
  double profit() const;
  void set_profit(double value);

  // optional double closeProfit = 14;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 14;
  double closeprofit() const;
  void set_closeprofit(double value);

  // optional double useMargin = 15;
  void clear_usemargin();
  static const int kUseMarginFieldNumber = 15;
  double usemargin() const;
  void set_usemargin(double value);

  // optional int32 hedgeFlag = 16;
  void clear_hedgeflag();
  static const int kHedgeFlagFieldNumber = 16;
  ::google::protobuf::int32 hedgeflag() const;
  void set_hedgeflag(::google::protobuf::int32 value);

  // optional int32 tdPosition = 17;
  void clear_tdposition();
  static const int kTdPositionFieldNumber = 17;
  ::google::protobuf::int32 tdposition() const;
  void set_tdposition(::google::protobuf::int32 value);

  // optional .Micro.Future.Message.DataHeader header = 18;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 18;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 ydposition_;
  ::google::protobuf::int32 positiondateflag_;
  ::google::protobuf::int32 openvolume_;
  ::google::protobuf::int32 closevolume_;
  double openamount_;
  double closeamount_;
  double cost_;
  double opencost_;
  double profit_;
  double closeprofit_;
  double usemargin_;
  ::google::protobuf::int32 hedgeflag_;
  ::google::protobuf::int32 tdposition_;
  ::Micro::Future::Message::DataHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBPosition* default_instance_;
};
// -------------------------------------------------------------------

class PBAccountInfo : public ::google::protobuf::Message {
 public:
  PBAccountInfo();
  virtual ~PBAccountInfo();

  PBAccountInfo(const PBAccountInfo& from);

  inline PBAccountInfo& operator=(const PBAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAccountInfo& default_instance();

  void Swap(PBAccountInfo* other);

  // implements Message ----------------------------------------------

  inline PBAccountInfo* New() const { return New(NULL); }

  PBAccountInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAccountInfo& from);
  void MergeFrom(const PBAccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBAccountInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string brokerID = 2;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string accountID = 3;
  void clear_accountid();
  static const int kAccountIDFieldNumber = 3;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // optional double preMortgage = 4;
  void clear_premortgage();
  static const int kPreMortgageFieldNumber = 4;
  double premortgage() const;
  void set_premortgage(double value);

  // optional double preCredit = 5;
  void clear_precredit();
  static const int kPreCreditFieldNumber = 5;
  double precredit() const;
  void set_precredit(double value);

  // optional double preDeposit = 6;
  void clear_predeposit();
  static const int kPreDepositFieldNumber = 6;
  double predeposit() const;
  void set_predeposit(double value);

  // optional double preBalance = 7;
  void clear_prebalance();
  static const int kPreBalanceFieldNumber = 7;
  double prebalance() const;
  void set_prebalance(double value);

  // optional double preMargin = 8;
  void clear_premargin();
  static const int kPreMarginFieldNumber = 8;
  double premargin() const;
  void set_premargin(double value);

  // optional double interestBase = 9;
  void clear_interestbase();
  static const int kInterestBaseFieldNumber = 9;
  double interestbase() const;
  void set_interestbase(double value);

  // optional double interest = 10;
  void clear_interest();
  static const int kInterestFieldNumber = 10;
  double interest() const;
  void set_interest(double value);

  // optional double deposit = 11;
  void clear_deposit();
  static const int kDepositFieldNumber = 11;
  double deposit() const;
  void set_deposit(double value);

  // optional double withdraw = 12;
  void clear_withdraw();
  static const int kWithdrawFieldNumber = 12;
  double withdraw() const;
  void set_withdraw(double value);

  // optional double frozenMargin = 13;
  void clear_frozenmargin();
  static const int kFrozenMarginFieldNumber = 13;
  double frozenmargin() const;
  void set_frozenmargin(double value);

  // optional double frozenCash = 14;
  void clear_frozencash();
  static const int kFrozenCashFieldNumber = 14;
  double frozencash() const;
  void set_frozencash(double value);

  // optional double frozenCommission = 15;
  void clear_frozencommission();
  static const int kFrozenCommissionFieldNumber = 15;
  double frozencommission() const;
  void set_frozencommission(double value);

  // optional double currMargin = 16;
  void clear_currmargin();
  static const int kCurrMarginFieldNumber = 16;
  double currmargin() const;
  void set_currmargin(double value);

  // optional double cashIn = 17;
  void clear_cashin();
  static const int kCashInFieldNumber = 17;
  double cashin() const;
  void set_cashin(double value);

  // optional double commission = 18;
  void clear_commission();
  static const int kCommissionFieldNumber = 18;
  double commission() const;
  void set_commission(double value);

  // optional double closeProfit = 19;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 19;
  double closeprofit() const;
  void set_closeprofit(double value);

  // optional double positionProfit = 20;
  void clear_positionprofit();
  static const int kPositionProfitFieldNumber = 20;
  double positionprofit() const;
  void set_positionprofit(double value);

  // optional double balance = 21;
  void clear_balance();
  static const int kBalanceFieldNumber = 21;
  double balance() const;
  void set_balance(double value);

  // optional double available = 22;
  void clear_available();
  static const int kAvailableFieldNumber = 22;
  double available() const;
  void set_available(double value);

  // optional double withdrawQuota = 23;
  void clear_withdrawquota();
  static const int kWithdrawQuotaFieldNumber = 23;
  double withdrawquota() const;
  void set_withdrawquota(double value);

  // optional double reserve = 24;
  void clear_reserve();
  static const int kReserveFieldNumber = 24;
  double reserve() const;
  void set_reserve(double value);

  // optional int32 tradingDay = 25;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 25;
  ::google::protobuf::int32 tradingday() const;
  void set_tradingday(::google::protobuf::int32 value);

  // optional int32 settlementID = 26;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 26;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // optional double credit = 27;
  void clear_credit();
  static const int kCreditFieldNumber = 27;
  double credit() const;
  void set_credit(double value);

  // optional double mortgage = 28;
  void clear_mortgage();
  static const int kMortgageFieldNumber = 28;
  double mortgage() const;
  void set_mortgage(double value);

  // optional double exchangeMargin = 29;
  void clear_exchangemargin();
  static const int kExchangeMarginFieldNumber = 29;
  double exchangemargin() const;
  void set_exchangemargin(double value);

  // optional double deliveryMargin = 30;
  void clear_deliverymargin();
  static const int kDeliveryMarginFieldNumber = 30;
  double deliverymargin() const;
  void set_deliverymargin(double value);

  // optional double exchangeDeliveryMargin = 31;
  void clear_exchangedeliverymargin();
  static const int kExchangeDeliveryMarginFieldNumber = 31;
  double exchangedeliverymargin() const;
  void set_exchangedeliverymargin(double value);

  // optional double reserveBalance = 32;
  void clear_reservebalance();
  static const int kReserveBalanceFieldNumber = 32;
  double reservebalance() const;
  void set_reservebalance(double value);

  // optional .Micro.Future.Message.DataHeader header = 33;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 33;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBAccountInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  double premortgage_;
  double precredit_;
  double predeposit_;
  double prebalance_;
  double premargin_;
  double interestbase_;
  double interest_;
  double deposit_;
  double withdraw_;
  double frozenmargin_;
  double frozencash_;
  double frozencommission_;
  double currmargin_;
  double cashin_;
  double commission_;
  double closeprofit_;
  double positionprofit_;
  double balance_;
  double available_;
  double withdrawquota_;
  double reserve_;
  ::google::protobuf::int32 tradingday_;
  ::google::protobuf::int32 settlementid_;
  double credit_;
  double mortgage_;
  double exchangemargin_;
  double deliverymargin_;
  double exchangedeliverymargin_;
  double reservebalance_;
  ::Micro::Future::Message::DataHeader* header_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBAccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMarketInfo : public ::google::protobuf::Message {
 public:
  PBMarketInfo();
  virtual ~PBMarketInfo();

  PBMarketInfo(const PBMarketInfo& from);

  inline PBMarketInfo& operator=(const PBMarketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMarketInfo& default_instance();

  void Swap(PBMarketInfo* other);

  // implements Message ----------------------------------------------

  inline PBMarketInfo* New() const { return New(NULL); }

  PBMarketInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMarketInfo& from);
  void MergeFrom(const PBMarketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMarketInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional bytes name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes property = 4;
  void clear_property();
  static const int kPropertyFieldNumber = 4;
  const ::std::string& property() const;
  void set_property(const ::std::string& value);
  void set_property(const char* value);
  void set_property(const void* value, size_t size);
  ::std::string* mutable_property();
  ::std::string* release_property();
  void set_allocated_property(::std::string* property);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBMarketInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBMarketInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBContractInfo : public ::google::protobuf::Message {
 public:
  PBContractInfo();
  virtual ~PBContractInfo();

  PBContractInfo(const PBContractInfo& from);

  inline PBContractInfo& operator=(const PBContractInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBContractInfo& default_instance();

  void Swap(PBContractInfo* other);

  // implements Message ----------------------------------------------

  inline PBContractInfo* New() const { return New(NULL); }

  PBContractInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBContractInfo& from);
  void MergeFrom(const PBContractInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBContractInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // optional string contract = 2;
  void clear_contract();
  static const int kContractFieldNumber = 2;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // optional bytes name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string productID = 4;
  void clear_productid();
  static const int kProductIDFieldNumber = 4;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // optional int32 productType = 5;
  void clear_producttype();
  static const int kProductTypeFieldNumber = 5;
  ::google::protobuf::int32 producttype() const;
  void set_producttype(::google::protobuf::int32 value);

  // optional int32 deliveryYear = 6;
  void clear_deliveryyear();
  static const int kDeliveryYearFieldNumber = 6;
  ::google::protobuf::int32 deliveryyear() const;
  void set_deliveryyear(::google::protobuf::int32 value);

  // optional int32 deliveryMonth = 7;
  void clear_deliverymonth();
  static const int kDeliveryMonthFieldNumber = 7;
  ::google::protobuf::int32 deliverymonth() const;
  void set_deliverymonth(::google::protobuf::int32 value);

  // optional int32 maxMarketOrderVolume = 8;
  void clear_maxmarketordervolume();
  static const int kMaxMarketOrderVolumeFieldNumber = 8;
  ::google::protobuf::int32 maxmarketordervolume() const;
  void set_maxmarketordervolume(::google::protobuf::int32 value);

  // optional int32 minMarketOrderVolume = 9;
  void clear_minmarketordervolume();
  static const int kMinMarketOrderVolumeFieldNumber = 9;
  ::google::protobuf::int32 minmarketordervolume() const;
  void set_minmarketordervolume(::google::protobuf::int32 value);

  // optional int32 maxLimitOrderVolume = 10;
  void clear_maxlimitordervolume();
  static const int kMaxLimitOrderVolumeFieldNumber = 10;
  ::google::protobuf::int32 maxlimitordervolume() const;
  void set_maxlimitordervolume(::google::protobuf::int32 value);

  // optional int32 minLimitOrderVolume = 11;
  void clear_minlimitordervolume();
  static const int kMinLimitOrderVolumeFieldNumber = 11;
  ::google::protobuf::int32 minlimitordervolume() const;
  void set_minlimitordervolume(::google::protobuf::int32 value);

  // optional int32 volumeMultiple = 12;
  void clear_volumemultiple();
  static const int kVolumeMultipleFieldNumber = 12;
  ::google::protobuf::int32 volumemultiple() const;
  void set_volumemultiple(::google::protobuf::int32 value);

  // optional double priceTick = 13;
  void clear_pricetick();
  static const int kPriceTickFieldNumber = 13;
  double pricetick() const;
  void set_pricetick(double value);

  // optional string createDate = 14;
  void clear_createdate();
  static const int kCreateDateFieldNumber = 14;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // optional string openDate = 15;
  void clear_opendate();
  static const int kOpenDateFieldNumber = 15;
  const ::std::string& opendate() const;
  void set_opendate(const ::std::string& value);
  void set_opendate(const char* value);
  void set_opendate(const char* value, size_t size);
  ::std::string* mutable_opendate();
  ::std::string* release_opendate();
  void set_allocated_opendate(::std::string* opendate);

  // optional string expireDate = 16;
  void clear_expiredate();
  static const int kExpireDateFieldNumber = 16;
  const ::std::string& expiredate() const;
  void set_expiredate(const ::std::string& value);
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  ::std::string* mutable_expiredate();
  ::std::string* release_expiredate();
  void set_allocated_expiredate(::std::string* expiredate);

  // optional string startDelivDate = 17;
  void clear_startdelivdate();
  static const int kStartDelivDateFieldNumber = 17;
  const ::std::string& startdelivdate() const;
  void set_startdelivdate(const ::std::string& value);
  void set_startdelivdate(const char* value);
  void set_startdelivdate(const char* value, size_t size);
  ::std::string* mutable_startdelivdate();
  ::std::string* release_startdelivdate();
  void set_allocated_startdelivdate(::std::string* startdelivdate);

  // optional string endDelivDate = 18;
  void clear_enddelivdate();
  static const int kEndDelivDateFieldNumber = 18;
  const ::std::string& enddelivdate() const;
  void set_enddelivdate(const ::std::string& value);
  void set_enddelivdate(const char* value);
  void set_enddelivdate(const char* value, size_t size);
  ::std::string* mutable_enddelivdate();
  ::std::string* release_enddelivdate();
  void set_allocated_enddelivdate(::std::string* enddelivdate);

  // optional int32 lifePhase = 19;
  void clear_lifephase();
  static const int kLifePhaseFieldNumber = 19;
  ::google::protobuf::int32 lifephase() const;
  void set_lifephase(::google::protobuf::int32 value);

  // optional bool isTrading = 20;
  void clear_istrading();
  static const int kIsTradingFieldNumber = 20;
  bool istrading() const;
  void set_istrading(bool value);

  // optional int32 positionType = 21;
  void clear_positiontype();
  static const int kPositionTypeFieldNumber = 21;
  ::google::protobuf::int32 positiontype() const;
  void set_positiontype(::google::protobuf::int32 value);

  // optional int32 positionDateType = 22;
  void clear_positiondatetype();
  static const int kPositionDateTypeFieldNumber = 22;
  ::google::protobuf::int32 positiondatetype() const;
  void set_positiondatetype(::google::protobuf::int32 value);

  // optional double longMarginRatio = 23;
  void clear_longmarginratio();
  static const int kLongMarginRatioFieldNumber = 23;
  double longmarginratio() const;
  void set_longmarginratio(double value);

  // optional double shortMarginRatio = 24;
  void clear_shortmarginratio();
  static const int kShortMarginRatioFieldNumber = 24;
  double shortmarginratio() const;
  void set_shortmarginratio(double value);

  // optional string underlyingExchange = 25;
  void clear_underlyingexchange();
  static const int kUnderlyingExchangeFieldNumber = 25;
  const ::std::string& underlyingexchange() const;
  void set_underlyingexchange(const ::std::string& value);
  void set_underlyingexchange(const char* value);
  void set_underlyingexchange(const char* value, size_t size);
  ::std::string* mutable_underlyingexchange();
  ::std::string* release_underlyingexchange();
  void set_allocated_underlyingexchange(::std::string* underlyingexchange);

  // optional string underlyingContract = 26;
  void clear_underlyingcontract();
  static const int kUnderlyingContractFieldNumber = 26;
  const ::std::string& underlyingcontract() const;
  void set_underlyingcontract(const ::std::string& value);
  void set_underlyingcontract(const char* value);
  void set_underlyingcontract(const char* value, size_t size);
  ::std::string* mutable_underlyingcontract();
  ::std::string* release_underlyingcontract();
  void set_allocated_underlyingcontract(::std::string* underlyingcontract);

  // optional int32 contractType = 27;
  void clear_contracttype();
  static const int kContractTypeFieldNumber = 27;
  ::google::protobuf::int32 contracttype() const;
  void set_contracttype(::google::protobuf::int32 value);

  // optional double strikePrice = 28;
  void clear_strikeprice();
  static const int kStrikePriceFieldNumber = 28;
  double strikeprice() const;
  void set_strikeprice(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBContractInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::int32 producttype_;
  ::google::protobuf::int32 deliveryyear_;
  ::google::protobuf::int32 deliverymonth_;
  ::google::protobuf::int32 maxmarketordervolume_;
  ::google::protobuf::int32 minmarketordervolume_;
  ::google::protobuf::int32 maxlimitordervolume_;
  ::google::protobuf::int32 minlimitordervolume_;
  ::google::protobuf::int32 volumemultiple_;
  double pricetick_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr opendate_;
  ::google::protobuf::internal::ArenaStringPtr expiredate_;
  ::google::protobuf::internal::ArenaStringPtr startdelivdate_;
  ::google::protobuf::internal::ArenaStringPtr enddelivdate_;
  ::google::protobuf::int32 lifephase_;
  bool istrading_;
  ::google::protobuf::int32 positiontype_;
  ::google::protobuf::int32 positiondatetype_;
  double longmarginratio_;
  double shortmarginratio_;
  ::google::protobuf::internal::ArenaStringPtr underlyingexchange_;
  ::google::protobuf::internal::ArenaStringPtr underlyingcontract_;
  double strikeprice_;
  ::google::protobuf::int32 contracttype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBContractInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBContractInfoList : public ::google::protobuf::Message {
 public:
  PBContractInfoList();
  virtual ~PBContractInfoList();

  PBContractInfoList(const PBContractInfoList& from);

  inline PBContractInfoList& operator=(const PBContractInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBContractInfoList& default_instance();

  void Swap(PBContractInfoList* other);

  // implements Message ----------------------------------------------

  inline PBContractInfoList* New() const { return New(NULL); }

  PBContractInfoList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBContractInfoList& from);
  void MergeFrom(const PBContractInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBContractInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.Business.PBContractInfo contractInfo = 2;
  int contractinfo_size() const;
  void clear_contractinfo();
  static const int kContractInfoFieldNumber = 2;
  const ::Micro::Future::Message::Business::PBContractInfo& contractinfo(int index) const;
  ::Micro::Future::Message::Business::PBContractInfo* mutable_contractinfo(int index);
  ::Micro::Future::Message::Business::PBContractInfo* add_contractinfo();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractInfo >*
      mutable_contractinfo();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractInfo >&
      contractinfo() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBContractInfoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractInfo > contractinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBContractInfoList* default_instance_;
};
// -------------------------------------------------------------------

class PBBankOpRequest : public ::google::protobuf::Message {
 public:
  PBBankOpRequest();
  virtual ~PBBankOpRequest();

  PBBankOpRequest(const PBBankOpRequest& from);

  inline PBBankOpRequest& operator=(const PBBankOpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBankOpRequest& default_instance();

  void Swap(PBBankOpRequest* other);

  // implements Message ----------------------------------------------

  inline PBBankOpRequest* New() const { return New(NULL); }

  PBBankOpRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBankOpRequest& from);
  void MergeFrom(const PBBankOpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBBankOpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string bankID = 2;
  void clear_bankid();
  static const int kBankIDFieldNumber = 2;
  const ::std::string& bankid() const;
  void set_bankid(const ::std::string& value);
  void set_bankid(const char* value);
  void set_bankid(const char* value, size_t size);
  ::std::string* mutable_bankid();
  ::std::string* release_bankid();
  void set_allocated_bankid(::std::string* bankid);

  // optional string bankBranchID = 3;
  void clear_bankbranchid();
  static const int kBankBranchIDFieldNumber = 3;
  const ::std::string& bankbranchid() const;
  void set_bankbranchid(const ::std::string& value);
  void set_bankbranchid(const char* value);
  void set_bankbranchid(const char* value, size_t size);
  ::std::string* mutable_bankbranchid();
  ::std::string* release_bankbranchid();
  void set_allocated_bankbranchid(::std::string* bankbranchid);

  // optional string bankPassword = 4;
  void clear_bankpassword();
  static const int kBankPasswordFieldNumber = 4;
  const ::std::string& bankpassword() const;
  void set_bankpassword(const ::std::string& value);
  void set_bankpassword(const char* value);
  void set_bankpassword(const char* value, size_t size);
  ::std::string* mutable_bankpassword();
  ::std::string* release_bankpassword();
  void set_allocated_bankpassword(::std::string* bankpassword);

  // optional string bankAccount = 5;
  void clear_bankaccount();
  static const int kBankAccountFieldNumber = 5;
  const ::std::string& bankaccount() const;
  void set_bankaccount(const ::std::string& value);
  void set_bankaccount(const char* value);
  void set_bankaccount(const char* value, size_t size);
  ::std::string* mutable_bankaccount();
  ::std::string* release_bankaccount();
  void set_allocated_bankaccount(::std::string* bankaccount);

  // optional string brokerID = 6;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 6;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string brokerBranchID = 7;
  void clear_brokerbranchid();
  static const int kBrokerBranchIDFieldNumber = 7;
  const ::std::string& brokerbranchid() const;
  void set_brokerbranchid(const ::std::string& value);
  void set_brokerbranchid(const char* value);
  void set_brokerbranchid(const char* value, size_t size);
  ::std::string* mutable_brokerbranchid();
  ::std::string* release_brokerbranchid();
  void set_allocated_brokerbranchid(::std::string* brokerbranchid);

  // optional string accountID = 8;
  void clear_accountid();
  static const int kAccountIDFieldNumber = 8;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // optional string password = 9;
  void clear_password();
  static const int kPasswordFieldNumber = 9;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string currencyID = 10;
  void clear_currencyid();
  static const int kCurrencyIDFieldNumber = 10;
  const ::std::string& currencyid() const;
  void set_currencyid(const ::std::string& value);
  void set_currencyid(const char* value);
  void set_currencyid(const char* value, size_t size);
  ::std::string* mutable_currencyid();
  ::std::string* release_currencyid();
  void set_allocated_currencyid(::std::string* currencyid);

  // optional double tradeAmount = 11;
  void clear_tradeamount();
  static const int kTradeAmountFieldNumber = 11;
  double tradeamount() const;
  void set_tradeamount(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBBankOpRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr bankid_;
  ::google::protobuf::internal::ArenaStringPtr bankbranchid_;
  ::google::protobuf::internal::ArenaStringPtr bankpassword_;
  ::google::protobuf::internal::ArenaStringPtr bankaccount_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr brokerbranchid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr currencyid_;
  double tradeamount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBBankOpRequest* default_instance_;
};
// -------------------------------------------------------------------

class PBBankOpResult : public ::google::protobuf::Message {
 public:
  PBBankOpResult();
  virtual ~PBBankOpResult();

  PBBankOpResult(const PBBankOpResult& from);

  inline PBBankOpResult& operator=(const PBBankOpResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBankOpResult& default_instance();

  void Swap(PBBankOpResult* other);

  // implements Message ----------------------------------------------

  inline PBBankOpResult* New() const { return New(NULL); }

  PBBankOpResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBankOpResult& from);
  void MergeFrom(const PBBankOpResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBBankOpResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string bankID = 2;
  void clear_bankid();
  static const int kBankIDFieldNumber = 2;
  const ::std::string& bankid() const;
  void set_bankid(const ::std::string& value);
  void set_bankid(const char* value);
  void set_bankid(const char* value, size_t size);
  ::std::string* mutable_bankid();
  ::std::string* release_bankid();
  void set_allocated_bankid(::std::string* bankid);

  // optional string bankBranchID = 3;
  void clear_bankbranchid();
  static const int kBankBranchIDFieldNumber = 3;
  const ::std::string& bankbranchid() const;
  void set_bankbranchid(const ::std::string& value);
  void set_bankbranchid(const char* value);
  void set_bankbranchid(const char* value, size_t size);
  ::std::string* mutable_bankbranchid();
  ::std::string* release_bankbranchid();
  void set_allocated_bankbranchid(::std::string* bankbranchid);

  // optional string bankPassword = 4;
  void clear_bankpassword();
  static const int kBankPasswordFieldNumber = 4;
  const ::std::string& bankpassword() const;
  void set_bankpassword(const ::std::string& value);
  void set_bankpassword(const char* value);
  void set_bankpassword(const char* value, size_t size);
  ::std::string* mutable_bankpassword();
  ::std::string* release_bankpassword();
  void set_allocated_bankpassword(::std::string* bankpassword);

  // optional string bankAccount = 5;
  void clear_bankaccount();
  static const int kBankAccountFieldNumber = 5;
  const ::std::string& bankaccount() const;
  void set_bankaccount(const ::std::string& value);
  void set_bankaccount(const char* value);
  void set_bankaccount(const char* value, size_t size);
  ::std::string* mutable_bankaccount();
  ::std::string* release_bankaccount();
  void set_allocated_bankaccount(::std::string* bankaccount);

  // optional string brokerID = 6;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 6;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string brokerBranchID = 7;
  void clear_brokerbranchid();
  static const int kBrokerBranchIDFieldNumber = 7;
  const ::std::string& brokerbranchid() const;
  void set_brokerbranchid(const ::std::string& value);
  void set_brokerbranchid(const char* value);
  void set_brokerbranchid(const char* value, size_t size);
  ::std::string* mutable_brokerbranchid();
  ::std::string* release_brokerbranchid();
  void set_allocated_brokerbranchid(::std::string* brokerbranchid);

  // optional string accountID = 8;
  void clear_accountid();
  static const int kAccountIDFieldNumber = 8;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // optional string password = 9;
  void clear_password();
  static const int kPasswordFieldNumber = 9;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string currencyID = 10;
  void clear_currencyid();
  static const int kCurrencyIDFieldNumber = 10;
  const ::std::string& currencyid() const;
  void set_currencyid(const ::std::string& value);
  void set_currencyid(const char* value);
  void set_currencyid(const char* value, size_t size);
  ::std::string* mutable_currencyid();
  ::std::string* release_currencyid();
  void set_allocated_currencyid(::std::string* currencyid);

  // optional double tradeAmount = 11;
  void clear_tradeamount();
  static const int kTradeAmountFieldNumber = 11;
  double tradeamount() const;
  void set_tradeamount(double value);

  // optional string serialNum = 12;
  void clear_serialnum();
  static const int kSerialNumFieldNumber = 12;
  const ::std::string& serialnum() const;
  void set_serialnum(const ::std::string& value);
  void set_serialnum(const char* value);
  void set_serialnum(const char* value, size_t size);
  ::std::string* mutable_serialnum();
  ::std::string* release_serialnum();
  void set_allocated_serialnum(::std::string* serialnum);

  // optional int32 tradingDay = 13;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 13;
  ::google::protobuf::int32 tradingday() const;
  void set_tradingday(::google::protobuf::int32 value);

  // optional string tradeDate = 14;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 14;
  const ::std::string& tradedate() const;
  void set_tradedate(const ::std::string& value);
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  ::std::string* mutable_tradedate();
  ::std::string* release_tradedate();
  void set_allocated_tradedate(::std::string* tradedate);

  // optional string tradeTime = 15;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 15;
  const ::std::string& tradetime() const;
  void set_tradetime(const ::std::string& value);
  void set_tradetime(const char* value);
  void set_tradetime(const char* value, size_t size);
  ::std::string* mutable_tradetime();
  ::std::string* release_tradetime();
  void set_allocated_tradetime(::std::string* tradetime);

  // optional string tradeCode = 16;
  void clear_tradecode();
  static const int kTradeCodeFieldNumber = 16;
  const ::std::string& tradecode() const;
  void set_tradecode(const ::std::string& value);
  void set_tradecode(const char* value);
  void set_tradecode(const char* value, size_t size);
  ::std::string* mutable_tradecode();
  ::std::string* release_tradecode();
  void set_allocated_tradecode(::std::string* tradecode);

  // optional string bankSerial = 17;
  void clear_bankserial();
  static const int kBankSerialFieldNumber = 17;
  const ::std::string& bankserial() const;
  void set_bankserial(const ::std::string& value);
  void set_bankserial(const char* value);
  void set_bankserial(const char* value, size_t size);
  ::std::string* mutable_bankserial();
  ::std::string* release_bankserial();
  void set_allocated_bankserial(::std::string* bankserial);

  // optional int32 futureAccType = 18;
  void clear_futureacctype();
  static const int kFutureAccTypeFieldNumber = 18;
  ::google::protobuf::int32 futureacctype() const;
  void set_futureacctype(::google::protobuf::int32 value);

  // optional int32 bankAccType = 19;
  void clear_bankacctype();
  static const int kBankAccTypeFieldNumber = 19;
  ::google::protobuf::int32 bankacctype() const;
  void set_bankacctype(::google::protobuf::int32 value);

  // optional string futureSerial = 20;
  void clear_futureserial();
  static const int kFutureSerialFieldNumber = 20;
  const ::std::string& futureserial() const;
  void set_futureserial(const ::std::string& value);
  void set_futureserial(const char* value);
  void set_futureserial(const char* value, size_t size);
  ::std::string* mutable_futureserial();
  ::std::string* release_futureserial();
  void set_allocated_futureserial(::std::string* futureserial);

  // optional double custFee = 21;
  void clear_custfee();
  static const int kCustFeeFieldNumber = 21;
  double custfee() const;
  void set_custfee(double value);

  // optional double brokerFee = 22;
  void clear_brokerfee();
  static const int kBrokerFeeFieldNumber = 22;
  double brokerfee() const;
  void set_brokerfee(double value);

  // optional int32 errorID = 23;
  void clear_errorid();
  static const int kErrorIDFieldNumber = 23;
  ::google::protobuf::int32 errorid() const;
  void set_errorid(::google::protobuf::int32 value);

  // optional bytes errorMsg = 24;
  void clear_errormsg();
  static const int kErrorMsgFieldNumber = 24;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  void set_errormsg(const char* value);
  void set_errormsg(const void* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBBankOpResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr bankid_;
  ::google::protobuf::internal::ArenaStringPtr bankbranchid_;
  ::google::protobuf::internal::ArenaStringPtr bankpassword_;
  ::google::protobuf::internal::ArenaStringPtr bankaccount_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr brokerbranchid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr currencyid_;
  double tradeamount_;
  ::google::protobuf::internal::ArenaStringPtr serialnum_;
  ::google::protobuf::internal::ArenaStringPtr tradedate_;
  ::google::protobuf::internal::ArenaStringPtr tradetime_;
  ::google::protobuf::int32 tradingday_;
  ::google::protobuf::int32 futureacctype_;
  ::google::protobuf::internal::ArenaStringPtr tradecode_;
  ::google::protobuf::internal::ArenaStringPtr bankserial_;
  ::google::protobuf::internal::ArenaStringPtr futureserial_;
  double custfee_;
  ::google::protobuf::int32 bankacctype_;
  ::google::protobuf::int32 errorid_;
  double brokerfee_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBBankOpResult* default_instance_;
};
// -------------------------------------------------------------------

class PBBankInfo : public ::google::protobuf::Message {
 public:
  PBBankInfo();
  virtual ~PBBankInfo();

  PBBankInfo(const PBBankInfo& from);

  inline PBBankInfo& operator=(const PBBankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBankInfo& default_instance();

  void Swap(PBBankInfo* other);

  // implements Message ----------------------------------------------

  inline PBBankInfo* New() const { return New(NULL); }

  PBBankInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBankInfo& from);
  void MergeFrom(const PBBankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBBankInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string bankID = 2;
  void clear_bankid();
  static const int kBankIDFieldNumber = 2;
  const ::std::string& bankid() const;
  void set_bankid(const ::std::string& value);
  void set_bankid(const char* value);
  void set_bankid(const char* value, size_t size);
  ::std::string* mutable_bankid();
  ::std::string* release_bankid();
  void set_allocated_bankid(::std::string* bankid);

  // optional string branchID = 3;
  void clear_branchid();
  static const int kBranchIDFieldNumber = 3;
  const ::std::string& branchid() const;
  void set_branchid(const ::std::string& value);
  void set_branchid(const char* value);
  void set_branchid(const char* value, size_t size);
  ::std::string* mutable_branchid();
  ::std::string* release_branchid();
  void set_allocated_branchid(::std::string* branchid);

  // optional bytes name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBBankInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr bankid_;
  ::google::protobuf::internal::ArenaStringPtr branchid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBBankInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBUserAccountInfo : public ::google::protobuf::Message {
 public:
  PBUserAccountInfo();
  virtual ~PBUserAccountInfo();

  PBUserAccountInfo(const PBUserAccountInfo& from);

  inline PBUserAccountInfo& operator=(const PBUserAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUserAccountInfo& default_instance();

  void Swap(PBUserAccountInfo* other);

  // implements Message ----------------------------------------------

  inline PBUserAccountInfo* New() const { return New(NULL); }

  PBUserAccountInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUserAccountInfo& from);
  void MergeFrom(const PBUserAccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBUserAccountInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string bankID = 2;
  void clear_bankid();
  static const int kBankIDFieldNumber = 2;
  const ::std::string& bankid() const;
  void set_bankid(const ::std::string& value);
  void set_bankid(const char* value);
  void set_bankid(const char* value, size_t size);
  ::std::string* mutable_bankid();
  ::std::string* release_bankid();
  void set_allocated_bankid(::std::string* bankid);

  // optional string bankBranchID = 3;
  void clear_bankbranchid();
  static const int kBankBranchIDFieldNumber = 3;
  const ::std::string& bankbranchid() const;
  void set_bankbranchid(const ::std::string& value);
  void set_bankbranchid(const char* value);
  void set_bankbranchid(const char* value, size_t size);
  ::std::string* mutable_bankbranchid();
  ::std::string* release_bankbranchid();
  void set_allocated_bankbranchid(::std::string* bankbranchid);

  // optional string bankAccount = 4;
  void clear_bankaccount();
  static const int kBankAccountFieldNumber = 4;
  const ::std::string& bankaccount() const;
  void set_bankaccount(const ::std::string& value);
  void set_bankaccount(const char* value);
  void set_bankaccount(const char* value, size_t size);
  ::std::string* mutable_bankaccount();
  ::std::string* release_bankaccount();
  void set_allocated_bankaccount(::std::string* bankaccount);

  // optional string brokerID = 5;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 5;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // optional string brokerBranchID = 6;
  void clear_brokerbranchid();
  static const int kBrokerBranchIDFieldNumber = 6;
  const ::std::string& brokerbranchid() const;
  void set_brokerbranchid(const ::std::string& value);
  void set_brokerbranchid(const char* value);
  void set_brokerbranchid(const char* value, size_t size);
  ::std::string* mutable_brokerbranchid();
  ::std::string* release_brokerbranchid();
  void set_allocated_brokerbranchid(::std::string* brokerbranchid);

  // optional string accountID = 7;
  void clear_accountid();
  static const int kAccountIDFieldNumber = 7;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // optional string idCardNo = 8;
  void clear_idcardno();
  static const int kIdCardNoFieldNumber = 8;
  const ::std::string& idcardno() const;
  void set_idcardno(const ::std::string& value);
  void set_idcardno(const char* value);
  void set_idcardno(const char* value, size_t size);
  ::std::string* mutable_idcardno();
  ::std::string* release_idcardno();
  void set_allocated_idcardno(::std::string* idcardno);

  // optional bytes customerName = 9;
  void clear_customername();
  static const int kCustomerNameFieldNumber = 9;
  const ::std::string& customername() const;
  void set_customername(const ::std::string& value);
  void set_customername(const char* value);
  void set_customername(const void* value, size_t size);
  ::std::string* mutable_customername();
  ::std::string* release_customername();
  void set_allocated_customername(::std::string* customername);

  // optional string currencyID = 10;
  void clear_currencyid();
  static const int kCurrencyIDFieldNumber = 10;
  const ::std::string& currencyid() const;
  void set_currencyid(const ::std::string& value);
  void set_currencyid(const char* value);
  void set_currencyid(const char* value, size_t size);
  ::std::string* mutable_currencyid();
  ::std::string* release_currencyid();
  void set_allocated_currencyid(::std::string* currencyid);

  // optional int32 custType = 11;
  void clear_custtype();
  static const int kCustTypeFieldNumber = 11;
  ::google::protobuf::int32 custtype() const;
  void set_custtype(::google::protobuf::int32 value);

  // optional int32 bankAccType = 12;
  void clear_bankacctype();
  static const int kBankAccTypeFieldNumber = 12;
  ::google::protobuf::int32 bankacctype() const;
  void set_bankacctype(::google::protobuf::int32 value);

  // optional double bankUseAmount = 13;
  void clear_bankuseamount();
  static const int kBankUseAmountFieldNumber = 13;
  double bankuseamount() const;
  void set_bankuseamount(double value);

  // optional double bankFetchAmount = 14;
  void clear_bankfetchamount();
  static const int kBankFetchAmountFieldNumber = 14;
  double bankfetchamount() const;
  void set_bankfetchamount(double value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.Business.PBUserAccountInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr bankid_;
  ::google::protobuf::internal::ArenaStringPtr bankbranchid_;
  ::google::protobuf::internal::ArenaStringPtr bankaccount_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr brokerbranchid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr idcardno_;
  ::google::protobuf::internal::ArenaStringPtr customername_;
  ::google::protobuf::internal::ArenaStringPtr currencyid_;
  ::google::protobuf::int32 custtype_;
  ::google::protobuf::int32 bankacctype_;
  double bankuseamount_;
  double bankfetchamount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_businessobj_2eproto();
  friend void protobuf_AssignDesc_businessobj_2eproto();
  friend void protobuf_ShutdownFile_businessobj_2eproto();

  void InitAsDefaultInstance();
  static PBUserAccountInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMarketData

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBMarketData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBMarketData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBMarketData::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBMarketData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketData.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBMarketData::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketData.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBMarketData::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketData.header)
}

// optional string exchange = 2;
inline void PBMarketData::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMarketData::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketData::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.exchange)
}
inline void PBMarketData::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketData.exchange)
}
inline void PBMarketData::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketData.exchange)
}
inline ::std::string* PBMarketData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketData.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMarketData::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketData.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketData.exchange)
}

// optional string contract = 3;
inline void PBMarketData::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMarketData::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketData::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.contract)
}
inline void PBMarketData::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketData.contract)
}
inline void PBMarketData::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketData.contract)
}
inline ::std::string* PBMarketData::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketData.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMarketData::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketData.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketData::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketData.contract)
}

// optional double preCloseValue = 4;
inline void PBMarketData::clear_preclosevalue() {
  preclosevalue_ = 0;
}
inline double PBMarketData::preclosevalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.preCloseValue)
  return preclosevalue_;
}
inline void PBMarketData::set_preclosevalue(double value) {
  
  preclosevalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.preCloseValue)
}

// optional double openValue = 5;
inline void PBMarketData::clear_openvalue() {
  openvalue_ = 0;
}
inline double PBMarketData::openvalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.openValue)
  return openvalue_;
}
inline void PBMarketData::set_openvalue(double value) {
  
  openvalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.openValue)
}

// optional double turnover = 6;
inline void PBMarketData::clear_turnover() {
  turnover_ = 0;
}
inline double PBMarketData::turnover() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.turnover)
  return turnover_;
}
inline void PBMarketData::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.turnover)
}

// optional int32 volume = 7;
inline void PBMarketData::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 PBMarketData::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.volume)
  return volume_;
}
inline void PBMarketData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.volume)
}

// optional double highValue = 8;
inline void PBMarketData::clear_highvalue() {
  highvalue_ = 0;
}
inline double PBMarketData::highvalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.highValue)
  return highvalue_;
}
inline void PBMarketData::set_highvalue(double value) {
  
  highvalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.highValue)
}

// optional double lowValue = 9;
inline void PBMarketData::clear_lowvalue() {
  lowvalue_ = 0;
}
inline double PBMarketData::lowvalue() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.lowValue)
  return lowvalue_;
}
inline void PBMarketData::set_lowvalue(double value) {
  
  lowvalue_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.lowValue)
}

// optional double matchPrice = 10;
inline void PBMarketData::clear_matchprice() {
  matchprice_ = 0;
}
inline double PBMarketData::matchprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.matchPrice)
  return matchprice_;
}
inline void PBMarketData::set_matchprice(double value) {
  
  matchprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.matchPrice)
}

// repeated double askPrice = 11;
inline int PBMarketData::askprice_size() const {
  return askprice_.size();
}
inline void PBMarketData::clear_askprice() {
  askprice_.Clear();
}
inline double PBMarketData::askprice(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.askPrice)
  return askprice_.Get(index);
}
inline void PBMarketData::set_askprice(int index, double value) {
  askprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.askPrice)
}
inline void PBMarketData::add_askprice(double value) {
  askprice_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.askPrice)
}
inline const ::google::protobuf::RepeatedField< double >&
PBMarketData::askprice() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.askPrice)
  return askprice_;
}
inline ::google::protobuf::RepeatedField< double >*
PBMarketData::mutable_askprice() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.askPrice)
  return &askprice_;
}

// repeated int32 askVolume = 12;
inline int PBMarketData::askvolume_size() const {
  return askvolume_.size();
}
inline void PBMarketData::clear_askvolume() {
  askvolume_.Clear();
}
inline ::google::protobuf::int32 PBMarketData::askvolume(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.askVolume)
  return askvolume_.Get(index);
}
inline void PBMarketData::set_askvolume(int index, ::google::protobuf::int32 value) {
  askvolume_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.askVolume)
}
inline void PBMarketData::add_askvolume(::google::protobuf::int32 value) {
  askvolume_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.askVolume)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBMarketData::askvolume() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.askVolume)
  return askvolume_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBMarketData::mutable_askvolume() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.askVolume)
  return &askvolume_;
}

// repeated double bidPrice = 13;
inline int PBMarketData::bidprice_size() const {
  return bidprice_.size();
}
inline void PBMarketData::clear_bidprice() {
  bidprice_.Clear();
}
inline double PBMarketData::bidprice(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.bidPrice)
  return bidprice_.Get(index);
}
inline void PBMarketData::set_bidprice(int index, double value) {
  bidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.bidPrice)
}
inline void PBMarketData::add_bidprice(double value) {
  bidprice_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.bidPrice)
}
inline const ::google::protobuf::RepeatedField< double >&
PBMarketData::bidprice() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.bidPrice)
  return bidprice_;
}
inline ::google::protobuf::RepeatedField< double >*
PBMarketData::mutable_bidprice() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.bidPrice)
  return &bidprice_;
}

// repeated int32 bidVolume = 14;
inline int PBMarketData::bidvolume_size() const {
  return bidvolume_.size();
}
inline void PBMarketData::clear_bidvolume() {
  bidvolume_.Clear();
}
inline ::google::protobuf::int32 PBMarketData::bidvolume(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.bidVolume)
  return bidvolume_.Get(index);
}
inline void PBMarketData::set_bidvolume(int index, ::google::protobuf::int32 value) {
  bidvolume_.Set(index, value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.bidVolume)
}
inline void PBMarketData::add_bidvolume(::google::protobuf::int32 value) {
  bidvolume_.Add(value);
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketData.bidVolume)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBMarketData::bidvolume() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketData.bidVolume)
  return bidvolume_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBMarketData::mutable_bidvolume() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketData.bidVolume)
  return &bidvolume_;
}

// optional double preSettlePrice = 15;
inline void PBMarketData::clear_presettleprice() {
  presettleprice_ = 0;
}
inline double PBMarketData::presettleprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.preSettlePrice)
  return presettleprice_;
}
inline void PBMarketData::set_presettleprice(double value) {
  
  presettleprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.preSettlePrice)
}

// optional double priceChange = 16;
inline void PBMarketData::clear_pricechange() {
  pricechange_ = 0;
}
inline double PBMarketData::pricechange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.priceChange)
  return pricechange_;
}
inline void PBMarketData::set_pricechange(double value) {
  
  pricechange_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.priceChange)
}

// optional double settlePrice = 17;
inline void PBMarketData::clear_settleprice() {
  settleprice_ = 0;
}
inline double PBMarketData::settleprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.settlePrice)
  return settleprice_;
}
inline void PBMarketData::set_settleprice(double value) {
  
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.settlePrice)
}

// optional int32 highLimit = 18;
inline void PBMarketData::clear_highlimit() {
  highlimit_ = 0;
}
inline ::google::protobuf::int32 PBMarketData::highlimit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.highLimit)
  return highlimit_;
}
inline void PBMarketData::set_highlimit(::google::protobuf::int32 value) {
  
  highlimit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.highLimit)
}

// optional int32 lowLimit = 19;
inline void PBMarketData::clear_lowlimit() {
  lowlimit_ = 0;
}
inline ::google::protobuf::int32 PBMarketData::lowlimit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.lowLimit)
  return lowlimit_;
}
inline void PBMarketData::set_lowlimit(::google::protobuf::int32 value) {
  
  lowlimit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.lowLimit)
}

// optional double preOpenInterest = 20;
inline void PBMarketData::clear_preopeninterest() {
  preopeninterest_ = 0;
}
inline double PBMarketData::preopeninterest() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.preOpenInterest)
  return preopeninterest_;
}
inline void PBMarketData::set_preopeninterest(double value) {
  
  preopeninterest_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.preOpenInterest)
}

// optional double openInterest = 21;
inline void PBMarketData::clear_openinterest() {
  openinterest_ = 0;
}
inline double PBMarketData::openinterest() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.openInterest)
  return openinterest_;
}
inline void PBMarketData::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.openInterest)
}

// optional double averagePrice = 22;
inline void PBMarketData::clear_averageprice() {
  averageprice_ = 0;
}
inline double PBMarketData::averageprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.averagePrice)
  return averageprice_;
}
inline void PBMarketData::set_averageprice(double value) {
  
  averageprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.averagePrice)
}

// optional int32 updateTime = 23;
inline void PBMarketData::clear_updatetime() {
  updatetime_ = 0;
}
inline ::google::protobuf::int32 PBMarketData::updatetime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.updateTime)
  return updatetime_;
}
inline void PBMarketData::set_updatetime(::google::protobuf::int32 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.updateTime)
}

// optional int32 tradingDay = 24;
inline void PBMarketData::clear_tradingday() {
  tradingday_ = 0;
}
inline ::google::protobuf::int32 PBMarketData::tradingday() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketData.tradingDay)
  return tradingday_;
}
inline void PBMarketData::set_tradingday(::google::protobuf::int32 value) {
  
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketData.tradingDay)
}

// -------------------------------------------------------------------

// PBMarketDataList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBMarketDataList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBMarketDataList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBMarketDataList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketDataList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBMarketDataList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketDataList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBMarketDataList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketDataList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBMarketDataList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketDataList.header)
}

// repeated .Micro.Future.Message.Business.PBMarketData marketData = 2;
inline int PBMarketDataList::marketdata_size() const {
  return marketdata_.size();
}
inline void PBMarketDataList::clear_marketdata() {
  marketdata_.Clear();
}
inline const ::Micro::Future::Message::Business::PBMarketData& PBMarketDataList::marketdata(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketDataList.marketData)
  return marketdata_.Get(index);
}
inline ::Micro::Future::Message::Business::PBMarketData* PBMarketDataList::mutable_marketdata(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketDataList.marketData)
  return marketdata_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBMarketData* PBMarketDataList::add_marketdata() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBMarketDataList.marketData)
  return marketdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData >*
PBMarketDataList::mutable_marketdata() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBMarketDataList.marketData)
  return &marketdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBMarketData >&
PBMarketDataList::marketdata() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBMarketDataList.marketData)
  return marketdata_;
}

// -------------------------------------------------------------------

// PBPortfolio

// optional string name = 1;
inline void PBPortfolio::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPortfolio::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPortfolio.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPortfolio::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPortfolio.name)
}
inline void PBPortfolio::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPortfolio.name)
}
inline void PBPortfolio::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPortfolio.name)
}
inline ::std::string* PBPortfolio::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPortfolio.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPortfolio::release_name() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPortfolio.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPortfolio::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPortfolio.name)
}

// optional int32 hedgeDelay = 2;
inline void PBPortfolio::clear_hedgedelay() {
  hedgedelay_ = 0;
}
inline ::google::protobuf::int32 PBPortfolio::hedgedelay() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPortfolio.hedgeDelay)
  return hedgedelay_;
}
inline void PBPortfolio::set_hedgedelay(::google::protobuf::int32 value) {
  
  hedgedelay_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPortfolio.hedgeDelay)
}

// optional string description = 3;
inline void PBPortfolio::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPortfolio::description() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPortfolio.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPortfolio::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPortfolio.description)
}
inline void PBPortfolio::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPortfolio.description)
}
inline void PBPortfolio::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPortfolio.description)
}
inline ::std::string* PBPortfolio::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPortfolio.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPortfolio::release_description() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPortfolio.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPortfolio::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPortfolio.description)
}

// -------------------------------------------------------------------

// PBPortfolioList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBPortfolioList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBPortfolioList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBPortfolioList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPortfolioList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBPortfolioList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPortfolioList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBPortfolioList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPortfolioList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBPortfolioList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPortfolioList.header)
}

// repeated .Micro.Future.Message.Business.PBPortfolio portfolio = 2;
inline int PBPortfolioList::portfolio_size() const {
  return portfolio_.size();
}
inline void PBPortfolioList::clear_portfolio() {
  portfolio_.Clear();
}
inline const ::Micro::Future::Message::Business::PBPortfolio& PBPortfolioList::portfolio(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPortfolioList.portfolio)
  return portfolio_.Get(index);
}
inline ::Micro::Future::Message::Business::PBPortfolio* PBPortfolioList::mutable_portfolio(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPortfolioList.portfolio)
  return portfolio_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBPortfolio* PBPortfolioList::add_portfolio() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBPortfolioList.portfolio)
  return portfolio_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPortfolio >*
PBPortfolioList::mutable_portfolio() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBPortfolioList.portfolio)
  return &portfolio_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPortfolio >&
PBPortfolioList::portfolio() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBPortfolioList.portfolio)
  return portfolio_;
}

// -------------------------------------------------------------------

// PBPricingData

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBPricingData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBPricingData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBPricingData::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBPricingData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingData.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBPricingData::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPricingData.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBPricingData::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingData.header)
}

// optional string exchange = 2;
inline void PBPricingData::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPricingData::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingData::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.exchange)
}
inline void PBPricingData::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPricingData.exchange)
}
inline void PBPricingData::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPricingData.exchange)
}
inline ::std::string* PBPricingData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingData.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPricingData::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPricingData.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingData.exchange)
}

// optional string contract = 3;
inline void PBPricingData::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPricingData::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingData::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.contract)
}
inline void PBPricingData::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPricingData.contract)
}
inline void PBPricingData::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPricingData.contract)
}
inline ::std::string* PBPricingData::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingData.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPricingData::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPricingData.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingData::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingData.contract)
}

// optional double askPrice = 4;
inline void PBPricingData::clear_askprice() {
  askprice_ = 0;
}
inline double PBPricingData::askprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.askPrice)
  return askprice_;
}
inline void PBPricingData::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.askPrice)
}

// optional double bidPrice = 5;
inline void PBPricingData::clear_bidprice() {
  bidprice_ = 0;
}
inline double PBPricingData::bidprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.bidPrice)
  return bidprice_;
}
inline void PBPricingData::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.bidPrice)
}

// optional int32 askSize = 6;
inline void PBPricingData::clear_asksize() {
  asksize_ = 0;
}
inline ::google::protobuf::int32 PBPricingData::asksize() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.askSize)
  return asksize_;
}
inline void PBPricingData::set_asksize(::google::protobuf::int32 value) {
  
  asksize_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.askSize)
}

// optional int32 bidSize = 7;
inline void PBPricingData::clear_bidsize() {
  bidsize_ = 0;
}
inline ::google::protobuf::int32 PBPricingData::bidsize() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingData.bidSize)
  return bidsize_;
}
inline void PBPricingData::set_bidsize(::google::protobuf::int32 value) {
  
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingData.bidSize)
}

// -------------------------------------------------------------------

// PBPricingDataList

// repeated .Micro.Future.Message.Business.PBPricingData pricingData = 1;
inline int PBPricingDataList::pricingdata_size() const {
  return pricingdata_.size();
}
inline void PBPricingDataList::clear_pricingdata() {
  pricingdata_.Clear();
}
inline const ::Micro::Future::Message::Business::PBPricingData& PBPricingDataList::pricingdata(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingDataList.pricingData)
  return pricingdata_.Get(index);
}
inline ::Micro::Future::Message::Business::PBPricingData* PBPricingDataList::mutable_pricingdata(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingDataList.pricingData)
  return pricingdata_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBPricingData* PBPricingDataList::add_pricingdata() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBPricingDataList.pricingData)
  return pricingdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData >*
PBPricingDataList::mutable_pricingdata() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBPricingDataList.pricingData)
  return &pricingdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingData >&
PBPricingDataList::pricingdata() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBPricingDataList.pricingData)
  return pricingdata_;
}

// optional .Micro.Future.Message.DataHeader header = 2;
inline bool PBPricingDataList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBPricingDataList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBPricingDataList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingDataList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBPricingDataList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingDataList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBPricingDataList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPricingDataList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBPricingDataList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingDataList.header)
}

// -------------------------------------------------------------------

// PBOptionData

// optional double askPrice = 1;
inline void PBOptionData::clear_askprice() {
  askprice_ = 0;
}
inline double PBOptionData::askprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askPrice)
  return askprice_;
}
inline void PBOptionData::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askPrice)
}

// optional double bidPrice = 2;
inline void PBOptionData::clear_bidprice() {
  bidprice_ = 0;
}
inline double PBOptionData::bidprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidPrice)
  return bidprice_;
}
inline void PBOptionData::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidPrice)
}

// optional int32 askSize = 3;
inline void PBOptionData::clear_asksize() {
  asksize_ = 0;
}
inline ::google::protobuf::int32 PBOptionData::asksize() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askSize)
  return asksize_;
}
inline void PBOptionData::set_asksize(::google::protobuf::int32 value) {
  
  asksize_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askSize)
}

// optional int32 bidSize = 4;
inline void PBOptionData::clear_bidsize() {
  bidsize_ = 0;
}
inline ::google::protobuf::int32 PBOptionData::bidsize() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidSize)
  return bidsize_;
}
inline void PBOptionData::set_bidsize(::google::protobuf::int32 value) {
  
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidSize)
}

// optional double askVolatility = 5;
inline void PBOptionData::clear_askvolatility() {
  askvolatility_ = 0;
}
inline double PBOptionData::askvolatility() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askVolatility)
  return askvolatility_;
}
inline void PBOptionData::set_askvolatility(double value) {
  
  askvolatility_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askVolatility)
}

// optional double bidVolatility = 6;
inline void PBOptionData::clear_bidvolatility() {
  bidvolatility_ = 0;
}
inline double PBOptionData::bidvolatility() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidVolatility)
  return bidvolatility_;
}
inline void PBOptionData::set_bidvolatility(double value) {
  
  bidvolatility_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidVolatility)
}

// optional double askDelta = 7;
inline void PBOptionData::clear_askdelta() {
  askdelta_ = 0;
}
inline double PBOptionData::askdelta() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askDelta)
  return askdelta_;
}
inline void PBOptionData::set_askdelta(double value) {
  
  askdelta_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askDelta)
}

// optional double bidDelta = 8;
inline void PBOptionData::clear_biddelta() {
  biddelta_ = 0;
}
inline double PBOptionData::biddelta() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidDelta)
  return biddelta_;
}
inline void PBOptionData::set_biddelta(double value) {
  
  biddelta_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidDelta)
}

// optional double askTheta = 9;
inline void PBOptionData::clear_asktheta() {
  asktheta_ = 0;
}
inline double PBOptionData::asktheta() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askTheta)
  return asktheta_;
}
inline void PBOptionData::set_asktheta(double value) {
  
  asktheta_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askTheta)
}

// optional double bidTheta = 10;
inline void PBOptionData::clear_bidtheta() {
  bidtheta_ = 0;
}
inline double PBOptionData::bidtheta() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidTheta)
  return bidtheta_;
}
inline void PBOptionData::set_bidtheta(double value) {
  
  bidtheta_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidTheta)
}

// optional double askGamma = 11;
inline void PBOptionData::clear_askgamma() {
  askgamma_ = 0;
}
inline double PBOptionData::askgamma() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askGamma)
  return askgamma_;
}
inline void PBOptionData::set_askgamma(double value) {
  
  askgamma_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askGamma)
}

// optional double bidGamma = 12;
inline void PBOptionData::clear_bidgamma() {
  bidgamma_ = 0;
}
inline double PBOptionData::bidgamma() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidGamma)
  return bidgamma_;
}
inline void PBOptionData::set_bidgamma(double value) {
  
  bidgamma_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidGamma)
}

// optional double askVega = 13;
inline void PBOptionData::clear_askvega() {
  askvega_ = 0;
}
inline double PBOptionData::askvega() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.askVega)
  return askvega_;
}
inline void PBOptionData::set_askvega(double value) {
  
  askvega_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.askVega)
}

// optional double bidVega = 14;
inline void PBOptionData::clear_bidvega() {
  bidvega_ = 0;
}
inline double PBOptionData::bidvega() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOptionData.bidVega)
  return bidvega_;
}
inline void PBOptionData::set_bidvega(double value) {
  
  bidvega_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOptionData.bidVega)
}

// -------------------------------------------------------------------

// PBTradingDeskOptionParams

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBTradingDeskOptionParams::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBTradingDeskOptionParams::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBTradingDeskOptionParams::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradingDeskOptionParams.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBTradingDeskOptionParams::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradingDeskOptionParams.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBTradingDeskOptionParams::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradingDeskOptionParams.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBTradingDeskOptionParams::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradingDeskOptionParams.header)
}

// optional string exchange = 2;
inline void PBTradingDeskOptionParams::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradingDeskOptionParams::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradingDeskOptionParams::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
}
inline void PBTradingDeskOptionParams::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
}
inline void PBTradingDeskOptionParams::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
}
inline ::std::string* PBTradingDeskOptionParams::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradingDeskOptionParams::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradingDeskOptionParams::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradingDeskOptionParams.exchange)
}

// optional string contract = 3;
inline void PBTradingDeskOptionParams::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradingDeskOptionParams::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradingDeskOptionParams::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
}
inline void PBTradingDeskOptionParams::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
}
inline void PBTradingDeskOptionParams::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
}
inline ::std::string* PBTradingDeskOptionParams::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradingDeskOptionParams::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradingDeskOptionParams::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradingDeskOptionParams.contract)
}

// optional .Micro.Future.Message.Business.PBOptionData MarketData = 4;
inline bool PBTradingDeskOptionParams::has_marketdata() const {
  return !_is_default_instance_ && marketdata_ != NULL;
}
inline void PBTradingDeskOptionParams::clear_marketdata() {
  if (GetArenaNoVirtual() == NULL && marketdata_ != NULL) delete marketdata_;
  marketdata_ = NULL;
}
inline const ::Micro::Future::Message::Business::PBOptionData& PBTradingDeskOptionParams::marketdata() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradingDeskOptionParams.MarketData)
  return marketdata_ != NULL ? *marketdata_ : *default_instance_->marketdata_;
}
inline ::Micro::Future::Message::Business::PBOptionData* PBTradingDeskOptionParams::mutable_marketdata() {
  
  if (marketdata_ == NULL) {
    marketdata_ = new ::Micro::Future::Message::Business::PBOptionData;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradingDeskOptionParams.MarketData)
  return marketdata_;
}
inline ::Micro::Future::Message::Business::PBOptionData* PBTradingDeskOptionParams::release_marketdata() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradingDeskOptionParams.MarketData)
  
  ::Micro::Future::Message::Business::PBOptionData* temp = marketdata_;
  marketdata_ = NULL;
  return temp;
}
inline void PBTradingDeskOptionParams::set_allocated_marketdata(::Micro::Future::Message::Business::PBOptionData* marketdata) {
  delete marketdata_;
  marketdata_ = marketdata;
  if (marketdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradingDeskOptionParams.MarketData)
}

// optional .Micro.Future.Message.Business.PBOptionData TheoData = 5;
inline bool PBTradingDeskOptionParams::has_theodata() const {
  return !_is_default_instance_ && theodata_ != NULL;
}
inline void PBTradingDeskOptionParams::clear_theodata() {
  if (GetArenaNoVirtual() == NULL && theodata_ != NULL) delete theodata_;
  theodata_ = NULL;
}
inline const ::Micro::Future::Message::Business::PBOptionData& PBTradingDeskOptionParams::theodata() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradingDeskOptionParams.TheoData)
  return theodata_ != NULL ? *theodata_ : *default_instance_->theodata_;
}
inline ::Micro::Future::Message::Business::PBOptionData* PBTradingDeskOptionParams::mutable_theodata() {
  
  if (theodata_ == NULL) {
    theodata_ = new ::Micro::Future::Message::Business::PBOptionData;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradingDeskOptionParams.TheoData)
  return theodata_;
}
inline ::Micro::Future::Message::Business::PBOptionData* PBTradingDeskOptionParams::release_theodata() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradingDeskOptionParams.TheoData)
  
  ::Micro::Future::Message::Business::PBOptionData* temp = theodata_;
  theodata_ = NULL;
  return temp;
}
inline void PBTradingDeskOptionParams::set_allocated_theodata(::Micro::Future::Message::Business::PBOptionData* theodata) {
  delete theodata_;
  theodata_ = theodata;
  if (theodata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradingDeskOptionParams.TheoData)
}

// -------------------------------------------------------------------

// PBPricingContract

// optional string exchange = 1;
inline void PBPricingContract::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPricingContract::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingContract.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingContract::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingContract.exchange)
}
inline void PBPricingContract::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPricingContract.exchange)
}
inline void PBPricingContract::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPricingContract.exchange)
}
inline ::std::string* PBPricingContract::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingContract.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPricingContract::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPricingContract.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingContract::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingContract.exchange)
}

// optional string contract = 2;
inline void PBPricingContract::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPricingContract::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingContract.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingContract::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingContract.contract)
}
inline void PBPricingContract::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPricingContract.contract)
}
inline void PBPricingContract::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPricingContract.contract)
}
inline ::std::string* PBPricingContract::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPricingContract.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPricingContract::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPricingContract.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPricingContract::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPricingContract.contract)
}

// optional double weight = 3;
inline void PBPricingContract::clear_weight() {
  weight_ = 0;
}
inline double PBPricingContract::weight() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingContract.weight)
  return weight_;
}
inline void PBPricingContract::set_weight(double value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingContract.weight)
}

// optional double adjust = 4;
inline void PBPricingContract::clear_adjust() {
  adjust_ = 0;
}
inline double PBPricingContract::adjust() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPricingContract.adjust)
  return adjust_;
}
inline void PBPricingContract::set_adjust(double value) {
  
  adjust_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPricingContract.adjust)
}

// -------------------------------------------------------------------

// PBStrategy

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBStrategy::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBStrategy::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBStrategy::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBStrategy::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBStrategy::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBStrategy::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.header)
}

// optional string exchange = 2;
inline void PBStrategy::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.exchange)
}
inline void PBStrategy::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.exchange)
}
inline void PBStrategy::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.exchange)
}
inline ::std::string* PBStrategy::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.exchange)
}

// optional string contract = 3;
inline void PBStrategy::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.contract)
}
inline void PBStrategy::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.contract)
}
inline void PBStrategy::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.contract)
}
inline ::std::string* PBStrategy::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.contract)
}

// optional string underlying = 4;
inline void PBStrategy::clear_underlying() {
  underlying_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::underlying() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.underlying)
  return underlying_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_underlying(const ::std::string& value) {
  
  underlying_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.underlying)
}
inline void PBStrategy::set_underlying(const char* value) {
  
  underlying_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.underlying)
}
inline void PBStrategy::set_underlying(const char* value, size_t size) {
  
  underlying_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.underlying)
}
inline ::std::string* PBStrategy::mutable_underlying() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.underlying)
  return underlying_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_underlying() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.underlying)
  
  return underlying_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_underlying(::std::string* underlying) {
  if (underlying != NULL) {
    
  } else {
    
  }
  underlying_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.underlying)
}

// optional string symbol = 5;
inline void PBStrategy::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::symbol() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.symbol)
}
inline void PBStrategy::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.symbol)
}
inline void PBStrategy::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.symbol)
}
inline ::std::string* PBStrategy::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_symbol() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.symbol)
}

// optional string description = 6;
inline void PBStrategy::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::description() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.description)
}
inline void PBStrategy::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.description)
}
inline void PBStrategy::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.description)
}
inline ::std::string* PBStrategy::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_description() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.description)
}

// optional bool hedging = 7;
inline void PBStrategy::clear_hedging() {
  hedging_ = false;
}
inline bool PBStrategy::hedging() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.hedging)
  return hedging_;
}
inline void PBStrategy::set_hedging(bool value) {
  
  hedging_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.hedging)
}

// optional bool bidEnabled = 8;
inline void PBStrategy::clear_bidenabled() {
  bidenabled_ = false;
}
inline bool PBStrategy::bidenabled() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.bidEnabled)
  return bidenabled_;
}
inline void PBStrategy::set_bidenabled(bool value) {
  
  bidenabled_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.bidEnabled)
}

// optional bool askEnabled = 9;
inline void PBStrategy::clear_askenabled() {
  askenabled_ = false;
}
inline bool PBStrategy::askenabled() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.askEnabled)
  return askenabled_;
}
inline void PBStrategy::set_askenabled(bool value) {
  
  askenabled_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.askEnabled)
}

// optional int32 bidQT = 10;
inline void PBStrategy::clear_bidqt() {
  bidqt_ = 0;
}
inline ::google::protobuf::int32 PBStrategy::bidqt() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.bidQT)
  return bidqt_;
}
inline void PBStrategy::set_bidqt(::google::protobuf::int32 value) {
  
  bidqt_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.bidQT)
}

// optional int32 askQT = 11;
inline void PBStrategy::clear_askqt() {
  askqt_ = 0;
}
inline ::google::protobuf::int32 PBStrategy::askqt() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.askQT)
  return askqt_;
}
inline void PBStrategy::set_askqt(::google::protobuf::int32 value) {
  
  askqt_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.askQT)
}

// optional int32 depth = 12;
inline void PBStrategy::clear_depth() {
  depth_ = 0;
}
inline ::google::protobuf::int32 PBStrategy::depth() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.depth)
  return depth_;
}
inline void PBStrategy::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.depth)
}

// repeated .Micro.Future.Message.Business.PBPricingContract pricingContracts = 13;
inline int PBStrategy::pricingcontracts_size() const {
  return pricingcontracts_.size();
}
inline void PBStrategy::clear_pricingcontracts() {
  pricingcontracts_.Clear();
}
inline const ::Micro::Future::Message::Business::PBPricingContract& PBStrategy::pricingcontracts(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.pricingContracts)
  return pricingcontracts_.Get(index);
}
inline ::Micro::Future::Message::Business::PBPricingContract* PBStrategy::mutable_pricingcontracts(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.pricingContracts)
  return pricingcontracts_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBPricingContract* PBStrategy::add_pricingcontracts() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBStrategy.pricingContracts)
  return pricingcontracts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingContract >*
PBStrategy::mutable_pricingcontracts() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBStrategy.pricingContracts)
  return &pricingcontracts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBPricingContract >&
PBStrategy::pricingcontracts() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBStrategy.pricingContracts)
  return pricingcontracts_;
}

// optional string pricingModel = 14;
inline void PBStrategy::clear_pricingmodel() {
  pricingmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::pricingmodel() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.pricingModel)
  return pricingmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_pricingmodel(const ::std::string& value) {
  
  pricingmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.pricingModel)
}
inline void PBStrategy::set_pricingmodel(const char* value) {
  
  pricingmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.pricingModel)
}
inline void PBStrategy::set_pricingmodel(const char* value, size_t size) {
  
  pricingmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.pricingModel)
}
inline ::std::string* PBStrategy::mutable_pricingmodel() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.pricingModel)
  return pricingmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_pricingmodel() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.pricingModel)
  
  return pricingmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_pricingmodel(::std::string* pricingmodel) {
  if (pricingmodel != NULL) {
    
  } else {
    
  }
  pricingmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pricingmodel);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.pricingModel)
}

// optional string ivModel = 15;
inline void PBStrategy::clear_ivmodel() {
  ivmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::ivmodel() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.ivModel)
  return ivmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_ivmodel(const ::std::string& value) {
  
  ivmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.ivModel)
}
inline void PBStrategy::set_ivmodel(const char* value) {
  
  ivmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.ivModel)
}
inline void PBStrategy::set_ivmodel(const char* value, size_t size) {
  
  ivmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.ivModel)
}
inline ::std::string* PBStrategy::mutable_ivmodel() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.ivModel)
  return ivmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_ivmodel() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.ivModel)
  
  return ivmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_ivmodel(::std::string* ivmodel) {
  if (ivmodel != NULL) {
    
  } else {
    
  }
  ivmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ivmodel);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.ivModel)
}

// optional string volModel = 16;
inline void PBStrategy::clear_volmodel() {
  volmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBStrategy::volmodel() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategy.volModel)
  return volmodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_volmodel(const ::std::string& value) {
  
  volmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBStrategy.volModel)
}
inline void PBStrategy::set_volmodel(const char* value) {
  
  volmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBStrategy.volModel)
}
inline void PBStrategy::set_volmodel(const char* value, size_t size) {
  
  volmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBStrategy.volModel)
}
inline ::std::string* PBStrategy::mutable_volmodel() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategy.volModel)
  return volmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBStrategy::release_volmodel() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategy.volModel)
  
  return volmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBStrategy::set_allocated_volmodel(::std::string* volmodel) {
  if (volmodel != NULL) {
    
  } else {
    
  }
  volmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volmodel);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategy.volModel)
}

// -------------------------------------------------------------------

// PBStrategyList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBStrategyList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBStrategyList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBStrategyList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategyList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBStrategyList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategyList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBStrategyList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBStrategyList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBStrategyList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBStrategyList.header)
}

// repeated .Micro.Future.Message.Business.PBStrategy strategy = 2;
inline int PBStrategyList::strategy_size() const {
  return strategy_.size();
}
inline void PBStrategyList::clear_strategy() {
  strategy_.Clear();
}
inline const ::Micro::Future::Message::Business::PBStrategy& PBStrategyList::strategy(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_.Get(index);
}
inline ::Micro::Future::Message::Business::PBStrategy* PBStrategyList::mutable_strategy(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBStrategy* PBStrategyList::add_strategy() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy >*
PBStrategyList::mutable_strategy() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBStrategyList.strategy)
  return &strategy_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBStrategy >&
PBStrategyList::strategy() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBStrategyList.strategy)
  return strategy_;
}

// -------------------------------------------------------------------

// PBContractParam

// optional string exchange = 1;
inline void PBContractParam::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractParam::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractParam::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.exchange)
}
inline void PBContractParam::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractParam.exchange)
}
inline void PBContractParam::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractParam.exchange)
}
inline ::std::string* PBContractParam::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParam.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractParam::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractParam.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractParam::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractParam.exchange)
}

// optional string contract = 2;
inline void PBContractParam::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractParam::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractParam::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.contract)
}
inline void PBContractParam::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractParam.contract)
}
inline void PBContractParam::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractParam.contract)
}
inline ::std::string* PBContractParam::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParam.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractParam::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractParam.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractParam::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractParam.contract)
}

// optional int32 depthVol = 3;
inline void PBContractParam::clear_depthvol() {
  depthvol_ = 0;
}
inline ::google::protobuf::int32 PBContractParam::depthvol() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.depthVol)
  return depthvol_;
}
inline void PBContractParam::set_depthvol(::google::protobuf::int32 value) {
  
  depthvol_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.depthVol)
}

// optional double gamma = 4;
inline void PBContractParam::clear_gamma() {
  gamma_ = 0;
}
inline double PBContractParam::gamma() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParam.gamma)
  return gamma_;
}
inline void PBContractParam::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractParam.gamma)
}

// -------------------------------------------------------------------

// PBContractParamList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBContractParamList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBContractParamList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBContractParamList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParamList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBContractParamList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParamList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBContractParamList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractParamList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBContractParamList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractParamList.header)
}

// repeated .Micro.Future.Message.Business.PBContractParam params = 2;
inline int PBContractParamList::params_size() const {
  return params_.size();
}
inline void PBContractParamList::clear_params() {
  params_.Clear();
}
inline const ::Micro::Future::Message::Business::PBContractParam& PBContractParamList::params(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractParamList.params)
  return params_.Get(index);
}
inline ::Micro::Future::Message::Business::PBContractParam* PBContractParamList::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractParamList.params)
  return params_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBContractParam* PBContractParamList::add_params() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBContractParamList.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam >*
PBContractParamList::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBContractParamList.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractParam >&
PBContractParamList::params() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBContractParamList.params)
  return params_;
}

// -------------------------------------------------------------------

// PBOTCUserParam

// optional string exchange = 1;
inline void PBOTCUserParam::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOTCUserParam::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParam.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOTCUserParam::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}
inline void PBOTCUserParam::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}
inline void PBOTCUserParam::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}
inline ::std::string* PBOTCUserParam::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParam.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOTCUserParam::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOTCUserParam.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOTCUserParam::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOTCUserParam.exchange)
}

// optional string contract = 2;
inline void PBOTCUserParam::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOTCUserParam::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParam.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOTCUserParam::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOTCUserParam.contract)
}
inline void PBOTCUserParam::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOTCUserParam.contract)
}
inline void PBOTCUserParam::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOTCUserParam.contract)
}
inline ::std::string* PBOTCUserParam::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParam.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOTCUserParam::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOTCUserParam.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOTCUserParam::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOTCUserParam.contract)
}

// optional double quantity = 3;
inline void PBOTCUserParam::clear_quantity() {
  quantity_ = 0;
}
inline double PBOTCUserParam::quantity() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParam.quantity)
  return quantity_;
}
inline void PBOTCUserParam::set_quantity(double value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOTCUserParam.quantity)
}

// -------------------------------------------------------------------

// PBOTCUserParamList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBOTCUserParamList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBOTCUserParamList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBOTCUserParamList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParamList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBOTCUserParamList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParamList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBOTCUserParamList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOTCUserParamList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBOTCUserParamList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOTCUserParamList.header)
}

// repeated .Micro.Future.Message.Business.PBOTCUserParam params = 2;
inline int PBOTCUserParamList::params_size() const {
  return params_.size();
}
inline void PBOTCUserParamList::clear_params() {
  params_.Clear();
}
inline const ::Micro::Future::Message::Business::PBOTCUserParam& PBOTCUserParamList::params(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_.Get(index);
}
inline ::Micro::Future::Message::Business::PBOTCUserParam* PBOTCUserParamList::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBOTCUserParam* PBOTCUserParamList::add_params() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam >*
PBOTCUserParamList::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBOTCUserParam >&
PBOTCUserParamList::params() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBOTCUserParamList.params)
  return params_;
}

// -------------------------------------------------------------------

// PBOrderRequest

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBOrderRequest::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBOrderRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBOrderRequest::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBOrderRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderRequest.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBOrderRequest::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderRequest.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBOrderRequest::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderRequest.header)
}

// optional uint64 orderID = 2;
inline void PBOrderRequest::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBOrderRequest::orderid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.orderID)
  return orderid_;
}
inline void PBOrderRequest::set_orderid(::google::protobuf::uint64 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.orderID)
}

// optional uint64 orderSysID = 3;
inline void PBOrderRequest::clear_ordersysid() {
  ordersysid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBOrderRequest::ordersysid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.orderSysID)
  return ordersysid_;
}
inline void PBOrderRequest::set_ordersysid(::google::protobuf::uint64 value) {
  
  ordersysid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.orderSysID)
}

// optional string exchange = 4;
inline void PBOrderRequest::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderRequest::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderRequest::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.exchange)
}
inline void PBOrderRequest::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderRequest.exchange)
}
inline void PBOrderRequest::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderRequest.exchange)
}
inline ::std::string* PBOrderRequest::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderRequest.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderRequest::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderRequest.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderRequest::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderRequest.exchange)
}

// optional string contract = 5;
inline void PBOrderRequest::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderRequest::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderRequest::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.contract)
}
inline void PBOrderRequest::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderRequest.contract)
}
inline void PBOrderRequest::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderRequest.contract)
}
inline ::std::string* PBOrderRequest::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderRequest.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderRequest::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderRequest.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderRequest::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderRequest.contract)
}

// optional double limitPrice = 6;
inline void PBOrderRequest::clear_limitprice() {
  limitprice_ = 0;
}
inline double PBOrderRequest::limitprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.limitPrice)
  return limitprice_;
}
inline void PBOrderRequest::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.limitPrice)
}

// optional int32 volume = 7;
inline void PBOrderRequest::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 PBOrderRequest::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.volume)
  return volume_;
}
inline void PBOrderRequest::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.volume)
}

// optional int32 execType = 8;
inline void PBOrderRequest::clear_exectype() {
  exectype_ = 0;
}
inline ::google::protobuf::int32 PBOrderRequest::exectype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.execType)
  return exectype_;
}
inline void PBOrderRequest::set_exectype(::google::protobuf::int32 value) {
  
  exectype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.execType)
}

// optional int32 tif = 9;
inline void PBOrderRequest::clear_tif() {
  tif_ = 0;
}
inline ::google::protobuf::int32 PBOrderRequest::tif() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.tif)
  return tif_;
}
inline void PBOrderRequest::set_tif(::google::protobuf::int32 value) {
  
  tif_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.tif)
}

// optional int32 direction = 10;
inline void PBOrderRequest::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 PBOrderRequest::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.direction)
  return direction_;
}
inline void PBOrderRequest::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.direction)
}

// optional int32 openclose = 11;
inline void PBOrderRequest::clear_openclose() {
  openclose_ = 0;
}
inline ::google::protobuf::int32 PBOrderRequest::openclose() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.openclose)
  return openclose_;
}
inline void PBOrderRequest::set_openclose(::google::protobuf::int32 value) {
  
  openclose_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.openclose)
}

// optional string portfolio = 12;
inline void PBOrderRequest::clear_portfolio() {
  portfolio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderRequest::portfolio() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderRequest.portfolio)
  return portfolio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderRequest::set_portfolio(const ::std::string& value) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderRequest.portfolio)
}
inline void PBOrderRequest::set_portfolio(const char* value) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderRequest.portfolio)
}
inline void PBOrderRequest::set_portfolio(const char* value, size_t size) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderRequest.portfolio)
}
inline ::std::string* PBOrderRequest::mutable_portfolio() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderRequest.portfolio)
  return portfolio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderRequest::release_portfolio() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderRequest.portfolio)
  
  return portfolio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderRequest::set_allocated_portfolio(::std::string* portfolio) {
  if (portfolio != NULL) {
    
  } else {
    
  }
  portfolio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderRequest.portfolio)
}

// -------------------------------------------------------------------

// PBOrderInfo

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBOrderInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBOrderInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBOrderInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBOrderInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBOrderInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBOrderInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.header)
}

// optional uint64 orderID = 2;
inline void PBOrderInfo::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBOrderInfo::orderid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderID)
  return orderid_;
}
inline void PBOrderInfo::set_orderid(::google::protobuf::uint64 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderID)
}

// optional uint64 orderSysID = 3;
inline void PBOrderInfo::clear_ordersysid() {
  ordersysid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBOrderInfo::ordersysid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderSysID)
  return ordersysid_;
}
inline void PBOrderInfo::set_ordersysid(::google::protobuf::uint64 value) {
  
  ordersysid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderSysID)
}

// optional string brokerID = 4;
inline void PBOrderInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}
inline void PBOrderInfo::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}
inline void PBOrderInfo::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}
inline ::std::string* PBOrderInfo::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_brokerid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.brokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.brokerID)
}

// optional string investorID = 5;
inline void PBOrderInfo::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::investorid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.investorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.investorID)
}
inline void PBOrderInfo::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.investorID)
}
inline void PBOrderInfo::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.investorID)
}
inline ::std::string* PBOrderInfo::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.investorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_investorid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.investorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.investorID)
}

// optional string exchange = 6;
inline void PBOrderInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.exchange)
}
inline void PBOrderInfo::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.exchange)
}
inline void PBOrderInfo::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.exchange)
}
inline ::std::string* PBOrderInfo::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.exchange)
}

// optional string contract = 7;
inline void PBOrderInfo::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.contract)
}
inline void PBOrderInfo::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.contract)
}
inline void PBOrderInfo::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.contract)
}
inline ::std::string* PBOrderInfo::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.contract)
}

// optional int32 execType = 8;
inline void PBOrderInfo::clear_exectype() {
  exectype_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::exectype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.execType)
  return exectype_;
}
inline void PBOrderInfo::set_exectype(::google::protobuf::int32 value) {
  
  exectype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.execType)
}

// optional int32 tif = 9;
inline void PBOrderInfo::clear_tif() {
  tif_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::tif() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.tif)
  return tif_;
}
inline void PBOrderInfo::set_tif(::google::protobuf::int32 value) {
  
  tif_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.tif)
}

// optional int32 tradingType = 10;
inline void PBOrderInfo::clear_tradingtype() {
  tradingtype_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::tradingtype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.tradingType)
  return tradingtype_;
}
inline void PBOrderInfo::set_tradingtype(::google::protobuf::int32 value) {
  
  tradingtype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.tradingType)
}

// optional int32 direction = 11;
inline void PBOrderInfo::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.direction)
  return direction_;
}
inline void PBOrderInfo::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.direction)
}

// optional double limitPrice = 12;
inline void PBOrderInfo::clear_limitprice() {
  limitprice_ = 0;
}
inline double PBOrderInfo::limitprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.limitPrice)
  return limitprice_;
}
inline void PBOrderInfo::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.limitPrice)
}

// optional double stopPrice = 13;
inline void PBOrderInfo::clear_stopprice() {
  stopprice_ = 0;
}
inline double PBOrderInfo::stopprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.stopPrice)
  return stopprice_;
}
inline void PBOrderInfo::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.stopPrice)
}

// optional int32 orderStatus = 14;
inline void PBOrderInfo::clear_orderstatus() {
  orderstatus_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::orderstatus() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderStatus)
  return orderstatus_;
}
inline void PBOrderInfo::set_orderstatus(::google::protobuf::int32 value) {
  
  orderstatus_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderStatus)
}

// optional int32 orderType = 15;
inline void PBOrderInfo::clear_ordertype() {
  ordertype_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::ordertype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.orderType)
  return ordertype_;
}
inline void PBOrderInfo::set_ordertype(::google::protobuf::int32 value) {
  
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.orderType)
}

// optional int32 volume = 16;
inline void PBOrderInfo::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volume)
  return volume_;
}
inline void PBOrderInfo::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volume)
}

// optional string insertTime = 17;
inline void PBOrderInfo::clear_inserttime() {
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::inserttime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.insertTime)
  return inserttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_inserttime(const ::std::string& value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}
inline void PBOrderInfo::set_inserttime(const char* value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}
inline void PBOrderInfo::set_inserttime(const char* value, size_t size) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}
inline ::std::string* PBOrderInfo::mutable_inserttime() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.insertTime)
  return inserttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_inserttime() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.insertTime)
  
  return inserttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.insertTime)
}

// optional string updateTime = 18;
inline void PBOrderInfo::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.updateTime)
  return updatetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}
inline void PBOrderInfo::set_updatetime(const char* value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}
inline void PBOrderInfo::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}
inline ::std::string* PBOrderInfo::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_updatetime() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.updateTime)
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.updateTime)
}

// optional string cancelTime = 19;
inline void PBOrderInfo::clear_canceltime() {
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::canceltime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
  return canceltime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_canceltime(const ::std::string& value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}
inline void PBOrderInfo::set_canceltime(const char* value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}
inline void PBOrderInfo::set_canceltime(const char* value, size_t size) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}
inline ::std::string* PBOrderInfo::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
  return canceltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_canceltime() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
  
  return canceltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.cancelTime)
}

// optional int32 volumeTraded = 20;
inline void PBOrderInfo::clear_volumetraded() {
  volumetraded_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::volumetraded() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volumeTraded)
  return volumetraded_;
}
inline void PBOrderInfo::set_volumetraded(::google::protobuf::int32 value) {
  
  volumetraded_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volumeTraded)
}

// optional int32 volumeRemain = 21;
inline void PBOrderInfo::clear_volumeremain() {
  volumeremain_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::volumeremain() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volumeRemain)
  return volumeremain_;
}
inline void PBOrderInfo::set_volumeremain(::google::protobuf::int32 value) {
  
  volumeremain_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volumeRemain)
}

// optional int32 volumeCondition = 22;
inline void PBOrderInfo::clear_volumecondition() {
  volumecondition_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::volumecondition() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.volumeCondition)
  return volumecondition_;
}
inline void PBOrderInfo::set_volumecondition(::google::protobuf::int32 value) {
  
  volumecondition_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.volumeCondition)
}

// optional int32 tradingDay = 23;
inline void PBOrderInfo::clear_tradingday() {
  tradingday_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::tradingday() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.tradingDay)
  return tradingday_;
}
inline void PBOrderInfo::set_tradingday(::google::protobuf::int32 value) {
  
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.tradingDay)
}

// optional bool active = 24;
inline void PBOrderInfo::clear_active() {
  active_ = false;
}
inline bool PBOrderInfo::active() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.active)
  return active_;
}
inline void PBOrderInfo::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.active)
}

// optional int32 openclose = 25;
inline void PBOrderInfo::clear_openclose() {
  openclose_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::openclose() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.openclose)
  return openclose_;
}
inline void PBOrderInfo::set_openclose(::google::protobuf::int32 value) {
  
  openclose_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.openclose)
}

// optional bytes message = 26;
inline void PBOrderInfo::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::message() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.message)
}
inline void PBOrderInfo::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.message)
}
inline void PBOrderInfo::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.message)
}
inline ::std::string* PBOrderInfo::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_message() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.message)
}

// optional int32 sessionID = 27;
inline void PBOrderInfo::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 PBOrderInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.sessionID)
  return sessionid_;
}
inline void PBOrderInfo::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.sessionID)
}

// optional string portfolio = 28;
inline void PBOrderInfo::clear_portfolio() {
  portfolio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::portfolio() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.portfolio)
  return portfolio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_portfolio(const ::std::string& value) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.portfolio)
}
inline void PBOrderInfo::set_portfolio(const char* value) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.portfolio)
}
inline void PBOrderInfo::set_portfolio(const char* value, size_t size) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.portfolio)
}
inline ::std::string* PBOrderInfo::mutable_portfolio() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.portfolio)
  return portfolio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_portfolio() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.portfolio)
  
  return portfolio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_portfolio(::std::string* portfolio) {
  if (portfolio != NULL) {
    
  } else {
    
  }
  portfolio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.portfolio)
}

// optional string insertDate = 29;
inline void PBOrderInfo::clear_insertdate() {
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBOrderInfo::insertdate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBOrderInfo.insertDate)
  return insertdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_insertdate(const ::std::string& value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBOrderInfo.insertDate)
}
inline void PBOrderInfo::set_insertdate(const char* value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBOrderInfo.insertDate)
}
inline void PBOrderInfo::set_insertdate(const char* value, size_t size) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBOrderInfo.insertDate)
}
inline ::std::string* PBOrderInfo::mutable_insertdate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBOrderInfo.insertDate)
  return insertdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBOrderInfo::release_insertdate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBOrderInfo.insertDate)
  
  return insertdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBOrderInfo::set_allocated_insertdate(::std::string* insertdate) {
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insertdate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBOrderInfo.insertDate)
}

// -------------------------------------------------------------------

// PBTradeInfo

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBTradeInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBTradeInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBTradeInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBTradeInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBTradeInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBTradeInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.header)
}

// optional uint64 tradeID = 2;
inline void PBTradeInfo::clear_tradeid() {
  tradeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBTradeInfo::tradeid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.tradeID)
  return tradeid_;
}
inline void PBTradeInfo::set_tradeid(::google::protobuf::uint64 value) {
  
  tradeid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.tradeID)
}

// optional int32 direction = 3;
inline void PBTradeInfo::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 PBTradeInfo::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.direction)
  return direction_;
}
inline void PBTradeInfo::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.direction)
}

// optional int32 openclose = 4;
inline void PBTradeInfo::clear_openclose() {
  openclose_ = 0;
}
inline ::google::protobuf::int32 PBTradeInfo::openclose() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.openclose)
  return openclose_;
}
inline void PBTradeInfo::set_openclose(::google::protobuf::int32 value) {
  
  openclose_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.openclose)
}

// optional uint64 orderSysID = 5;
inline void PBTradeInfo::clear_ordersysid() {
  ordersysid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBTradeInfo::ordersysid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.orderSysID)
  return ordersysid_;
}
inline void PBTradeInfo::set_ordersysid(::google::protobuf::uint64 value) {
  
  ordersysid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.orderSysID)
}

// optional uint64 orderID = 6;
inline void PBTradeInfo::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBTradeInfo::orderid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.orderID)
  return orderid_;
}
inline void PBTradeInfo::set_orderid(::google::protobuf::uint64 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.orderID)
}

// optional double price = 7;
inline void PBTradeInfo::clear_price() {
  price_ = 0;
}
inline double PBTradeInfo::price() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.price)
  return price_;
}
inline void PBTradeInfo::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.price)
}

// optional int32 volume = 8;
inline void PBTradeInfo::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 PBTradeInfo::volume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.volume)
  return volume_;
}
inline void PBTradeInfo::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.volume)
}

// optional string brokerID = 9;
inline void PBTradeInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.brokerID)
}
inline void PBTradeInfo::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.brokerID)
}
inline void PBTradeInfo::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.brokerID)
}
inline ::std::string* PBTradeInfo::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_brokerid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.brokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.brokerID)
}

// optional string investorID = 10;
inline void PBTradeInfo::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::investorid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.investorID)
  return investorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.investorID)
}
inline void PBTradeInfo::set_investorid(const char* value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.investorID)
}
inline void PBTradeInfo::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.investorID)
}
inline ::std::string* PBTradeInfo::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.investorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_investorid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.investorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.investorID)
}

// optional string exchange = 11;
inline void PBTradeInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.exchange)
}
inline void PBTradeInfo::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.exchange)
}
inline void PBTradeInfo::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.exchange)
}
inline ::std::string* PBTradeInfo::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.exchange)
}

// optional string contract = 12;
inline void PBTradeInfo::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.contract)
}
inline void PBTradeInfo::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.contract)
}
inline void PBTradeInfo::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.contract)
}
inline ::std::string* PBTradeInfo::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.contract)
}

// optional string userID = 13;
inline void PBTradeInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::userid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.userID)
}
inline void PBTradeInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.userID)
}
inline void PBTradeInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.userID)
}
inline ::std::string* PBTradeInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_userid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.userID)
}

// optional string tradeDate = 14;
inline void PBTradeInfo::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::tradedate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
  return tradedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_tradedate(const ::std::string& value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
}
inline void PBTradeInfo::set_tradedate(const char* value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
}
inline void PBTradeInfo::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
}
inline ::std::string* PBTradeInfo::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_tradedate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
  
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.tradeDate)
}

// optional string tradeTime = 15;
inline void PBTradeInfo::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::tradetime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
  return tradetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_tradetime(const ::std::string& value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
}
inline void PBTradeInfo::set_tradetime(const char* value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
}
inline void PBTradeInfo::set_tradetime(const char* value, size_t size) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
}
inline ::std::string* PBTradeInfo::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_tradetime() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
  
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.tradeTime)
}

// optional int32 tradeType = 16;
inline void PBTradeInfo::clear_tradetype() {
  tradetype_ = 0;
}
inline ::google::protobuf::int32 PBTradeInfo::tradetype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.tradeType)
  return tradetype_;
}
inline void PBTradeInfo::set_tradetype(::google::protobuf::int32 value) {
  
  tradetype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.tradeType)
}

// optional int32 hedgeFlag = 17;
inline void PBTradeInfo::clear_hedgeflag() {
  hedgeflag_ = 0;
}
inline ::google::protobuf::int32 PBTradeInfo::hedgeflag() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.hedgeFlag)
  return hedgeflag_;
}
inline void PBTradeInfo::set_hedgeflag(::google::protobuf::int32 value) {
  
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.hedgeFlag)
}

// optional double commission = 18;
inline void PBTradeInfo::clear_commission() {
  commission_ = 0;
}
inline double PBTradeInfo::commission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.commission)
  return commission_;
}
inline void PBTradeInfo::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.commission)
}

// optional string portfolio = 19;
inline void PBTradeInfo::clear_portfolio() {
  portfolio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTradeInfo::portfolio() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBTradeInfo.portfolio)
  return portfolio_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_portfolio(const ::std::string& value) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBTradeInfo.portfolio)
}
inline void PBTradeInfo::set_portfolio(const char* value) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBTradeInfo.portfolio)
}
inline void PBTradeInfo::set_portfolio(const char* value, size_t size) {
  
  portfolio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBTradeInfo.portfolio)
}
inline ::std::string* PBTradeInfo::mutable_portfolio() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBTradeInfo.portfolio)
  return portfolio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTradeInfo::release_portfolio() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBTradeInfo.portfolio)
  
  return portfolio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTradeInfo::set_allocated_portfolio(::std::string* portfolio) {
  if (portfolio != NULL) {
    
  } else {
    
  }
  portfolio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portfolio);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBTradeInfo.portfolio)
}

// -------------------------------------------------------------------

// PBPosition

// optional string exchange = 1;
inline void PBPosition::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPosition::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPosition::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.exchange)
}
inline void PBPosition::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPosition.exchange)
}
inline void PBPosition::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPosition.exchange)
}
inline ::std::string* PBPosition::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPosition.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPosition::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPosition.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPosition::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPosition.exchange)
}

// optional string contract = 2;
inline void PBPosition::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBPosition::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPosition::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.contract)
}
inline void PBPosition::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBPosition.contract)
}
inline void PBPosition::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBPosition.contract)
}
inline ::std::string* PBPosition::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPosition.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBPosition::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPosition.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBPosition::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPosition.contract)
}

// optional int32 direction = 3;
inline void PBPosition::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 PBPosition::direction() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.direction)
  return direction_;
}
inline void PBPosition::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.direction)
}

// optional int32 position = 5;
inline void PBPosition::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 PBPosition::position() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.position)
  return position_;
}
inline void PBPosition::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.position)
}

// optional int32 ydPosition = 4;
inline void PBPosition::clear_ydposition() {
  ydposition_ = 0;
}
inline ::google::protobuf::int32 PBPosition::ydposition() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.ydPosition)
  return ydposition_;
}
inline void PBPosition::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.ydPosition)
}

// optional int32 positionDateFlag = 6;
inline void PBPosition::clear_positiondateflag() {
  positiondateflag_ = 0;
}
inline ::google::protobuf::int32 PBPosition::positiondateflag() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.positionDateFlag)
  return positiondateflag_;
}
inline void PBPosition::set_positiondateflag(::google::protobuf::int32 value) {
  
  positiondateflag_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.positionDateFlag)
}

// optional int32 openVolume = 7;
inline void PBPosition::clear_openvolume() {
  openvolume_ = 0;
}
inline ::google::protobuf::int32 PBPosition::openvolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.openVolume)
  return openvolume_;
}
inline void PBPosition::set_openvolume(::google::protobuf::int32 value) {
  
  openvolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.openVolume)
}

// optional int32 closeVolume = 8;
inline void PBPosition::clear_closevolume() {
  closevolume_ = 0;
}
inline ::google::protobuf::int32 PBPosition::closevolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.closeVolume)
  return closevolume_;
}
inline void PBPosition::set_closevolume(::google::protobuf::int32 value) {
  
  closevolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.closeVolume)
}

// optional double openAmount = 9;
inline void PBPosition::clear_openamount() {
  openamount_ = 0;
}
inline double PBPosition::openamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.openAmount)
  return openamount_;
}
inline void PBPosition::set_openamount(double value) {
  
  openamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.openAmount)
}

// optional double closeAmount = 10;
inline void PBPosition::clear_closeamount() {
  closeamount_ = 0;
}
inline double PBPosition::closeamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.closeAmount)
  return closeamount_;
}
inline void PBPosition::set_closeamount(double value) {
  
  closeamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.closeAmount)
}

// optional double cost = 11;
inline void PBPosition::clear_cost() {
  cost_ = 0;
}
inline double PBPosition::cost() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.cost)
  return cost_;
}
inline void PBPosition::set_cost(double value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.cost)
}

// optional double openCost = 12;
inline void PBPosition::clear_opencost() {
  opencost_ = 0;
}
inline double PBPosition::opencost() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.openCost)
  return opencost_;
}
inline void PBPosition::set_opencost(double value) {
  
  opencost_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.openCost)
}

// optional double profit = 13;
inline void PBPosition::clear_profit() {
  profit_ = 0;
}
inline double PBPosition::profit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.profit)
  return profit_;
}
inline void PBPosition::set_profit(double value) {
  
  profit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.profit)
}

// optional double closeProfit = 14;
inline void PBPosition::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double PBPosition::closeprofit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.closeProfit)
  return closeprofit_;
}
inline void PBPosition::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.closeProfit)
}

// optional double useMargin = 15;
inline void PBPosition::clear_usemargin() {
  usemargin_ = 0;
}
inline double PBPosition::usemargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.useMargin)
  return usemargin_;
}
inline void PBPosition::set_usemargin(double value) {
  
  usemargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.useMargin)
}

// optional int32 hedgeFlag = 16;
inline void PBPosition::clear_hedgeflag() {
  hedgeflag_ = 0;
}
inline ::google::protobuf::int32 PBPosition::hedgeflag() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.hedgeFlag)
  return hedgeflag_;
}
inline void PBPosition::set_hedgeflag(::google::protobuf::int32 value) {
  
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.hedgeFlag)
}

// optional int32 tdPosition = 17;
inline void PBPosition::clear_tdposition() {
  tdposition_ = 0;
}
inline ::google::protobuf::int32 PBPosition::tdposition() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.tdPosition)
  return tdposition_;
}
inline void PBPosition::set_tdposition(::google::protobuf::int32 value) {
  
  tdposition_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBPosition.tdPosition)
}

// optional .Micro.Future.Message.DataHeader header = 18;
inline bool PBPosition::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBPosition::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBPosition::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBPosition.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBPosition::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBPosition.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBPosition::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBPosition.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBPosition::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBPosition.header)
}

// -------------------------------------------------------------------

// PBAccountInfo

// optional string brokerID = 2;
inline void PBAccountInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBAccountInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBAccountInfo::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.brokerID)
}
inline void PBAccountInfo::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBAccountInfo.brokerID)
}
inline void PBAccountInfo::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBAccountInfo.brokerID)
}
inline ::std::string* PBAccountInfo::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBAccountInfo.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBAccountInfo::release_brokerid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBAccountInfo.brokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBAccountInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBAccountInfo.brokerID)
}

// optional string accountID = 3;
inline void PBAccountInfo::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBAccountInfo::accountid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.accountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBAccountInfo::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.accountID)
}
inline void PBAccountInfo::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBAccountInfo.accountID)
}
inline void PBAccountInfo::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBAccountInfo.accountID)
}
inline ::std::string* PBAccountInfo::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBAccountInfo.accountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBAccountInfo::release_accountid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBAccountInfo.accountID)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBAccountInfo::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBAccountInfo.accountID)
}

// optional double preMortgage = 4;
inline void PBAccountInfo::clear_premortgage() {
  premortgage_ = 0;
}
inline double PBAccountInfo::premortgage() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.preMortgage)
  return premortgage_;
}
inline void PBAccountInfo::set_premortgage(double value) {
  
  premortgage_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.preMortgage)
}

// optional double preCredit = 5;
inline void PBAccountInfo::clear_precredit() {
  precredit_ = 0;
}
inline double PBAccountInfo::precredit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.preCredit)
  return precredit_;
}
inline void PBAccountInfo::set_precredit(double value) {
  
  precredit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.preCredit)
}

// optional double preDeposit = 6;
inline void PBAccountInfo::clear_predeposit() {
  predeposit_ = 0;
}
inline double PBAccountInfo::predeposit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.preDeposit)
  return predeposit_;
}
inline void PBAccountInfo::set_predeposit(double value) {
  
  predeposit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.preDeposit)
}

// optional double preBalance = 7;
inline void PBAccountInfo::clear_prebalance() {
  prebalance_ = 0;
}
inline double PBAccountInfo::prebalance() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.preBalance)
  return prebalance_;
}
inline void PBAccountInfo::set_prebalance(double value) {
  
  prebalance_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.preBalance)
}

// optional double preMargin = 8;
inline void PBAccountInfo::clear_premargin() {
  premargin_ = 0;
}
inline double PBAccountInfo::premargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.preMargin)
  return premargin_;
}
inline void PBAccountInfo::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.preMargin)
}

// optional double interestBase = 9;
inline void PBAccountInfo::clear_interestbase() {
  interestbase_ = 0;
}
inline double PBAccountInfo::interestbase() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.interestBase)
  return interestbase_;
}
inline void PBAccountInfo::set_interestbase(double value) {
  
  interestbase_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.interestBase)
}

// optional double interest = 10;
inline void PBAccountInfo::clear_interest() {
  interest_ = 0;
}
inline double PBAccountInfo::interest() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.interest)
  return interest_;
}
inline void PBAccountInfo::set_interest(double value) {
  
  interest_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.interest)
}

// optional double deposit = 11;
inline void PBAccountInfo::clear_deposit() {
  deposit_ = 0;
}
inline double PBAccountInfo::deposit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.deposit)
  return deposit_;
}
inline void PBAccountInfo::set_deposit(double value) {
  
  deposit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.deposit)
}

// optional double withdraw = 12;
inline void PBAccountInfo::clear_withdraw() {
  withdraw_ = 0;
}
inline double PBAccountInfo::withdraw() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.withdraw)
  return withdraw_;
}
inline void PBAccountInfo::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.withdraw)
}

// optional double frozenMargin = 13;
inline void PBAccountInfo::clear_frozenmargin() {
  frozenmargin_ = 0;
}
inline double PBAccountInfo::frozenmargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.frozenMargin)
  return frozenmargin_;
}
inline void PBAccountInfo::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.frozenMargin)
}

// optional double frozenCash = 14;
inline void PBAccountInfo::clear_frozencash() {
  frozencash_ = 0;
}
inline double PBAccountInfo::frozencash() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.frozenCash)
  return frozencash_;
}
inline void PBAccountInfo::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.frozenCash)
}

// optional double frozenCommission = 15;
inline void PBAccountInfo::clear_frozencommission() {
  frozencommission_ = 0;
}
inline double PBAccountInfo::frozencommission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.frozenCommission)
  return frozencommission_;
}
inline void PBAccountInfo::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.frozenCommission)
}

// optional double currMargin = 16;
inline void PBAccountInfo::clear_currmargin() {
  currmargin_ = 0;
}
inline double PBAccountInfo::currmargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.currMargin)
  return currmargin_;
}
inline void PBAccountInfo::set_currmargin(double value) {
  
  currmargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.currMargin)
}

// optional double cashIn = 17;
inline void PBAccountInfo::clear_cashin() {
  cashin_ = 0;
}
inline double PBAccountInfo::cashin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.cashIn)
  return cashin_;
}
inline void PBAccountInfo::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.cashIn)
}

// optional double commission = 18;
inline void PBAccountInfo::clear_commission() {
  commission_ = 0;
}
inline double PBAccountInfo::commission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.commission)
  return commission_;
}
inline void PBAccountInfo::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.commission)
}

// optional double closeProfit = 19;
inline void PBAccountInfo::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double PBAccountInfo::closeprofit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.closeProfit)
  return closeprofit_;
}
inline void PBAccountInfo::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.closeProfit)
}

// optional double positionProfit = 20;
inline void PBAccountInfo::clear_positionprofit() {
  positionprofit_ = 0;
}
inline double PBAccountInfo::positionprofit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.positionProfit)
  return positionprofit_;
}
inline void PBAccountInfo::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.positionProfit)
}

// optional double balance = 21;
inline void PBAccountInfo::clear_balance() {
  balance_ = 0;
}
inline double PBAccountInfo::balance() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.balance)
  return balance_;
}
inline void PBAccountInfo::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.balance)
}

// optional double available = 22;
inline void PBAccountInfo::clear_available() {
  available_ = 0;
}
inline double PBAccountInfo::available() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.available)
  return available_;
}
inline void PBAccountInfo::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.available)
}

// optional double withdrawQuota = 23;
inline void PBAccountInfo::clear_withdrawquota() {
  withdrawquota_ = 0;
}
inline double PBAccountInfo::withdrawquota() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.withdrawQuota)
  return withdrawquota_;
}
inline void PBAccountInfo::set_withdrawquota(double value) {
  
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.withdrawQuota)
}

// optional double reserve = 24;
inline void PBAccountInfo::clear_reserve() {
  reserve_ = 0;
}
inline double PBAccountInfo::reserve() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.reserve)
  return reserve_;
}
inline void PBAccountInfo::set_reserve(double value) {
  
  reserve_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.reserve)
}

// optional int32 tradingDay = 25;
inline void PBAccountInfo::clear_tradingday() {
  tradingday_ = 0;
}
inline ::google::protobuf::int32 PBAccountInfo::tradingday() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.tradingDay)
  return tradingday_;
}
inline void PBAccountInfo::set_tradingday(::google::protobuf::int32 value) {
  
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.tradingDay)
}

// optional int32 settlementID = 26;
inline void PBAccountInfo::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 PBAccountInfo::settlementid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.settlementID)
  return settlementid_;
}
inline void PBAccountInfo::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.settlementID)
}

// optional double credit = 27;
inline void PBAccountInfo::clear_credit() {
  credit_ = 0;
}
inline double PBAccountInfo::credit() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.credit)
  return credit_;
}
inline void PBAccountInfo::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.credit)
}

// optional double mortgage = 28;
inline void PBAccountInfo::clear_mortgage() {
  mortgage_ = 0;
}
inline double PBAccountInfo::mortgage() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.mortgage)
  return mortgage_;
}
inline void PBAccountInfo::set_mortgage(double value) {
  
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.mortgage)
}

// optional double exchangeMargin = 29;
inline void PBAccountInfo::clear_exchangemargin() {
  exchangemargin_ = 0;
}
inline double PBAccountInfo::exchangemargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.exchangeMargin)
  return exchangemargin_;
}
inline void PBAccountInfo::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.exchangeMargin)
}

// optional double deliveryMargin = 30;
inline void PBAccountInfo::clear_deliverymargin() {
  deliverymargin_ = 0;
}
inline double PBAccountInfo::deliverymargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.deliveryMargin)
  return deliverymargin_;
}
inline void PBAccountInfo::set_deliverymargin(double value) {
  
  deliverymargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.deliveryMargin)
}

// optional double exchangeDeliveryMargin = 31;
inline void PBAccountInfo::clear_exchangedeliverymargin() {
  exchangedeliverymargin_ = 0;
}
inline double PBAccountInfo::exchangedeliverymargin() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.exchangeDeliveryMargin)
  return exchangedeliverymargin_;
}
inline void PBAccountInfo::set_exchangedeliverymargin(double value) {
  
  exchangedeliverymargin_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.exchangeDeliveryMargin)
}

// optional double reserveBalance = 32;
inline void PBAccountInfo::clear_reservebalance() {
  reservebalance_ = 0;
}
inline double PBAccountInfo::reservebalance() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.reserveBalance)
  return reservebalance_;
}
inline void PBAccountInfo::set_reservebalance(double value) {
  
  reservebalance_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBAccountInfo.reserveBalance)
}

// optional .Micro.Future.Message.DataHeader header = 33;
inline bool PBAccountInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBAccountInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBAccountInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBAccountInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBAccountInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBAccountInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBAccountInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBAccountInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBAccountInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBAccountInfo.header)
}

// -------------------------------------------------------------------

// PBMarketInfo

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBMarketInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBMarketInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBMarketInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBMarketInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBMarketInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBMarketInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketInfo.header)
}

// optional string exchange = 2;
inline void PBMarketInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMarketInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketInfo.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketInfo::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketInfo.exchange)
}
inline void PBMarketInfo::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketInfo.exchange)
}
inline void PBMarketInfo::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketInfo.exchange)
}
inline ::std::string* PBMarketInfo::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketInfo.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMarketInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketInfo.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketInfo.exchange)
}

// optional bytes name = 3;
inline void PBMarketInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMarketInfo::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketInfo.name)
}
inline void PBMarketInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketInfo.name)
}
inline void PBMarketInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketInfo.name)
}
inline ::std::string* PBMarketInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMarketInfo::release_name() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketInfo.name)
}

// optional bytes property = 4;
inline void PBMarketInfo::clear_property() {
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMarketInfo::property() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBMarketInfo.property)
  return property_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketInfo::set_property(const ::std::string& value) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBMarketInfo.property)
}
inline void PBMarketInfo::set_property(const char* value) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBMarketInfo.property)
}
inline void PBMarketInfo::set_property(const void* value, size_t size) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBMarketInfo.property)
}
inline ::std::string* PBMarketInfo::mutable_property() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBMarketInfo.property)
  return property_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMarketInfo::release_property() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBMarketInfo.property)
  
  return property_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMarketInfo::set_allocated_property(::std::string* property) {
  if (property != NULL) {
    
  } else {
    
  }
  property_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBMarketInfo.property)
}

// -------------------------------------------------------------------

// PBContractInfo

// optional string exchange = 1;
inline void PBContractInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.exchange)
}
inline void PBContractInfo::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.exchange)
}
inline void PBContractInfo::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.exchange)
}
inline ::std::string* PBContractInfo::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.exchange)
}

// optional string contract = 2;
inline void PBContractInfo::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::contract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.contract)
  return contract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.contract)
}
inline void PBContractInfo::set_contract(const char* value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.contract)
}
inline void PBContractInfo::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.contract)
}
inline ::std::string* PBContractInfo::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_contract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.contract)
}

// optional bytes name = 3;
inline void PBContractInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.name)
}
inline void PBContractInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.name)
}
inline void PBContractInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.name)
}
inline ::std::string* PBContractInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_name() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.name)
}

// optional string productID = 4;
inline void PBContractInfo::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::productid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.productID)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.productID)
}
inline void PBContractInfo::set_productid(const char* value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.productID)
}
inline void PBContractInfo::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.productID)
}
inline ::std::string* PBContractInfo::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.productID)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_productid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.productID)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.productID)
}

// optional int32 productType = 5;
inline void PBContractInfo::clear_producttype() {
  producttype_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::producttype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.productType)
  return producttype_;
}
inline void PBContractInfo::set_producttype(::google::protobuf::int32 value) {
  
  producttype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.productType)
}

// optional int32 deliveryYear = 6;
inline void PBContractInfo::clear_deliveryyear() {
  deliveryyear_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::deliveryyear() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.deliveryYear)
  return deliveryyear_;
}
inline void PBContractInfo::set_deliveryyear(::google::protobuf::int32 value) {
  
  deliveryyear_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.deliveryYear)
}

// optional int32 deliveryMonth = 7;
inline void PBContractInfo::clear_deliverymonth() {
  deliverymonth_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::deliverymonth() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.deliveryMonth)
  return deliverymonth_;
}
inline void PBContractInfo::set_deliverymonth(::google::protobuf::int32 value) {
  
  deliverymonth_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.deliveryMonth)
}

// optional int32 maxMarketOrderVolume = 8;
inline void PBContractInfo::clear_maxmarketordervolume() {
  maxmarketordervolume_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.maxMarketOrderVolume)
  return maxmarketordervolume_;
}
inline void PBContractInfo::set_maxmarketordervolume(::google::protobuf::int32 value) {
  
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.maxMarketOrderVolume)
}

// optional int32 minMarketOrderVolume = 9;
inline void PBContractInfo::clear_minmarketordervolume() {
  minmarketordervolume_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.minMarketOrderVolume)
  return minmarketordervolume_;
}
inline void PBContractInfo::set_minmarketordervolume(::google::protobuf::int32 value) {
  
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.minMarketOrderVolume)
}

// optional int32 maxLimitOrderVolume = 10;
inline void PBContractInfo::clear_maxlimitordervolume() {
  maxlimitordervolume_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.maxLimitOrderVolume)
  return maxlimitordervolume_;
}
inline void PBContractInfo::set_maxlimitordervolume(::google::protobuf::int32 value) {
  
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.maxLimitOrderVolume)
}

// optional int32 minLimitOrderVolume = 11;
inline void PBContractInfo::clear_minlimitordervolume() {
  minlimitordervolume_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.minLimitOrderVolume)
  return minlimitordervolume_;
}
inline void PBContractInfo::set_minlimitordervolume(::google::protobuf::int32 value) {
  
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.minLimitOrderVolume)
}

// optional int32 volumeMultiple = 12;
inline void PBContractInfo::clear_volumemultiple() {
  volumemultiple_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::volumemultiple() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.volumeMultiple)
  return volumemultiple_;
}
inline void PBContractInfo::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.volumeMultiple)
}

// optional double priceTick = 13;
inline void PBContractInfo::clear_pricetick() {
  pricetick_ = 0;
}
inline double PBContractInfo::pricetick() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.priceTick)
  return pricetick_;
}
inline void PBContractInfo::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.priceTick)
}

// optional string createDate = 14;
inline void PBContractInfo::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::createdate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.createDate)
  return createdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.createDate)
}
inline void PBContractInfo::set_createdate(const char* value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.createDate)
}
inline void PBContractInfo::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.createDate)
}
inline ::std::string* PBContractInfo::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.createDate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_createdate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.createDate)
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.createDate)
}

// optional string openDate = 15;
inline void PBContractInfo::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::opendate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.openDate)
  return opendate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.openDate)
}
inline void PBContractInfo::set_opendate(const char* value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.openDate)
}
inline void PBContractInfo::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.openDate)
}
inline ::std::string* PBContractInfo::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.openDate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_opendate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.openDate)
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.openDate)
}

// optional string expireDate = 16;
inline void PBContractInfo::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::expiredate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.expireDate)
  return expiredate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.expireDate)
}
inline void PBContractInfo::set_expiredate(const char* value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.expireDate)
}
inline void PBContractInfo::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.expireDate)
}
inline ::std::string* PBContractInfo::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.expireDate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_expiredate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.expireDate)
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.expireDate)
}

// optional string startDelivDate = 17;
inline void PBContractInfo::clear_startdelivdate() {
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::startdelivdate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
  return startdelivdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_startdelivdate(const ::std::string& value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
}
inline void PBContractInfo::set_startdelivdate(const char* value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
}
inline void PBContractInfo::set_startdelivdate(const char* value, size_t size) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
}
inline ::std::string* PBContractInfo::mutable_startdelivdate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
  return startdelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_startdelivdate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
  
  return startdelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_startdelivdate(::std::string* startdelivdate) {
  if (startdelivdate != NULL) {
    
  } else {
    
  }
  startdelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdelivdate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.startDelivDate)
}

// optional string endDelivDate = 18;
inline void PBContractInfo::clear_enddelivdate() {
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::enddelivdate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
  return enddelivdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_enddelivdate(const ::std::string& value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
}
inline void PBContractInfo::set_enddelivdate(const char* value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
}
inline void PBContractInfo::set_enddelivdate(const char* value, size_t size) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
}
inline ::std::string* PBContractInfo::mutable_enddelivdate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
  return enddelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_enddelivdate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
  
  return enddelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_enddelivdate(::std::string* enddelivdate) {
  if (enddelivdate != NULL) {
    
  } else {
    
  }
  enddelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddelivdate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.endDelivDate)
}

// optional int32 lifePhase = 19;
inline void PBContractInfo::clear_lifephase() {
  lifephase_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::lifephase() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.lifePhase)
  return lifephase_;
}
inline void PBContractInfo::set_lifephase(::google::protobuf::int32 value) {
  
  lifephase_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.lifePhase)
}

// optional bool isTrading = 20;
inline void PBContractInfo::clear_istrading() {
  istrading_ = false;
}
inline bool PBContractInfo::istrading() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.isTrading)
  return istrading_;
}
inline void PBContractInfo::set_istrading(bool value) {
  
  istrading_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.isTrading)
}

// optional int32 positionType = 21;
inline void PBContractInfo::clear_positiontype() {
  positiontype_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::positiontype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.positionType)
  return positiontype_;
}
inline void PBContractInfo::set_positiontype(::google::protobuf::int32 value) {
  
  positiontype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.positionType)
}

// optional int32 positionDateType = 22;
inline void PBContractInfo::clear_positiondatetype() {
  positiondatetype_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::positiondatetype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.positionDateType)
  return positiondatetype_;
}
inline void PBContractInfo::set_positiondatetype(::google::protobuf::int32 value) {
  
  positiondatetype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.positionDateType)
}

// optional double longMarginRatio = 23;
inline void PBContractInfo::clear_longmarginratio() {
  longmarginratio_ = 0;
}
inline double PBContractInfo::longmarginratio() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.longMarginRatio)
  return longmarginratio_;
}
inline void PBContractInfo::set_longmarginratio(double value) {
  
  longmarginratio_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.longMarginRatio)
}

// optional double shortMarginRatio = 24;
inline void PBContractInfo::clear_shortmarginratio() {
  shortmarginratio_ = 0;
}
inline double PBContractInfo::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.shortMarginRatio)
  return shortmarginratio_;
}
inline void PBContractInfo::set_shortmarginratio(double value) {
  
  shortmarginratio_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.shortMarginRatio)
}

// optional string underlyingExchange = 25;
inline void PBContractInfo::clear_underlyingexchange() {
  underlyingexchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::underlyingexchange() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
  return underlyingexchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_underlyingexchange(const ::std::string& value) {
  
  underlyingexchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
}
inline void PBContractInfo::set_underlyingexchange(const char* value) {
  
  underlyingexchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
}
inline void PBContractInfo::set_underlyingexchange(const char* value, size_t size) {
  
  underlyingexchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
}
inline ::std::string* PBContractInfo::mutable_underlyingexchange() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
  return underlyingexchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_underlyingexchange() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
  
  return underlyingexchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_underlyingexchange(::std::string* underlyingexchange) {
  if (underlyingexchange != NULL) {
    
  } else {
    
  }
  underlyingexchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyingexchange);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.underlyingExchange)
}

// optional string underlyingContract = 26;
inline void PBContractInfo::clear_underlyingcontract() {
  underlyingcontract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBContractInfo::underlyingcontract() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
  return underlyingcontract_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_underlyingcontract(const ::std::string& value) {
  
  underlyingcontract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
}
inline void PBContractInfo::set_underlyingcontract(const char* value) {
  
  underlyingcontract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
}
inline void PBContractInfo::set_underlyingcontract(const char* value, size_t size) {
  
  underlyingcontract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
}
inline ::std::string* PBContractInfo::mutable_underlyingcontract() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
  return underlyingcontract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBContractInfo::release_underlyingcontract() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
  
  return underlyingcontract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBContractInfo::set_allocated_underlyingcontract(::std::string* underlyingcontract) {
  if (underlyingcontract != NULL) {
    
  } else {
    
  }
  underlyingcontract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyingcontract);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfo.underlyingContract)
}

// optional int32 contractType = 27;
inline void PBContractInfo::clear_contracttype() {
  contracttype_ = 0;
}
inline ::google::protobuf::int32 PBContractInfo::contracttype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.contractType)
  return contracttype_;
}
inline void PBContractInfo::set_contracttype(::google::protobuf::int32 value) {
  
  contracttype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.contractType)
}

// optional double strikePrice = 28;
inline void PBContractInfo::clear_strikeprice() {
  strikeprice_ = 0;
}
inline double PBContractInfo::strikeprice() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfo.strikePrice)
  return strikeprice_;
}
inline void PBContractInfo::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBContractInfo.strikePrice)
}

// -------------------------------------------------------------------

// PBContractInfoList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBContractInfoList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBContractInfoList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBContractInfoList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfoList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBContractInfoList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfoList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBContractInfoList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBContractInfoList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBContractInfoList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBContractInfoList.header)
}

// repeated .Micro.Future.Message.Business.PBContractInfo contractInfo = 2;
inline int PBContractInfoList::contractinfo_size() const {
  return contractinfo_.size();
}
inline void PBContractInfoList::clear_contractinfo() {
  contractinfo_.Clear();
}
inline const ::Micro::Future::Message::Business::PBContractInfo& PBContractInfoList::contractinfo(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBContractInfoList.contractInfo)
  return contractinfo_.Get(index);
}
inline ::Micro::Future::Message::Business::PBContractInfo* PBContractInfoList::mutable_contractinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBContractInfoList.contractInfo)
  return contractinfo_.Mutable(index);
}
inline ::Micro::Future::Message::Business::PBContractInfo* PBContractInfoList::add_contractinfo() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.Business.PBContractInfoList.contractInfo)
  return contractinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractInfo >*
PBContractInfoList::mutable_contractinfo() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.Business.PBContractInfoList.contractInfo)
  return &contractinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::Business::PBContractInfo >&
PBContractInfoList::contractinfo() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.Business.PBContractInfoList.contractInfo)
  return contractinfo_;
}

// -------------------------------------------------------------------

// PBBankOpRequest

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBBankOpRequest::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBBankOpRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBBankOpRequest::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBBankOpRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBBankOpRequest::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBBankOpRequest::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.header)
}

// optional string bankID = 2;
inline void PBBankOpRequest::clear_bankid() {
  bankid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::bankid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.bankID)
  return bankid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_bankid(const ::std::string& value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.bankID)
}
inline void PBBankOpRequest::set_bankid(const char* value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.bankID)
}
inline void PBBankOpRequest::set_bankid(const char* value, size_t size) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.bankID)
}
inline ::std::string* PBBankOpRequest::mutable_bankid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.bankID)
  return bankid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_bankid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.bankID)
  
  return bankid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_bankid(::std::string* bankid) {
  if (bankid != NULL) {
    
  } else {
    
  }
  bankid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.bankID)
}

// optional string bankBranchID = 3;
inline void PBBankOpRequest::clear_bankbranchid() {
  bankbranchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::bankbranchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
  return bankbranchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_bankbranchid(const ::std::string& value) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
}
inline void PBBankOpRequest::set_bankbranchid(const char* value) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
}
inline void PBBankOpRequest::set_bankbranchid(const char* value, size_t size) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
}
inline ::std::string* PBBankOpRequest::mutable_bankbranchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
  return bankbranchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_bankbranchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
  
  return bankbranchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_bankbranchid(::std::string* bankbranchid) {
  if (bankbranchid != NULL) {
    
  } else {
    
  }
  bankbranchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankbranchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.bankBranchID)
}

// optional string bankPassword = 4;
inline void PBBankOpRequest::clear_bankpassword() {
  bankpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::bankpassword() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
  return bankpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_bankpassword(const ::std::string& value) {
  
  bankpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
}
inline void PBBankOpRequest::set_bankpassword(const char* value) {
  
  bankpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
}
inline void PBBankOpRequest::set_bankpassword(const char* value, size_t size) {
  
  bankpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
}
inline ::std::string* PBBankOpRequest::mutable_bankpassword() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
  return bankpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_bankpassword() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
  
  return bankpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_bankpassword(::std::string* bankpassword) {
  if (bankpassword != NULL) {
    
  } else {
    
  }
  bankpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankpassword);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.bankPassword)
}

// optional string bankAccount = 5;
inline void PBBankOpRequest::clear_bankaccount() {
  bankaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::bankaccount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
  return bankaccount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_bankaccount(const ::std::string& value) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
}
inline void PBBankOpRequest::set_bankaccount(const char* value) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
}
inline void PBBankOpRequest::set_bankaccount(const char* value, size_t size) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
}
inline ::std::string* PBBankOpRequest::mutable_bankaccount() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
  return bankaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_bankaccount() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
  
  return bankaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_bankaccount(::std::string* bankaccount) {
  if (bankaccount != NULL) {
    
  } else {
    
  }
  bankaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankaccount);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.bankAccount)
}

// optional string brokerID = 6;
inline void PBBankOpRequest::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
}
inline void PBBankOpRequest::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
}
inline void PBBankOpRequest::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
}
inline ::std::string* PBBankOpRequest::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_brokerid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.brokerID)
}

// optional string brokerBranchID = 7;
inline void PBBankOpRequest::clear_brokerbranchid() {
  brokerbranchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::brokerbranchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
  return brokerbranchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_brokerbranchid(const ::std::string& value) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
}
inline void PBBankOpRequest::set_brokerbranchid(const char* value) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
}
inline void PBBankOpRequest::set_brokerbranchid(const char* value, size_t size) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
}
inline ::std::string* PBBankOpRequest::mutable_brokerbranchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
  return brokerbranchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_brokerbranchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
  
  return brokerbranchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_brokerbranchid(::std::string* brokerbranchid) {
  if (brokerbranchid != NULL) {
    
  } else {
    
  }
  brokerbranchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerbranchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.brokerBranchID)
}

// optional string accountID = 8;
inline void PBBankOpRequest::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::accountid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.accountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.accountID)
}
inline void PBBankOpRequest::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.accountID)
}
inline void PBBankOpRequest::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.accountID)
}
inline ::std::string* PBBankOpRequest::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.accountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_accountid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.accountID)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.accountID)
}

// optional string password = 9;
inline void PBBankOpRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::password() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.password)
}
inline void PBBankOpRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.password)
}
inline void PBBankOpRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.password)
}
inline ::std::string* PBBankOpRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_password() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.password)
}

// optional string currencyID = 10;
inline void PBBankOpRequest::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpRequest::currencyid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
  return currencyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
}
inline void PBBankOpRequest::set_currencyid(const char* value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
}
inline void PBBankOpRequest::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
}
inline ::std::string* PBBankOpRequest::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpRequest::release_currencyid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpRequest::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpRequest.currencyID)
}

// optional double tradeAmount = 11;
inline void PBBankOpRequest::clear_tradeamount() {
  tradeamount_ = 0;
}
inline double PBBankOpRequest::tradeamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpRequest.tradeAmount)
  return tradeamount_;
}
inline void PBBankOpRequest::set_tradeamount(double value) {
  
  tradeamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpRequest.tradeAmount)
}

// -------------------------------------------------------------------

// PBBankOpResult

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBBankOpResult::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBBankOpResult::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBBankOpResult::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBBankOpResult::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBBankOpResult::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBBankOpResult::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.header)
}

// optional string bankID = 2;
inline void PBBankOpResult::clear_bankid() {
  bankid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::bankid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.bankID)
  return bankid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_bankid(const ::std::string& value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.bankID)
}
inline void PBBankOpResult::set_bankid(const char* value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.bankID)
}
inline void PBBankOpResult::set_bankid(const char* value, size_t size) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.bankID)
}
inline ::std::string* PBBankOpResult::mutable_bankid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.bankID)
  return bankid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_bankid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.bankID)
  
  return bankid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_bankid(::std::string* bankid) {
  if (bankid != NULL) {
    
  } else {
    
  }
  bankid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.bankID)
}

// optional string bankBranchID = 3;
inline void PBBankOpResult::clear_bankbranchid() {
  bankbranchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::bankbranchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
  return bankbranchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_bankbranchid(const ::std::string& value) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
}
inline void PBBankOpResult::set_bankbranchid(const char* value) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
}
inline void PBBankOpResult::set_bankbranchid(const char* value, size_t size) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
}
inline ::std::string* PBBankOpResult::mutable_bankbranchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
  return bankbranchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_bankbranchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
  
  return bankbranchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_bankbranchid(::std::string* bankbranchid) {
  if (bankbranchid != NULL) {
    
  } else {
    
  }
  bankbranchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankbranchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.bankBranchID)
}

// optional string bankPassword = 4;
inline void PBBankOpResult::clear_bankpassword() {
  bankpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::bankpassword() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
  return bankpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_bankpassword(const ::std::string& value) {
  
  bankpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
}
inline void PBBankOpResult::set_bankpassword(const char* value) {
  
  bankpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
}
inline void PBBankOpResult::set_bankpassword(const char* value, size_t size) {
  
  bankpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
}
inline ::std::string* PBBankOpResult::mutable_bankpassword() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
  return bankpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_bankpassword() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
  
  return bankpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_bankpassword(::std::string* bankpassword) {
  if (bankpassword != NULL) {
    
  } else {
    
  }
  bankpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankpassword);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.bankPassword)
}

// optional string bankAccount = 5;
inline void PBBankOpResult::clear_bankaccount() {
  bankaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::bankaccount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
  return bankaccount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_bankaccount(const ::std::string& value) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
}
inline void PBBankOpResult::set_bankaccount(const char* value) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
}
inline void PBBankOpResult::set_bankaccount(const char* value, size_t size) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
}
inline ::std::string* PBBankOpResult::mutable_bankaccount() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
  return bankaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_bankaccount() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
  
  return bankaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_bankaccount(::std::string* bankaccount) {
  if (bankaccount != NULL) {
    
  } else {
    
  }
  bankaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankaccount);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.bankAccount)
}

// optional string brokerID = 6;
inline void PBBankOpResult::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.brokerID)
}
inline void PBBankOpResult::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.brokerID)
}
inline void PBBankOpResult::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.brokerID)
}
inline ::std::string* PBBankOpResult::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_brokerid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.brokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.brokerID)
}

// optional string brokerBranchID = 7;
inline void PBBankOpResult::clear_brokerbranchid() {
  brokerbranchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::brokerbranchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
  return brokerbranchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_brokerbranchid(const ::std::string& value) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
}
inline void PBBankOpResult::set_brokerbranchid(const char* value) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
}
inline void PBBankOpResult::set_brokerbranchid(const char* value, size_t size) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
}
inline ::std::string* PBBankOpResult::mutable_brokerbranchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
  return brokerbranchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_brokerbranchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
  
  return brokerbranchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_brokerbranchid(::std::string* brokerbranchid) {
  if (brokerbranchid != NULL) {
    
  } else {
    
  }
  brokerbranchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerbranchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.brokerBranchID)
}

// optional string accountID = 8;
inline void PBBankOpResult::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::accountid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.accountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.accountID)
}
inline void PBBankOpResult::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.accountID)
}
inline void PBBankOpResult::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.accountID)
}
inline ::std::string* PBBankOpResult::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.accountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_accountid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.accountID)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.accountID)
}

// optional string password = 9;
inline void PBBankOpResult::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::password() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.password)
}
inline void PBBankOpResult::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.password)
}
inline void PBBankOpResult::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.password)
}
inline ::std::string* PBBankOpResult::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_password() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.password)
}

// optional string currencyID = 10;
inline void PBBankOpResult::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::currencyid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.currencyID)
  return currencyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.currencyID)
}
inline void PBBankOpResult::set_currencyid(const char* value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.currencyID)
}
inline void PBBankOpResult::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.currencyID)
}
inline ::std::string* PBBankOpResult::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.currencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_currencyid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.currencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.currencyID)
}

// optional double tradeAmount = 11;
inline void PBBankOpResult::clear_tradeamount() {
  tradeamount_ = 0;
}
inline double PBBankOpResult::tradeamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.tradeAmount)
  return tradeamount_;
}
inline void PBBankOpResult::set_tradeamount(double value) {
  
  tradeamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.tradeAmount)
}

// optional string serialNum = 12;
inline void PBBankOpResult::clear_serialnum() {
  serialnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::serialnum() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.serialNum)
  return serialnum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_serialnum(const ::std::string& value) {
  
  serialnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.serialNum)
}
inline void PBBankOpResult::set_serialnum(const char* value) {
  
  serialnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.serialNum)
}
inline void PBBankOpResult::set_serialnum(const char* value, size_t size) {
  
  serialnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.serialNum)
}
inline ::std::string* PBBankOpResult::mutable_serialnum() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.serialNum)
  return serialnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_serialnum() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.serialNum)
  
  return serialnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_serialnum(::std::string* serialnum) {
  if (serialnum != NULL) {
    
  } else {
    
  }
  serialnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnum);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.serialNum)
}

// optional int32 tradingDay = 13;
inline void PBBankOpResult::clear_tradingday() {
  tradingday_ = 0;
}
inline ::google::protobuf::int32 PBBankOpResult::tradingday() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.tradingDay)
  return tradingday_;
}
inline void PBBankOpResult::set_tradingday(::google::protobuf::int32 value) {
  
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.tradingDay)
}

// optional string tradeDate = 14;
inline void PBBankOpResult::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::tradedate() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
  return tradedate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_tradedate(const ::std::string& value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
}
inline void PBBankOpResult::set_tradedate(const char* value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
}
inline void PBBankOpResult::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
}
inline ::std::string* PBBankOpResult::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_tradedate() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
  
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.tradeDate)
}

// optional string tradeTime = 15;
inline void PBBankOpResult::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::tradetime() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
  return tradetime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_tradetime(const ::std::string& value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
}
inline void PBBankOpResult::set_tradetime(const char* value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
}
inline void PBBankOpResult::set_tradetime(const char* value, size_t size) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
}
inline ::std::string* PBBankOpResult::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_tradetime() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
  
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.tradeTime)
}

// optional string tradeCode = 16;
inline void PBBankOpResult::clear_tradecode() {
  tradecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::tradecode() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
  return tradecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_tradecode(const ::std::string& value) {
  
  tradecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
}
inline void PBBankOpResult::set_tradecode(const char* value) {
  
  tradecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
}
inline void PBBankOpResult::set_tradecode(const char* value, size_t size) {
  
  tradecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
}
inline ::std::string* PBBankOpResult::mutable_tradecode() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
  return tradecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_tradecode() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
  
  return tradecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_tradecode(::std::string* tradecode) {
  if (tradecode != NULL) {
    
  } else {
    
  }
  tradecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradecode);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.tradeCode)
}

// optional string bankSerial = 17;
inline void PBBankOpResult::clear_bankserial() {
  bankserial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::bankserial() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
  return bankserial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_bankserial(const ::std::string& value) {
  
  bankserial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
}
inline void PBBankOpResult::set_bankserial(const char* value) {
  
  bankserial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
}
inline void PBBankOpResult::set_bankserial(const char* value, size_t size) {
  
  bankserial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
}
inline ::std::string* PBBankOpResult::mutable_bankserial() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
  return bankserial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_bankserial() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
  
  return bankserial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_bankserial(::std::string* bankserial) {
  if (bankserial != NULL) {
    
  } else {
    
  }
  bankserial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankserial);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.bankSerial)
}

// optional int32 futureAccType = 18;
inline void PBBankOpResult::clear_futureacctype() {
  futureacctype_ = 0;
}
inline ::google::protobuf::int32 PBBankOpResult::futureacctype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.futureAccType)
  return futureacctype_;
}
inline void PBBankOpResult::set_futureacctype(::google::protobuf::int32 value) {
  
  futureacctype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.futureAccType)
}

// optional int32 bankAccType = 19;
inline void PBBankOpResult::clear_bankacctype() {
  bankacctype_ = 0;
}
inline ::google::protobuf::int32 PBBankOpResult::bankacctype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.bankAccType)
  return bankacctype_;
}
inline void PBBankOpResult::set_bankacctype(::google::protobuf::int32 value) {
  
  bankacctype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.bankAccType)
}

// optional string futureSerial = 20;
inline void PBBankOpResult::clear_futureserial() {
  futureserial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::futureserial() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
  return futureserial_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_futureserial(const ::std::string& value) {
  
  futureserial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
}
inline void PBBankOpResult::set_futureserial(const char* value) {
  
  futureserial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
}
inline void PBBankOpResult::set_futureserial(const char* value, size_t size) {
  
  futureserial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
}
inline ::std::string* PBBankOpResult::mutable_futureserial() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
  return futureserial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_futureserial() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
  
  return futureserial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_futureserial(::std::string* futureserial) {
  if (futureserial != NULL) {
    
  } else {
    
  }
  futureserial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), futureserial);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.futureSerial)
}

// optional double custFee = 21;
inline void PBBankOpResult::clear_custfee() {
  custfee_ = 0;
}
inline double PBBankOpResult::custfee() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.custFee)
  return custfee_;
}
inline void PBBankOpResult::set_custfee(double value) {
  
  custfee_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.custFee)
}

// optional double brokerFee = 22;
inline void PBBankOpResult::clear_brokerfee() {
  brokerfee_ = 0;
}
inline double PBBankOpResult::brokerfee() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.brokerFee)
  return brokerfee_;
}
inline void PBBankOpResult::set_brokerfee(double value) {
  
  brokerfee_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.brokerFee)
}

// optional int32 errorID = 23;
inline void PBBankOpResult::clear_errorid() {
  errorid_ = 0;
}
inline ::google::protobuf::int32 PBBankOpResult::errorid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.errorID)
  return errorid_;
}
inline void PBBankOpResult::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.errorID)
}

// optional bytes errorMsg = 24;
inline void PBBankOpResult::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankOpResult::errormsg() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
  return errormsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
}
inline void PBBankOpResult::set_errormsg(const char* value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
}
inline void PBBankOpResult::set_errormsg(const void* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
}
inline ::std::string* PBBankOpResult::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankOpResult::release_errormsg() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankOpResult::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankOpResult.errorMsg)
}

// -------------------------------------------------------------------

// PBBankInfo

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBBankInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBBankInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBBankInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBBankInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBBankInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBBankInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankInfo.header)
}

// optional string bankID = 2;
inline void PBBankInfo::clear_bankid() {
  bankid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankInfo::bankid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankInfo.bankID)
  return bankid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankInfo::set_bankid(const ::std::string& value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankInfo.bankID)
}
inline void PBBankInfo::set_bankid(const char* value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankInfo.bankID)
}
inline void PBBankInfo::set_bankid(const char* value, size_t size) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankInfo.bankID)
}
inline ::std::string* PBBankInfo::mutable_bankid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankInfo.bankID)
  return bankid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankInfo::release_bankid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankInfo.bankID)
  
  return bankid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankInfo::set_allocated_bankid(::std::string* bankid) {
  if (bankid != NULL) {
    
  } else {
    
  }
  bankid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankInfo.bankID)
}

// optional string branchID = 3;
inline void PBBankInfo::clear_branchid() {
  branchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankInfo::branchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankInfo.branchID)
  return branchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankInfo::set_branchid(const ::std::string& value) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankInfo.branchID)
}
inline void PBBankInfo::set_branchid(const char* value) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankInfo.branchID)
}
inline void PBBankInfo::set_branchid(const char* value, size_t size) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankInfo.branchID)
}
inline ::std::string* PBBankInfo::mutable_branchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankInfo.branchID)
  return branchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankInfo::release_branchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankInfo.branchID)
  
  return branchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankInfo::set_allocated_branchid(::std::string* branchid) {
  if (branchid != NULL) {
    
  } else {
    
  }
  branchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankInfo.branchID)
}

// optional bytes name = 4;
inline void PBBankInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBBankInfo::name() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBBankInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBBankInfo.name)
}
inline void PBBankInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBBankInfo.name)
}
inline void PBBankInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBBankInfo.name)
}
inline ::std::string* PBBankInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBBankInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBBankInfo::release_name() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBBankInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBBankInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBBankInfo.name)
}

// -------------------------------------------------------------------

// PBUserAccountInfo

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBUserAccountInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBUserAccountInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBUserAccountInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBUserAccountInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBUserAccountInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBUserAccountInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.header)
}

// optional string bankID = 2;
inline void PBUserAccountInfo::clear_bankid() {
  bankid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::bankid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
  return bankid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_bankid(const ::std::string& value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
}
inline void PBUserAccountInfo::set_bankid(const char* value) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
}
inline void PBUserAccountInfo::set_bankid(const char* value, size_t size) {
  
  bankid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
}
inline ::std::string* PBUserAccountInfo::mutable_bankid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
  return bankid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_bankid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
  
  return bankid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_bankid(::std::string* bankid) {
  if (bankid != NULL) {
    
  } else {
    
  }
  bankid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.bankID)
}

// optional string bankBranchID = 3;
inline void PBUserAccountInfo::clear_bankbranchid() {
  bankbranchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::bankbranchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
  return bankbranchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_bankbranchid(const ::std::string& value) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
}
inline void PBUserAccountInfo::set_bankbranchid(const char* value) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
}
inline void PBUserAccountInfo::set_bankbranchid(const char* value, size_t size) {
  
  bankbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
}
inline ::std::string* PBUserAccountInfo::mutable_bankbranchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
  return bankbranchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_bankbranchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
  
  return bankbranchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_bankbranchid(::std::string* bankbranchid) {
  if (bankbranchid != NULL) {
    
  } else {
    
  }
  bankbranchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankbranchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.bankBranchID)
}

// optional string bankAccount = 4;
inline void PBUserAccountInfo::clear_bankaccount() {
  bankaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::bankaccount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
  return bankaccount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_bankaccount(const ::std::string& value) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
}
inline void PBUserAccountInfo::set_bankaccount(const char* value) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
}
inline void PBUserAccountInfo::set_bankaccount(const char* value, size_t size) {
  
  bankaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
}
inline ::std::string* PBUserAccountInfo::mutable_bankaccount() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
  return bankaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_bankaccount() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
  
  return bankaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_bankaccount(::std::string* bankaccount) {
  if (bankaccount != NULL) {
    
  } else {
    
  }
  bankaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bankaccount);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.bankAccount)
}

// optional string brokerID = 5;
inline void PBUserAccountInfo::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::brokerid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
  return brokerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
}
inline void PBUserAccountInfo::set_brokerid(const char* value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
}
inline void PBUserAccountInfo::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
}
inline ::std::string* PBUserAccountInfo::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_brokerid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.brokerID)
}

// optional string brokerBranchID = 6;
inline void PBUserAccountInfo::clear_brokerbranchid() {
  brokerbranchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::brokerbranchid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
  return brokerbranchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_brokerbranchid(const ::std::string& value) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
}
inline void PBUserAccountInfo::set_brokerbranchid(const char* value) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
}
inline void PBUserAccountInfo::set_brokerbranchid(const char* value, size_t size) {
  
  brokerbranchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
}
inline ::std::string* PBUserAccountInfo::mutable_brokerbranchid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
  return brokerbranchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_brokerbranchid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
  
  return brokerbranchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_brokerbranchid(::std::string* brokerbranchid) {
  if (brokerbranchid != NULL) {
    
  } else {
    
  }
  brokerbranchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerbranchid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.brokerBranchID)
}

// optional string accountID = 7;
inline void PBUserAccountInfo::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::accountid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
}
inline void PBUserAccountInfo::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
}
inline void PBUserAccountInfo::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
}
inline ::std::string* PBUserAccountInfo::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_accountid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.accountID)
}

// optional string idCardNo = 8;
inline void PBUserAccountInfo::clear_idcardno() {
  idcardno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::idcardno() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
  return idcardno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_idcardno(const ::std::string& value) {
  
  idcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
}
inline void PBUserAccountInfo::set_idcardno(const char* value) {
  
  idcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
}
inline void PBUserAccountInfo::set_idcardno(const char* value, size_t size) {
  
  idcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
}
inline ::std::string* PBUserAccountInfo::mutable_idcardno() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
  return idcardno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_idcardno() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
  
  return idcardno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_idcardno(::std::string* idcardno) {
  if (idcardno != NULL) {
    
  } else {
    
  }
  idcardno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcardno);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.idCardNo)
}

// optional bytes customerName = 9;
inline void PBUserAccountInfo::clear_customername() {
  customername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::customername() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
  return customername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_customername(const ::std::string& value) {
  
  customername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
}
inline void PBUserAccountInfo::set_customername(const char* value) {
  
  customername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
}
inline void PBUserAccountInfo::set_customername(const void* value, size_t size) {
  
  customername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
}
inline ::std::string* PBUserAccountInfo::mutable_customername() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
  return customername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_customername() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
  
  return customername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_customername(::std::string* customername) {
  if (customername != NULL) {
    
  } else {
    
  }
  customername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customername);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.customerName)
}

// optional string currencyID = 10;
inline void PBUserAccountInfo::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserAccountInfo::currencyid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
  return currencyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
}
inline void PBUserAccountInfo::set_currencyid(const char* value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
}
inline void PBUserAccountInfo::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
}
inline ::std::string* PBUserAccountInfo::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserAccountInfo::release_currencyid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserAccountInfo::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.Business.PBUserAccountInfo.currencyID)
}

// optional int32 custType = 11;
inline void PBUserAccountInfo::clear_custtype() {
  custtype_ = 0;
}
inline ::google::protobuf::int32 PBUserAccountInfo::custtype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.custType)
  return custtype_;
}
inline void PBUserAccountInfo::set_custtype(::google::protobuf::int32 value) {
  
  custtype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.custType)
}

// optional int32 bankAccType = 12;
inline void PBUserAccountInfo::clear_bankacctype() {
  bankacctype_ = 0;
}
inline ::google::protobuf::int32 PBUserAccountInfo::bankacctype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.bankAccType)
  return bankacctype_;
}
inline void PBUserAccountInfo::set_bankacctype(::google::protobuf::int32 value) {
  
  bankacctype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.bankAccType)
}

// optional double bankUseAmount = 13;
inline void PBUserAccountInfo::clear_bankuseamount() {
  bankuseamount_ = 0;
}
inline double PBUserAccountInfo::bankuseamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.bankUseAmount)
  return bankuseamount_;
}
inline void PBUserAccountInfo::set_bankuseamount(double value) {
  
  bankuseamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.bankUseAmount)
}

// optional double bankFetchAmount = 14;
inline void PBUserAccountInfo::clear_bankfetchamount() {
  bankfetchamount_ = 0;
}
inline double PBUserAccountInfo::bankfetchamount() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Business.PBUserAccountInfo.bankFetchAmount)
  return bankfetchamount_;
}
inline void PBUserAccountInfo::set_bankfetchamount(double value) {
  
  bankfetchamount_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Business.PBUserAccountInfo.bankFetchAmount)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Business
}  // namespace Message
}  // namespace Future
}  // namespace Micro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_businessobj_2eproto__INCLUDED
