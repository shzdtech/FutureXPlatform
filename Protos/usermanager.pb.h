// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usermanager.proto

#ifndef PROTOBUF_usermanager_2eproto__INCLUDED
#define PROTOBUF_usermanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "commondefine.pb.h"
// @@protoc_insertion_point(includes)

namespace Micro {
namespace Future {
namespace Message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_usermanager_2eproto();
void protobuf_AssignDesc_usermanager_2eproto();
void protobuf_ShutdownFile_usermanager_2eproto();

class PBUserInfo;
class PBUserInfoList;

// ===================================================================

class PBUserInfo : public ::google::protobuf::Message {
 public:
  PBUserInfo();
  virtual ~PBUserInfo();

  PBUserInfo(const PBUserInfo& from);

  inline PBUserInfo& operator=(const PBUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUserInfo& default_instance();

  void Swap(PBUserInfo* other);

  // implements Message ----------------------------------------------

  inline PBUserInfo* New() const { return New(NULL); }

  PBUserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUserInfo& from);
  void MergeFrom(const PBUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // optional string userId = 2;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string userName = 3;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string firstName = 5;
  void clear_firstname();
  static const int kFirstNameFieldNumber = 5;
  const ::std::string& firstname() const;
  void set_firstname(const ::std::string& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  ::std::string* mutable_firstname();
  ::std::string* release_firstname();
  void set_allocated_firstname(::std::string* firstname);

  // optional string lastName = 6;
  void clear_lastname();
  static const int kLastNameFieldNumber = 6;
  const ::std::string& lastname() const;
  void set_lastname(const ::std::string& value);
  void set_lastname(const char* value);
  void set_lastname(const char* value, size_t size);
  ::std::string* mutable_lastname();
  ::std::string* release_lastname();
  void set_allocated_lastname(::std::string* lastname);

  // optional int32 gender = 7;
  void clear_gender();
  static const int kGenderFieldNumber = 7;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // optional string company = 8;
  void clear_company();
  static const int kCompanyFieldNumber = 8;
  const ::std::string& company() const;
  void set_company(const ::std::string& value);
  void set_company(const char* value);
  void set_company(const char* value, size_t size);
  ::std::string* mutable_company();
  ::std::string* release_company();
  void set_allocated_company(::std::string* company);

  // optional string email = 9;
  void clear_email();
  static const int kEmailFieldNumber = 9;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string contactNum = 10;
  void clear_contactnum();
  static const int kContactNumFieldNumber = 10;
  const ::std::string& contactnum() const;
  void set_contactnum(const ::std::string& value);
  void set_contactnum(const char* value);
  void set_contactnum(const char* value, size_t size);
  ::std::string* mutable_contactnum();
  ::std::string* release_contactnum();
  void set_allocated_contactnum(::std::string* contactnum);

  // optional string identityNum = 11;
  void clear_identitynum();
  static const int kIdentityNumFieldNumber = 11;
  const ::std::string& identitynum() const;
  void set_identitynum(const ::std::string& value);
  void set_identitynum(const char* value);
  void set_identitynum(const char* value, size_t size);
  ::std::string* mutable_identitynum();
  ::std::string* release_identitynum();
  void set_allocated_identitynum(::std::string* identitynum);

  // optional string address = 12;
  void clear_address();
  static const int kAddressFieldNumber = 12;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string zipcode = 13;
  void clear_zipcode();
  static const int kZipcodeFieldNumber = 13;
  const ::std::string& zipcode() const;
  void set_zipcode(const ::std::string& value);
  void set_zipcode(const char* value);
  void set_zipcode(const char* value, size_t size);
  ::std::string* mutable_zipcode();
  ::std::string* release_zipcode();
  void set_allocated_zipcode(::std::string* zipcode);

  // optional int32 role = 14;
  void clear_role();
  static const int kRoleFieldNumber = 14;
  ::google::protobuf::int32 role() const;
  void set_role(::google::protobuf::int32 value);

  // optional int32 permission = 15;
  void clear_permission();
  static const int kPermissionFieldNumber = 15;
  ::google::protobuf::int32 permission() const;
  void set_permission(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.PBUserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr firstname_;
  ::google::protobuf::internal::ArenaStringPtr lastname_;
  ::google::protobuf::internal::ArenaStringPtr company_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr contactnum_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 role_;
  ::google::protobuf::internal::ArenaStringPtr identitynum_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr zipcode_;
  ::google::protobuf::int32 permission_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_usermanager_2eproto();
  friend void protobuf_AssignDesc_usermanager_2eproto();
  friend void protobuf_ShutdownFile_usermanager_2eproto();

  void InitAsDefaultInstance();
  static PBUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBUserInfoList : public ::google::protobuf::Message {
 public:
  PBUserInfoList();
  virtual ~PBUserInfoList();

  PBUserInfoList(const PBUserInfoList& from);

  inline PBUserInfoList& operator=(const PBUserInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUserInfoList& default_instance();

  void Swap(PBUserInfoList* other);

  // implements Message ----------------------------------------------

  inline PBUserInfoList* New() const { return New(NULL); }

  PBUserInfoList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUserInfoList& from);
  void MergeFrom(const PBUserInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBUserInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Micro.Future.Message.DataHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Micro::Future::Message::DataHeader& header() const;
  ::Micro::Future::Message::DataHeader* mutable_header();
  ::Micro::Future::Message::DataHeader* release_header();
  void set_allocated_header(::Micro::Future::Message::DataHeader* header);

  // repeated .Micro.Future.Message.PBUserInfo userInfo = 2;
  int userinfo_size() const;
  void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  const ::Micro::Future::Message::PBUserInfo& userinfo(int index) const;
  ::Micro::Future::Message::PBUserInfo* mutable_userinfo(int index);
  ::Micro::Future::Message::PBUserInfo* add_userinfo();
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::PBUserInfo >*
      mutable_userinfo();
  const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::PBUserInfo >&
      userinfo() const;

  // @@protoc_insertion_point(class_scope:Micro.Future.Message.PBUserInfoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Micro::Future::Message::DataHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::PBUserInfo > userinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_usermanager_2eproto();
  friend void protobuf_AssignDesc_usermanager_2eproto();
  friend void protobuf_ShutdownFile_usermanager_2eproto();

  void InitAsDefaultInstance();
  static PBUserInfoList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PBUserInfo

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBUserInfo::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBUserInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBUserInfo::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBUserInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBUserInfo::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBUserInfo::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.header)
}

// optional string userId = 2;
inline void PBUserInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.userId)
}
inline void PBUserInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.userId)
}
inline void PBUserInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.userId)
}
inline ::std::string* PBUserInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_userid() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.userId)
}

// optional string userName = 3;
inline void PBUserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::username() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.userName)
}
inline void PBUserInfo::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.userName)
}
inline void PBUserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.userName)
}
inline ::std::string* PBUserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_username() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.userName)
}

// optional string password = 4;
inline void PBUserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::password() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.password)
}
inline void PBUserInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.password)
}
inline void PBUserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.password)
}
inline ::std::string* PBUserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_password() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.password)
}

// optional string firstName = 5;
inline void PBUserInfo::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::firstname() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.firstName)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.firstName)
}
inline void PBUserInfo::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.firstName)
}
inline void PBUserInfo::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.firstName)
}
inline ::std::string* PBUserInfo::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.firstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_firstname() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.firstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.firstName)
}

// optional string lastName = 6;
inline void PBUserInfo::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::lastname() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.lastName)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.lastName)
}
inline void PBUserInfo::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.lastName)
}
inline void PBUserInfo::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.lastName)
}
inline ::std::string* PBUserInfo::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.lastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_lastname() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.lastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.lastName)
}

// optional int32 gender = 7;
inline void PBUserInfo::clear_gender() {
  gender_ = 0;
}
inline ::google::protobuf::int32 PBUserInfo::gender() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.gender)
  return gender_;
}
inline void PBUserInfo::set_gender(::google::protobuf::int32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.gender)
}

// optional string company = 8;
inline void PBUserInfo::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::company() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.company)
  return company_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_company(const ::std::string& value) {
  
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.company)
}
inline void PBUserInfo::set_company(const char* value) {
  
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.company)
}
inline void PBUserInfo::set_company(const char* value, size_t size) {
  
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.company)
}
inline ::std::string* PBUserInfo::mutable_company() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_company() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.company)
  
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    
  } else {
    
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.company)
}

// optional string email = 9;
inline void PBUserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::email() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.email)
}
inline void PBUserInfo::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.email)
}
inline void PBUserInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.email)
}
inline ::std::string* PBUserInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_email() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.email)
}

// optional string contactNum = 10;
inline void PBUserInfo::clear_contactnum() {
  contactnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::contactnum() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.contactNum)
  return contactnum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_contactnum(const ::std::string& value) {
  
  contactnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.contactNum)
}
inline void PBUserInfo::set_contactnum(const char* value) {
  
  contactnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.contactNum)
}
inline void PBUserInfo::set_contactnum(const char* value, size_t size) {
  
  contactnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.contactNum)
}
inline ::std::string* PBUserInfo::mutable_contactnum() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.contactNum)
  return contactnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_contactnum() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.contactNum)
  
  return contactnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_contactnum(::std::string* contactnum) {
  if (contactnum != NULL) {
    
  } else {
    
  }
  contactnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contactnum);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.contactNum)
}

// optional string identityNum = 11;
inline void PBUserInfo::clear_identitynum() {
  identitynum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::identitynum() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.identityNum)
  return identitynum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_identitynum(const ::std::string& value) {
  
  identitynum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.identityNum)
}
inline void PBUserInfo::set_identitynum(const char* value) {
  
  identitynum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.identityNum)
}
inline void PBUserInfo::set_identitynum(const char* value, size_t size) {
  
  identitynum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.identityNum)
}
inline ::std::string* PBUserInfo::mutable_identitynum() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.identityNum)
  return identitynum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_identitynum() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.identityNum)
  
  return identitynum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_identitynum(::std::string* identitynum) {
  if (identitynum != NULL) {
    
  } else {
    
  }
  identitynum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identitynum);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.identityNum)
}

// optional string address = 12;
inline void PBUserInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::address() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.address)
}
inline void PBUserInfo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.address)
}
inline void PBUserInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.address)
}
inline ::std::string* PBUserInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_address() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.address)
}

// optional string zipcode = 13;
inline void PBUserInfo::clear_zipcode() {
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBUserInfo::zipcode() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.zipcode)
  return zipcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_zipcode(const ::std::string& value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.zipcode)
}
inline void PBUserInfo::set_zipcode(const char* value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.PBUserInfo.zipcode)
}
inline void PBUserInfo::set_zipcode(const char* value, size_t size) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.PBUserInfo.zipcode)
}
inline ::std::string* PBUserInfo::mutable_zipcode() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfo.zipcode)
  return zipcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBUserInfo::release_zipcode() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfo.zipcode)
  
  return zipcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBUserInfo::set_allocated_zipcode(::std::string* zipcode) {
  if (zipcode != NULL) {
    
  } else {
    
  }
  zipcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zipcode);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfo.zipcode)
}

// optional int32 role = 14;
inline void PBUserInfo::clear_role() {
  role_ = 0;
}
inline ::google::protobuf::int32 PBUserInfo::role() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.role)
  return role_;
}
inline void PBUserInfo::set_role(::google::protobuf::int32 value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.role)
}

// optional int32 permission = 15;
inline void PBUserInfo::clear_permission() {
  permission_ = 0;
}
inline ::google::protobuf::int32 PBUserInfo::permission() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfo.permission)
  return permission_;
}
inline void PBUserInfo::set_permission(::google::protobuf::int32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.PBUserInfo.permission)
}

// -------------------------------------------------------------------

// PBUserInfoList

// optional .Micro.Future.Message.DataHeader header = 1;
inline bool PBUserInfoList::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void PBUserInfoList::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::Micro::Future::Message::DataHeader& PBUserInfoList::header() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfoList.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::Micro::Future::Message::DataHeader* PBUserInfoList::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Micro::Future::Message::DataHeader;
  }
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfoList.header)
  return header_;
}
inline ::Micro::Future::Message::DataHeader* PBUserInfoList::release_header() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.PBUserInfoList.header)
  
  ::Micro::Future::Message::DataHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PBUserInfoList::set_allocated_header(::Micro::Future::Message::DataHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.PBUserInfoList.header)
}

// repeated .Micro.Future.Message.PBUserInfo userInfo = 2;
inline int PBUserInfoList::userinfo_size() const {
  return userinfo_.size();
}
inline void PBUserInfoList::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::Micro::Future::Message::PBUserInfo& PBUserInfoList::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.PBUserInfoList.userInfo)
  return userinfo_.Get(index);
}
inline ::Micro::Future::Message::PBUserInfo* PBUserInfoList::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.PBUserInfoList.userInfo)
  return userinfo_.Mutable(index);
}
inline ::Micro::Future::Message::PBUserInfo* PBUserInfoList::add_userinfo() {
  // @@protoc_insertion_point(field_add:Micro.Future.Message.PBUserInfoList.userInfo)
  return userinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::PBUserInfo >*
PBUserInfoList::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:Micro.Future.Message.PBUserInfoList.userInfo)
  return &userinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Micro::Future::Message::PBUserInfo >&
PBUserInfoList::userinfo() const {
  // @@protoc_insertion_point(field_list:Micro.Future.Message.PBUserInfoList.userInfo)
  return userinfo_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Future
}  // namespace Micro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_usermanager_2eproto__INCLUDED
