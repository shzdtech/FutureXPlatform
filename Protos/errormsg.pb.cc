// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errormsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errormsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Micro {
namespace Future {
namespace Message {

namespace {

const ::google::protobuf::Descriptor* ExceptionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExceptionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_errormsg_2eproto() {
  protobuf_AddDesc_errormsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "errormsg.proto");
  GOOGLE_CHECK(file != NULL);
  ExceptionMessage_descriptor_ = file->message_type(0);
  static const int ExceptionMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, serialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, errortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, description_),
  };
  ExceptionMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExceptionMessage_descriptor_,
      ExceptionMessage::default_instance_,
      ExceptionMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExceptionMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionMessage, _is_default_instance_));
  Result_descriptor_ = file->message_type(1);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, serialid_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _is_default_instance_));
  RawData_descriptor_ = file->message_type(2);
  static const int RawData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawData, data_),
  };
  RawData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawData_descriptor_,
      RawData::default_instance_,
      RawData_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_errormsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExceptionMessage_descriptor_, &ExceptionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawData_descriptor_, &RawData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_errormsg_2eproto() {
  delete ExceptionMessage::default_instance_;
  delete ExceptionMessage_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete RawData::default_instance_;
  delete RawData_reflection_;
}

void protobuf_AddDesc_errormsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016errormsg.proto\022\024Micro.Future.Message\"r"
    "\n\020ExceptionMessage\022\020\n\010serialId\030\001 \001(\r\022\021\n\t"
    "messageId\030\002 \001(\r\022\021\n\terrortype\030\003 \001(\005\022\021\n\ter"
    "rorcode\030\004 \001(\005\022\023\n\013description\030\005 \001(\014\"(\n\006Re"
    "sult\022\014\n\004code\030\001 \001(\005\022\020\n\010serialId\030\002 \001(\r\"\027\n\007"
    "RawData\022\014\n\004data\030\001 \001(\014b\006proto3", 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errormsg.proto", &protobuf_RegisterTypes);
  ExceptionMessage::default_instance_ = new ExceptionMessage();
  Result::default_instance_ = new Result();
  RawData::default_instance_ = new RawData();
  ExceptionMessage::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  RawData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_errormsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_errormsg_2eproto {
  StaticDescriptorInitializer_errormsg_2eproto() {
    protobuf_AddDesc_errormsg_2eproto();
  }
} static_descriptor_initializer_errormsg_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExceptionMessage::kSerialIdFieldNumber;
const int ExceptionMessage::kMessageIdFieldNumber;
const int ExceptionMessage::kErrortypeFieldNumber;
const int ExceptionMessage::kErrorcodeFieldNumber;
const int ExceptionMessage::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExceptionMessage::ExceptionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.ExceptionMessage)
}

void ExceptionMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExceptionMessage::ExceptionMessage(const ExceptionMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.ExceptionMessage)
}

void ExceptionMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialid_ = 0u;
  messageid_ = 0u;
  errortype_ = 0;
  errorcode_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExceptionMessage::~ExceptionMessage() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.ExceptionMessage)
  SharedDtor();
}

void ExceptionMessage::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExceptionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExceptionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExceptionMessage_descriptor_;
}

const ExceptionMessage& ExceptionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errormsg_2eproto();
  return *default_instance_;
}

ExceptionMessage* ExceptionMessage::default_instance_ = NULL;

ExceptionMessage* ExceptionMessage::New(::google::protobuf::Arena* arena) const {
  ExceptionMessage* n = new ExceptionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExceptionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Micro.Future.Message.ExceptionMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ExceptionMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExceptionMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serialid_, errorcode_);
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ExceptionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.ExceptionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serialId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serialid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_messageId;
        break;
      }

      // optional uint32 messageId = 2;
      case 2: {
        if (tag == 16) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messageid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errortype;
        break;
      }

      // optional int32 errortype = 3;
      case 3: {
        if (tag == 24) {
         parse_errortype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errortype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errorcode;
        break;
      }

      // optional int32 errorcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional bytes description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.ExceptionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.ExceptionMessage)
  return false;
#undef DO_
}

void ExceptionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.ExceptionMessage)
  // optional uint32 serialId = 1;
  if (this->serialid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serialid(), output);
  }

  // optional uint32 messageId = 2;
  if (this->messageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->messageid(), output);
  }

  // optional int32 errortype = 3;
  if (this->errortype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errortype(), output);
  }

  // optional int32 errorcode = 4;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errorcode(), output);
  }

  // optional bytes description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.ExceptionMessage)
}

::google::protobuf::uint8* ExceptionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.ExceptionMessage)
  // optional uint32 serialId = 1;
  if (this->serialid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serialid(), target);
  }

  // optional uint32 messageId = 2;
  if (this->messageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->messageid(), target);
  }

  // optional int32 errortype = 3;
  if (this->errortype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errortype(), target);
  }

  // optional int32 errorcode = 4;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errorcode(), target);
  }

  // optional bytes description = 5;
  if (this->description().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.ExceptionMessage)
  return target;
}

int ExceptionMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Micro.Future.Message.ExceptionMessage)
  int total_size = 0;

  // optional uint32 serialId = 1;
  if (this->serialid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serialid());
  }

  // optional uint32 messageId = 2;
  if (this->messageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->messageid());
  }

  // optional int32 errortype = 3;
  if (this->errortype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errortype());
  }

  // optional int32 errorcode = 4;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional bytes description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExceptionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Micro.Future.Message.ExceptionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExceptionMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExceptionMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Micro.Future.Message.ExceptionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Micro.Future.Message.ExceptionMessage)
    MergeFrom(*source);
  }
}

void ExceptionMessage::MergeFrom(const ExceptionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Micro.Future.Message.ExceptionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.serialid() != 0) {
    set_serialid(from.serialid());
  }
  if (from.messageid() != 0) {
    set_messageid(from.messageid());
  }
  if (from.errortype() != 0) {
    set_errortype(from.errortype());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void ExceptionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Micro.Future.Message.ExceptionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExceptionMessage::CopyFrom(const ExceptionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Micro.Future.Message.ExceptionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionMessage::IsInitialized() const {

  return true;
}

void ExceptionMessage::Swap(ExceptionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExceptionMessage::InternalSwap(ExceptionMessage* other) {
  std::swap(serialid_, other->serialid_);
  std::swap(messageid_, other->messageid_);
  std::swap(errortype_, other->errortype_);
  std::swap(errorcode_, other->errorcode_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExceptionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExceptionMessage_descriptor_;
  metadata.reflection = ExceptionMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExceptionMessage

// optional uint32 serialId = 1;
void ExceptionMessage::clear_serialid() {
  serialid_ = 0u;
}
 ::google::protobuf::uint32 ExceptionMessage::serialid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.ExceptionMessage.serialId)
  return serialid_;
}
 void ExceptionMessage::set_serialid(::google::protobuf::uint32 value) {
  
  serialid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.ExceptionMessage.serialId)
}

// optional uint32 messageId = 2;
void ExceptionMessage::clear_messageid() {
  messageid_ = 0u;
}
 ::google::protobuf::uint32 ExceptionMessage::messageid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.ExceptionMessage.messageId)
  return messageid_;
}
 void ExceptionMessage::set_messageid(::google::protobuf::uint32 value) {
  
  messageid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.ExceptionMessage.messageId)
}

// optional int32 errortype = 3;
void ExceptionMessage::clear_errortype() {
  errortype_ = 0;
}
 ::google::protobuf::int32 ExceptionMessage::errortype() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.ExceptionMessage.errortype)
  return errortype_;
}
 void ExceptionMessage::set_errortype(::google::protobuf::int32 value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.ExceptionMessage.errortype)
}

// optional int32 errorcode = 4;
void ExceptionMessage::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 ExceptionMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.ExceptionMessage.errorcode)
  return errorcode_;
}
 void ExceptionMessage::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.ExceptionMessage.errorcode)
}

// optional bytes description = 5;
void ExceptionMessage::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExceptionMessage::description() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.ExceptionMessage.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExceptionMessage::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.ExceptionMessage.description)
}
 void ExceptionMessage::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.ExceptionMessage.description)
}
 void ExceptionMessage::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.ExceptionMessage.description)
}
 ::std::string* ExceptionMessage::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.ExceptionMessage.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExceptionMessage::release_description() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.ExceptionMessage.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExceptionMessage::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.ExceptionMessage.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kCodeFieldNumber;
const int Result::kSerialIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  code_ = 0;
  serialid_ = 0u;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errormsg_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:Micro.Future.Message.Result)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Result, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Result*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(code_, serialid_);

#undef ZR_HELPER_
#undef ZR_

}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serialId;
        break;
      }

      // optional uint32 serialId = 2;
      case 2: {
        if (tag == 16) {
         parse_serialId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serialid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.Result)
  // optional int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional uint32 serialId = 2;
  if (this->serialid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serialid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.Result)
  // optional int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional uint32 serialId = 2;
  if (this->serialid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serialid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.Result)
  return target;
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Micro.Future.Message.Result)
  int total_size = 0;

  // optional int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional uint32 serialId = 2;
  if (this->serialid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serialid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Micro.Future.Message.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Micro.Future.Message.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Micro.Future.Message.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Micro.Future.Message.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.serialid() != 0) {
    set_serialid(from.serialid());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Micro.Future.Message.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Micro.Future.Message.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(code_, other->code_);
  std::swap(serialid_, other->serialid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// optional int32 code = 1;
void Result::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 Result::code() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Result.code)
  return code_;
}
 void Result::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Result.code)
}

// optional uint32 serialId = 2;
void Result::clear_serialid() {
  serialid_ = 0u;
}
 ::google::protobuf::uint32 Result::serialid() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.Result.serialId)
  return serialid_;
}
 void Result::set_serialid(::google::protobuf::uint32 value) {
  
  serialid_ = value;
  // @@protoc_insertion_point(field_set:Micro.Future.Message.Result.serialId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawData::RawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Micro.Future.Message.RawData)
}

void RawData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RawData::RawData(const RawData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Micro.Future.Message.RawData)
}

void RawData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:Micro.Future.Message.RawData)
  SharedDtor();
}

void RawData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawData_descriptor_;
}

const RawData& RawData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errormsg_2eproto();
  return *default_instance_;
}

RawData* RawData::default_instance_ = NULL;

RawData* RawData::New(::google::protobuf::Arena* arena) const {
  RawData* n = new RawData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:Micro.Future.Message.RawData)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Micro.Future.Message.RawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Micro.Future.Message.RawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Micro.Future.Message.RawData)
  return false;
#undef DO_
}

void RawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Micro.Future.Message.RawData)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Micro.Future.Message.RawData)
}

::google::protobuf::uint8* RawData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Micro.Future.Message.RawData)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Micro.Future.Message.RawData)
  return target;
}

int RawData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Micro.Future.Message.RawData)
  int total_size = 0;

  // optional bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Micro.Future.Message.RawData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Micro.Future.Message.RawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Micro.Future.Message.RawData)
    MergeFrom(*source);
  }
}

void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Micro.Future.Message.RawData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void RawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Micro.Future.Message.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Micro.Future.Message.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {

  return true;
}

void RawData::Swap(RawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawData::InternalSwap(RawData* other) {
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawData_descriptor_;
  metadata.reflection = RawData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawData

// optional bytes data = 1;
void RawData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RawData::data() const {
  // @@protoc_insertion_point(field_get:Micro.Future.Message.RawData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Micro.Future.Message.RawData.data)
}
 void RawData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Micro.Future.Message.RawData.data)
}
 void RawData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Micro.Future.Message.RawData.data)
}
 ::std::string* RawData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Micro.Future.Message.RawData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RawData::release_data() {
  // @@protoc_insertion_point(field_release:Micro.Future.Message.RawData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Micro.Future.Message.RawData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace Future
}  // namespace Micro

// @@protoc_insertion_point(global_scope)
