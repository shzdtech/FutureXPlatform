syntax = "proto3";

import "commondefine.proto";

package Micro.Future.Message.Business;

message PBInstrument
{
	string exchange = 1;
	string contract = 2;
}

message PBInstrumentList
{
	DataHeader header = 1;
	repeated PBInstrument instrument = 2;
}

message PBMarketData 
{
	DataHeader header = 1;

	//MD Common Data
	string exchange = 2;
	string contract = 3;
	double preCloseValue = 4;
	double openValue = 5;
	double turnover = 6;
	int32  volume = 7;
	double highValue = 8;
	double lowValue = 9;

	//Equity Data
	double matchPrice = 10;
	repeated double askPrice = 11;
	repeated int32 askVolume = 12;
	repeated double bidPrice = 13;
	repeated int32 bidVolume = 14;
	
	//Index Data
	double preSettlePrice = 15;
	double priceChange = 16;
	double settlePrice = 17;
	double highLimit = 18;
	double lowLimit = 19;

	double preOpenInterest = 20;
	double openInterest = 21;
	double averagePrice = 22;

	int32 updateTime = 23;
	int32 tradingDay = 24;

	double closeValue = 25;
}

message PBMarketDataList
{
	DataHeader header = 1;
	repeated PBMarketData marketData = 2;
}

message PBHedgeContract
{
	string exchange = 1;
	string contract = 2;
	string underlying = 3;
}

message PBPortfolio
{
	DataHeader header = 1;
	string name = 2;
	int32 hedgeDelay = 3;
	double threshold = 4;
	bool hedging = 5;
	int32 hedgeVolume = 6;
	repeated PBHedgeContract hedgeContracts = 7;
}

message PBPortfolioList
{
	DataHeader header = 1;
	repeated PBPortfolio portfolio = 2;
}

message PBPricingData
{
	DataHeader header = 1;
	
	//MD Common Data
	string exchange = 2;
	string contract = 3;

	//Equity Data
	double askPrice = 4;
	double bidPrice = 5;
	int32 askSize = 6;
	int32 bidSize = 7;

}

message PBPricingDataList
{
	repeated PBPricingData pricingData = 1;
	DataHeader header = 2;
}

message PBOptionMarketData
{
	double askPrice = 1;
	double bidPrice = 2;
	int32 askSize = 3;
	int32 bidSize = 4;
}

message PBImpliedVolatility
{
	double askVolatility = 1;
	double bidVolatility = 2;
}
message PBOptionData
{
	double askPrice = 1;
	double bidPrice = 2;
	int32 askSize = 3;
	int32 bidSize = 4;
	double askVolatility = 5;
	double bidVolatility = 6;
	double midVolatility = 7;
	double delta = 8;
	double theta = 9;
	double gamma = 10;
	double vega = 11;
	double rho = 12;
}

message PBWingsModelReturn
{
	double f_atm = 1;
	double f_ref = 2;
	double f_syn = 3;
	double vol_curr = 5;
	double vol_curr_offset = 6;
	double slope_curr = 7;
	double slope_curr_offset = 8;
	double x0 = 9;
	double x1 = 11;
	double x2 = 13;
	double x3 = 15;
}

message PBTradingDeskOptionParams
{
	DataHeader header = 1;
	string exchange = 2;
	string contract = 3;
	PBOptionMarketData marketData = 4;
	PBImpliedVolatility impliedVol = 5;
	PBOptionData theoData = 6;
	PBWingsModelReturn wingsReturn = 7;
	PBOptionData theoDataTemp = 8;
}

message PBPricingContract
{
	string exchange = 1;
	string contract = 2;
	double weight = 3;
	double adjust = 4;	
}

message PBStrategy
{
	DataHeader header = 1;
	string exchange = 2;
	string contract = 3;
	string underlying = 4;
	string symbol = 5;
	bool hedging = 6;
	bool bidEnabled = 7;
	bool askEnabled = 8;
	int32 bidQV = 9;
	int32 askQV = 10;
	int32 depth = 11;
	repeated PBPricingContract pricingContracts = 12;
	string pricingModel = 13;
	repeated PBPricingContract ivmContracts = 14;
	string ivModel = 15;
	repeated PBPricingContract volContracts = 16;
	string volModel = 17;

	string baseExchange = 18;
	string baseContract = 19;
	string portfolio = 20;

	int32 maxAutoTrade = 21;
	int32 bidCounter = 22;
	int32 askCounter = 23;
	bool bidNotCross = 24;
	bool closeMode = 25;
	int32 limitOrderCounter = 26;
	int32 tif = 27;
	int32 volCond = 28;
	int32 tickSizeMult = 29;
}

message PBStrategyList
{
	DataHeader header = 1;
	repeated PBStrategy strategy = 2;
}

message PBRisk
{
	DataHeader header = 1;
	string exchange = 2;
	string contract = 3;
	string underlying = 4;
	int32 position = 5;
	double delta = 6;
	double theta = 7;
	double gamma = 8;
	double vega = 9;
	double rho = 10;
	double price = 11;
}

message PBRiskList
{
	DataHeader header = 1;
	repeated PBRisk risk = 2;
}

message PBContractParam
{
	string exchange = 1;
	string contract = 2;
	int32 depthVol = 3;
	double gamma = 4;
}

message PBContractParamList
{
	DataHeader header = 1;
	repeated PBContractParam params = 2;
}

message PBOTCUserParam
{
	string exchange = 1;
	string contract = 2;
	double quantity = 3;
}

message PBOTCUserParamList
{
	DataHeader header = 1;
	repeated PBOTCUserParam params = 2;
	
}

///报单
message PBOrderRequest {
	DataHeader header = 1;
	///报单编号
	uint64 orderID = 2;
	///系统报单编号
	uint64 orderSysID = 3;
	///交易所代码
	string	exchange = 4;
	///合约代码
	string	contract = 5;
	///价格
	double limitPrice = 6;	
	///数量
	int32 volume = 7;
	///报单价格条件
	int32 execType = 8;
	///Time In Force
	int32 tif = 9;
	///买卖方向
	int32 direction = 10;
	///开平标志
	int32 openclose = 11;
	///
	string portfolio = 12;
	/// vol condition
	int32 volCond = 13;
}

message PBOrderInfo {

	DataHeader header = 1;
	///报单编号
	uint64 orderID = 2;
	///系统报单编号
	uint64	orderSysID = 3;	
	///经纪公司代码
	string	brokerID = 4;
	///投资者代码
	string	investorID = 5;
	///交易所代码
	string	exchange = 6;
	///合约代码
	string	contract = 7;
	///报单价格条件
	int32	execType = 8;
	///TIF
	int32	tif = 9;
	///交易类型
	int32	tradingType = 10;
	///买卖方向
	int32	direction = 11;
	///价格
	double	limitPrice = 12;
	///止损价
	double	stopPrice = 13;	
	///报单状态
	int32 orderStatus = 14;
	///报单类型
	int32	orderType = 15;
	///数量
	int32	volume = 16;
	///委托时间
	string insertTime = 17;
	///最后修改时间
	string	updateTime = 18;
	///撤销时间
	string	cancelTime = 19;
	///今成交数量
	int32 volumeTraded = 20;
	///剩余数量
	int32 volumeRemain = 21;
	///成交量类型
	int32 volumeCondition = 22;
	///交易日
	int32 tradingDay = 23;
	///活动状态
	bool active = 24;
	///开平标志
	int32 openclose = 25;
	///状态信息
	bytes message = 26;
	/// Session Id
	int32 sessionID = 27;
	///
	string portfolio = 28;
	///委托日期
	string insertDate = 29;
}

///成交
message PBTradeInfo {
	DataHeader header = 1;
	///成交编号
	uint64	tradeID = 2;
	///买卖方向
	int32 direction = 3;
	///开平标志
	int32 openclose = 4;
	///报单编号
	uint64	orderSysID = 5;
	///报单引用
	uint64 orderID = 6;
	///价格
	double	price = 7;
	///数量
	int32	volume = 8;
	///经纪公司代码
	string	brokerID = 9;
	///投资者代码
	string	investorID = 10;
	///交易所代码
	string	exchange = 11;
	///合约代码
	string	contract = 12;
	///用户代码
	string	userID = 13;
	///成交时期
	string	tradeDate = 14;
	///成交时间
	string	tradeTime = 15;
	///成交类型
	int32 tradeType = 16;
	///投机套保标志
	int32 hedgeFlag = 17;
	///手续费
	double	commission = 18;
	///
	string portfolio = 19;
}

message PBPosition {
	DataHeader header = 1;
	///交易所代码
	string	exchange = 2;
	///合约代码
	string	contract = 3;
	///持仓多空方向
	int32 direction = 4;
	///持仓
	int32 position = 5;
	///上日持仓
	int32 ydPosition = 6;
	///持仓日期标识
	int32 positionDateFlag = 7;	
	///开仓量
	int32 openVolume = 8;
	///平仓量
	int32 closeVolume = 9;
	///开仓金额
	double openAmount = 10;
	///平仓金额
	double closeAmount = 11;
	///持仓成本
	double cost = 12;
	///开仓成本
	double openCost = 13;
	///持仓盈亏
	double profit = 14;
	///平仓盈亏
	double	closeProfit = 15;
	///占用的保证金
	double	useMargin = 16;
	///投机套保标志
	int32 hedgeFlag = 17;
	///今日持仓
	int32 tdPosition = 18;
	///Portfolio
	string portfolio = 19;
}

message PBAccountInfo {
	///经纪公司代码
	string	brokerID = 2;
	///投资者帐号
	string	accountID = 3;
	///上次质押金额
	double	preMortgage = 4;
	///上次信用额度
	double	preCredit = 5;
	///上次存款额
	double	preDeposit = 6;
	///上次结算准备金
	double	preBalance = 7;
	///上次占用的保证金
	double	preMargin = 8;
	///利息基数
	double	interestBase = 9;
	///利息收入
	double	interest = 10;
	///入金金额
	double	deposit = 11;
	///出金金额
	double	withdraw = 12;
	///冻结的保证金
	double	frozenMargin = 13;
	///冻结的资金
	double	frozenCash = 14;
	///冻结的手续费
	double	frozenCommission = 15;
	///当前保证金总额
	double	currMargin = 16;
	///资金差额
	double	cashIn = 17;
	///手续费
	double	commission = 18;
	///平仓盈亏
	double	closeProfit = 19;
	///持仓盈亏
	double	positionProfit = 20;
	///期货结算准备金
	double	balance = 21;
	///可用资金
	double	available = 22;
	///可取资金
	double	withdrawQuota = 23;
	///基本准备金
	double	reserve = 24;
	///交易日
	int32 tradingDay = 25;
	///结算编号
	int32	settlementID = 26;
	///信用额度
	double	credit = 27;
	///质押金额
	double	mortgage = 28;
	///交易所保证金
	double	exchangeMargin = 29;
	///投资者交割保证金
	double	deliveryMargin = 30;
	///交易所交割保证金
	double	exchangeDeliveryMargin = 31;
	///保底期货结算准备金
	double	reserveBalance = 32;

	DataHeader header = 33;
}

message PBMarketInfo {
	DataHeader header = 1;	
	//交易所代码
	string exchange = 2;
	//交易所名称
	bytes name = 3;
	//交易所属性
	bytes property = 4;
}

message PBContractInfo {
	///交易所代码
	string exchange  = 1;
	///合约代码
	string	contract = 2;
	///合约名称
	bytes name = 3;
	///产品代码
	string productID = 4;
	///产品类型
	int32 productType = 5;
	///交割年份
	int32 deliveryYear = 6;
	///交割月
	int32 deliveryMonth = 7;
	///市价单最大下单量
	int32 maxMarketOrderVolume = 8;
	///市价单最小下单量
	int32 minMarketOrderVolume = 9;
	///限价单最大下单量
	int32 maxLimitOrderVolume = 10;
	///限价单最小下单量
	int32 minLimitOrderVolume = 11;
	///合约数量乘数
	int32 volumeMultiple = 12;
	///最小变动价位
	double priceTick = 13;
	///创建日
	string createDate = 14;
	///上市日
	string openDate = 15;
	///到期日
	string expireDate = 16;
	///开始交割日
	string startDelivDate = 17;
	///结束交割日
	string endDelivDate = 18;
	///合约生命周期状态
	int32 lifePhase = 19;
	///当前是否交易
	bool isTrading = 20;
	///持仓类型
	int32 positionType = 21;
	///持仓日期类型
	int32 positionDateType = 22;
	///多头保证金率
	double longMarginRatio = 23;
	///空头保证金率
	double shortMarginRatio = 24;
	///
	string underlyingExchange = 25;
	///
	string underlyingContract = 26;

	int32 contractType = 27;

	double strikePrice = 28;
}

message PBContractInfoList
{
	DataHeader header = 1;
	repeated PBContractInfo contractInfo = 2;
}

///转账请求
message PBBankOpRequest {
	DataHeader header = 1;
	///银行编码
	string bankID = 2;
	///银行分支机构编码
	string bankBranchID = 3;
	///银行密码
	string bankPassword = 4;
	///银行帐号
	string bankAccount = 5;
	///期货公司编码
	string brokerID = 6;
	///期商分支机构代码
	string brokerBranchID = 7;
	///投资者帐号
	string accountID = 8;
	///投资者密码
	string password = 9;
	///币种代码
	string currencyID = 10;

	double tradeAmount = 11;  
}

message PBBankOpResult {
	DataHeader header = 1;
	///银行编码
	string bankID = 2;
	///银行分支机构编码
	string bankBranchID = 3;
	///银行密码
	string bankPassword = 4;
	///银行帐号
	string bankAccount = 5;
	///期货公司编码
	string brokerID = 6;
	///期商分支机构代码
	string brokerBranchID = 7;
	///投资者帐号
	string accountID = 8;
	///投资者密码
	string password = 9;
	///币种代码
	string currencyID = 10;

	double tradeAmount = 11; 

	///平台流水号
	string serialNum = 12; 
	///交易日
	int32 tradingDay = 13; 
	///交易日期
	string tradeDate = 14; 
	///交易时间
	string tradeTime = 15; 
	///交易代码
	string tradeCode = 16; 
	///银行流水号
	string bankSerial = 17;
	///期货公司帐号类型
	int32 futureAccType = 18; 
	///期货公司帐号类型
	int32 bankAccType = 19; 
	///期货公司流水号
	string futureSerial = 20; 
	///应收客户费用
	double custFee = 21; 
	///应收期货公司费用
	double brokerFee = 22; 
	///错误代码
	int32 errorID = 23; 
	///错误信息
	bytes errorMsg = 24; 
}

message PBBankInfo {
	DataHeader header = 1;
	///银行编码
	string bankID = 2;
	///银行分支机构编码
	string branchID = 3;
	///名称
	bytes name = 4;
}

message PBUserAccountInfo {
	DataHeader header = 1;
	///银行编码
	string bankID = 2;
	///银行分支机构编码
	string bankBranchID = 3;
	///银行帐号
	string bankAccount = 4;
	///期货公司编码
	string brokerID = 5;
	///期货公司分支机构编码
	string brokerBranchID = 6;
	///投资者帐号
	string accountID = 7;
	///证件号码
	string idCardNo = 8;
	///客户姓名
	bytes customerName = 9;
	///币种代码
	string currencyID = 10;
	///客户类型
	int32 custType = 11;
	///银行帐号类型
	int32 bankAccType = 12;
	///银行可用金额
	double bankUseAmount = 13;
	///银行可取金额
	double bankFetchAmount = 14;
}

message PBPositionCompare
{
	string contract = 1;
	int32 direction = 2;
	int32 dbPosition = 3;
	int32 sysPosition = 4;
}

message PBPositionCompareList
{
	DataHeader header = 1;
	repeated PBPositionCompare positions = 2;
}

message PBValuationContract
{
	string exchange = 1;
	string contract = 2;
	double price = 3;
	double volatility = 4;
}

message PBValuationRisk
{
	DataHeader header = 1;
	repeated PBValuationContract contractValue = 2;
	int32 daysRemain = 3;
	double interest = 4;
	string portfolio = 5;
}